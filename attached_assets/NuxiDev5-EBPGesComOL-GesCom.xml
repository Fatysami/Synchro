<?xml version="1.0" encoding="UTF-8"?>
<NuxiDev>
  <Logiciel>EBPGesComOL-&amp;gt;GesCom</Logiciel>
  <LogicielBureauCode>EBPGesComOL</LogicielBureauCode>
  <LogicielBureauLibellé>EBP GesCom Open Line</LogicielBureauLibellé>
  <LogicielMobileCode>GesCom</LogicielMobileCode>
  <LogicielMobileLibellé>EBP Gestion Open Line</LogicielMobileLibellé>
  <DateMAJ>20250305093300664</DateMAJ>
  <OriginePoste>Dell-Dominique</OriginePoste>
  <OrigineUtilisateur>Dominique</OrigineUtilisateur>
  <Chronologie>CMB_SALARIES	0		&#13;
CMB_TECHNICIENS	0		&#13;
CMB_STOCK_DEPOT	0		&#13;
CMB_EMPLACEMENT	0		&#13;
CMB_FAMILLECLIENT	0		&#13;
CMB_FAMILLEFOURNISSEUR	0		&#13;
CMB_FAMILLEARTICLE	0		&#13;
CMB_GROUPEARTICLE	0		&#13;
PHOTO_ARTICLE	0		&#13;
PRE_CONFIG_MAITRE	0		&#13;
BACKOFFICE	1		&#13;
ETAT_SPECIFIQUE	1		&#13;
RE_CONFIG_AUTO	1		&#13;
SPECIFIQUE	1		&#13;
INITSYNC	2		&#13;
PAGESPERSO	2		&#13;
BDD_SPECIFIQUE	2		&#13;
PARAMSYS	3		&#13;
DOCUMENT	4	4	&#13;
DOCUMENTAVOIR	4		R&#13;
DOCUMENTBL	4		R&#13;
DOCUMENTCOMMANDE_ACHAT	4		R&#13;
DOCUMENTCOMMANDE	4		R&#13;
DOCUMENTDEVIS	4		R&#13;
DOCUMENTFACTURE_ACHAT	4		R&#13;
DOCUMENTFACTURE	4		R&#13;
DOCUMENTDEMANDEPRIX_ACHAT	4		R&#13;
DOCUMENTS_NUXI	4		&#13;
DOCUMENTLIGNE-AVOIR	4		R&#13;
DOCUMENTLIGNE-BL-SUP	4		R&#13;
DOCUMENTLIGNE-BL	4		R&#13;
DOCUMENTLIGNE-COMMANDE_ACHAT	4		R&#13;
DOCUMENTLIGNE-COMMANDE	4		R&#13;
DOCUMENTLIGNE-COMMANDE-SUP	4		R&#13;
DOCUMENTLIGNE-DEVIS	4		R&#13;
DOCUMENTLIGNE-DEVIS-SUP	4		R&#13;
DOCUMENTLIGNE-FACTURE_ACHAT	4		R&#13;
DOCUMENTLIGNE-FACTURE	4		R&#13;
DOCUMENTLIGNE-FACTURE-SUP	4		R&#13;
DOCUMENTLIGNE-DEMANDEPRIX_ACHAT	4		R&#13;
BANQUE	4		&#13;
CIVILITE	4		&#13;
CRM_ACTIVITE_PRIORITE	4		&#13;
CRM_ACTIVITE_SOUS_TYPE	4		&#13;
CRM_ACTIVITE_STATUS	4		&#13;
CRM_ACTIVITE_SUJET	4		&#13;
CRM_ACTIVITE_TYPE	4		&#13;
CRM_LEADS_EVALUATION	4		&#13;
CRM_LEADS_ORIGINE	4		&#13;
CRM_LEADS_TYPE	4		&#13;
CRM_LEAD_STATUS	4		&#13;
CRM_OPPORTUNITE_CLOTURE	4		&#13;
CRM_OPPORTUNITE_ETAPE	4		&#13;
DEPOT	4		&#13;
ETAPEDOC	4		&#13;
FAMILLE_ARTICLE	4		&#13;
FAMILLE_CLIENT	4		&#13;
FAMILLE_FOURNISSEUR	4		&#13;
FRAIS_DEPLACEMENT_NUXI	4		&#13;
GAMME	4		&#13;
GAMME_ELEMENTS	4		&#13;
GROUPE	4		&#13;
INTER_CATEGORIE	4		&#13;
INTER_ETAT_BI	4		&#13;
INTER_ETAT_DI	4		&#13;
INTER_ETAT_RI	4		&#13;
INTER_FRAISDEPL	4		&#13;
INTER_IMPORTANCE	4		&#13;
INTER_OPERATEUR	4		&#13;
INTER_ORIGINE	4		&#13;
INTER_RAPPORT	4		&#13;
INTER_ZONEDEPL	4		&#13;
LISTETARIF	4		&#13;
MODEREGLEMENT	4		&#13;
MOYENPAIEMENT	4		&#13;
NOMENCLATURES_NUXI	4		&#13;
PAYS	4		&#13;
PERIODICITE_NUXI	4		&#13;
ROLE	4		&#13;
SALARIES	4		&#13;
SECTEURGEOGRAPHIQUE	4		&#13;
SOUS_FAMILLE_ARTICLE	4		&#13;
SOUS_FAMILLE_FOURNISSEUR	4		&#13;
SOUS_FAMILLE_CLIENT	4		&#13;
TECHNICIEN	4		&#13;
TECHNICIENS_NUXI	4		&#13;
TAXE-TVA	4		&#13;
TAXE-ECO	4		&#13;
TVA_REGIME	4		&#13;
TYPEARTICLE	4		&#13;
TYPETARIF	4		&#13;
UNITE	4		&#13;
UNITEVENTE	4		&#13;
ZONES_INTERVENTIONS_NUXI	4		&#13;
BE	4	16	&#13;
BS	4	17	&#13;
TRSF_DEPOT	4	18	&#13;
INVENTAIRE	4	19	&#13;
ARTICLE_TEXTE	5		R&#13;
ARTICLE	5	2	R&#13;
ARTICLE_OUVRAGE	5		R&#13;
TIERS	5	1	R&#13;
-TIERS-FOURNISSEUR	5		R&#13;
-TIERS-PROSPECT	5		R&#13;
-TIERS-CLIENT	5		R&#13;
CHANTIER	5		R&#13;
AFFAIRE	5		R&#13;
APPAREIL	6	8	&#13;
APPAREILS_NUXI	6	8	&#13;
ARTICLE_GAMME	6		R&#13;
ARTICLES_NUXI	6		&#13;
ARTICLE_SERIELOT	6		R&#13;
CLIENTS_NUXI	6		&#13;
COMPOSANTS-LIES	6		R&#13;
CONTACT	5	3	&#13;
CONTACT-CLIENT	6		R&#13;
CONTACT-FOURNISSEUR	6		R&#13;
CONTACT-PROSPECT	6		R&#13;
CONTRAT	6		R&#13;
CONTRATAPPAREIL	6		R&#13;
CONTRATS_NUXI	6		&#13;
CRM_ACTIVITE	6	14	&#13;
CRM_CAMPAGNE	6		R&#13;
CRM_LEADS	6		R&#13;
CRM_OPPORTUNITE	6		R&#13;
CRM_PLANNING	6		&#13;
INCIDENT	6		R&#13;
INCIDENTS_NUXI	6		&#13;
LEADS	5	12	&#13;
MATERIELS_NUXI	6		&#13;
RESSOURCES_NUXI	6		&#13;
SOCIETE	6		&#13;
TARIFS	6		&#13;
GED	6	15	&#13;
GED_ARTICLE	6		R&#13;
GED_CLIENT	6		R&#13;
GED_CONTRAT	6		R&#13;
GED_DOC_V	6		R&#13;
GED_DOC_A	6		R&#13;
GED_FOURNISSEUR	6		R&#13;
GED_INTER	6		R&#13;
GED_APPAREIL	6		R&#13;
IMAGES	6	11	&#13;
INTERVENTION	6	10	&#13;
INTERVENTIONS_NUXI	6	20	&#13;
INTER_BON	6		R&#13;
INTER_DEMANDE	6		R&#13;
MVTSTOCK	6	7	&#13;
PLANNING	6		&#13;
SAISIEDESTEMPS	6	9	&#13;
TOURNEES	6		&#13;
ARTICLESTOCK	6		R&#13;
ADRESSE-COLLABORATEUR	7		&#13;
ADRESSE-DEPOT	7		&#13;
ADRESSES	7	5	R&#13;
ADRESSE-CLIENT	7		R&#13;
ADRESSE-FOURNISSEUR	7		R&#13;
ADRESSES_NUXI	7		&#13;
DEPOT_PARCOURS	7		&#13;
ARTICLEFOURNISSEUR	7		R&#13;
ARTICLELIE	7		R&#13;
INTERVENTIONS_DETAILS_NUXI	7		&#13;
INTER_APPAREILS	7		R&#13;
INTER_BON_LIGNE	7		R&#13;
INTER_BON_LIGNE_A	7		R&#13;
INTER_BON_LIGNE_C	7		R&#13;
INTER_BON_LIGNE_R	7		R&#13;
INTER_BON_LIGNE_RH	7		R&#13;
INTER_DEMANDE_LIGNE	7		R&#13;
INTER_DEMANDE_LIGNE_A	7		R&#13;
INTER_DEMANDE_LIGNE_C	7		R&#13;
INTER_DEMANDE_LIGNE_R	7		R&#13;
INTER_DEMANDE_LIGNE_RH	7		R&#13;
INTER_RAPPORT_LIGNE	7		R&#13;
INTER_RESSOURCE_H	7		&#13;
INTER_RESSOURCE_M	7		&#13;
LIAISONS_AFFAIRES_INTERVENANTS	7		R&#13;
LIAISONS_CHANTIERS_INTERVENANTS	7		R&#13;
LIAISONS_NUXI	7		&#13;
SOCIETE_COMPLEMENT	7		&#13;
TARIFS-CLIENT	7		&#13;
TARIFS-GRILLE-FOUR	7		&#13;
TARIFS-GRILLE	7		&#13;
TARIFS-FAM-ART	7		&#13;
TARIFS-FAM-CLI	7		&#13;
TARIFS-QUANT	7		&#13;
TRACKING_NUXI	7		&#13;
GPS	8		&#13;
SYNCGOOGLEAGENDA	8		&#13;
SYNCOUTLOOKAGENDA	8		&#13;
LOG_SPECIFIQUE	9		</Chronologie>
  <Fic_NuxiSav>
    <Fic>
      <Nom>ADRESSES_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>APPAREILS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>ARTICLES_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>CONTRATS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>DOCUMENTS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>FRAIS_DEPLACEMENT_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>INCIDENTS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>INTERVENTIONS_DETAILS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>INTERVENTIONS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>LIAISONS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>MATERIELS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>NOMENCLATURES_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>PERIODICITE_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>RESSOURCES_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>TECHNICIENS_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>TRACKING_NUXI</Nom>
    </Fic>
    <Fic>
      <Nom>ZONES_INTERVENTIONS_NUXI</Nom>
    </Fic>
  </Fic_NuxiSav>
  <RequetesSQL>
    <Enregistrement>
      <Table_Nom>GED</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345689</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE Import_GED()&#13;
&#13;
//03/02/2025 10:31&#13;
&#13;
&#13;
&#13;
tabListeTypeEnreg										est un tableau de 0,2 chaînes&#13;
sNomFic													est une chaîne&#13;
sNomFicLog												est une chaîne&#13;
NBtraité												est un entier&#13;
sAppliSDK												est une chaîne&#13;
sPréfixFic												est une chaîne&#13;
NbTypeEnreg												est un entier&#13;
Prems													est un booléen&#13;
sEnregCSV												est une chaîne&#13;
sIdentifiantsEBP										est une chaîne&#13;
InTemp													est une chaîne&#13;
sNomProfilImport										est une chaîne&#13;
sValTemp												est une chaîne&#13;
DocXMLSource											est une xmlDocument&#13;
nIDFichier												est un entier&#13;
nIDFichierLog											est un entier&#13;
sXX_													est une chaîne&#13;
IDGuidEBP												est une chaîne&#13;
sdReqTemp												est une Source de Données&#13;
sMaReqTemp												est une chaîne&#13;
nNbEléments												est un entier&#13;
bEBPSaaS												est un booléen&#13;
sPréfixeNomProfilImport									est une chaîne&#13;
tabIDInterneSrvTraité									est un tableau de 0,2 chaîne&#13;
StrLog													est une chaîne&#13;
nNbImport												est un entier&#13;
sIDDossierInterventionsOneDrive							est une chaîne&#13;
sIDDossierDocumentsOneDrive								est une chaîne&#13;
sIDDossierArticlesOneDrive								est une chaîne&#13;
sIDDossierTiersOneDrive									est une chaîne&#13;
sIDDossierContratsOneDrive								est une chaîne&#13;
sIDDossierOpportunitésOneDrive							est une chaîne&#13;
sIDDossierAppareilsOneDrive								est une chaîne&#13;
sIDDossierNuxiDevOneDrive								est une chaîne&#13;
OneDriveActif											est un booléen&#13;
CodeDocTemp												est une chaîne&#13;
IDTemp													est une chaîne&#13;
sMaReq													est une chaîne&#13;
NomFicTemp												est une chaîne&#13;
LienPubliqueOneDrive									est une chaîne&#13;
sIdFichieOneDrive										est une chaîne&#13;
ValId													est une chaîne&#13;
ValParentId												est une chaîne&#13;
ValName													est une chaîne&#13;
ValContent												est une chaîne&#13;
ValDocumentType											est un entier&#13;
ValOneDriveShareUrl										est une chaîne&#13;
ValOneDriveItemId										est une chaîne&#13;
ValOneDriveCode											est une chaîne&#13;
bufBufferTemp											est un Buffer&#13;
sdReqTemp2												est une Source de Données&#13;
sMaReq2													est une chaîne&#13;
bNuxiSavActif											est un booléen&#13;
&#13;
IDInterne												est une chaîne&#13;
NomFichier												est une chaîne&#13;
TypeFichier												est une chaîne&#13;
IDInterneModule											est une chaîne&#13;
Stockage												est une chaîne&#13;
sLienTemp												est une chaîne&#13;
Documents_Nuxi											est une Source de Données&#13;
StrLogConcaténé	est une chaîne&#13;
bOkInsert est un booléen&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sRetRecherche											est une chaîne&#13;
sURLEBP													est une chaîne&#13;
sOrdreSDK												est une chaîne&#13;
bIsImportValide											est un booléen		= Vrai&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; _ET_ CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
	&#13;
	bNuxiSavActif = Vrai&#13;
	&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;images&amp;quot;,&amp;quot;images&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;intervention&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;document&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;article&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;tiers_CP&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;tiers_f&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;contrat&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;opportunité&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;ged&amp;quot;,&amp;quot;appareil&amp;quot;)&#13;
&#13;
HDéclareExterne(&amp;quot;Documents_Nuxi.fic&amp;quot;,Documents_Nuxi,CnxBDDSrc[3])&#13;
&#13;
//BUGV5&#13;
//InitSessionO365()&#13;
//sFichierSession	=  RepDonnéesUtilisateur + [&amp;quot;\&amp;quot;] + gnMultiSerial + [&amp;quot;\&amp;quot;] + ChaîneFormate(&amp;quot;o365&amp;quot; + MaSessionOneDrive.ClientID, ccMinuscule + ccSansAccent + ccSansPonctuationNiEspace) +  &amp;quot;.dat&amp;quot;&#13;
//&#13;
//SI fFichierExiste(sFichierSession) ALORS&#13;
//	//												info(&amp;quot;xx2&amp;quot;)&#13;
//	SI O365OuvreSession(MaSessionOneDrive, Faux,RepDonnéesUtilisateur + [&amp;quot;\&amp;quot;] + gnMultiSerial + [&amp;quot;\&amp;quot;] ) //,gsRunProgrammé) ALORS&#13;
//		//													info(&amp;quot;xx3&amp;quot;)&#13;
//		sIDDossierNuxiDevOneDrive = Creer_Dossier(&amp;quot;NuxiDev&amp;quot;,&amp;quot;&amp;quot;)	//&#13;
//		//													info(&amp;quot;nuxi :&amp;quot; + sIDDossierNuxiDevOneDrive)&#13;
//		SI sIDDossierNuxiDevOneDrive &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Minuscule(sIDDossierNuxiDevOneDrive) &amp;lt;&amp;gt; &amp;quot;unauthorized&amp;quot; ALORS&#13;
//			sIDDossierInterventionsOneDrive	= Creer_Dossier(&amp;quot;Interventions&amp;quot;,sIDDossierNuxiDevOneDrive)&#13;
//			sIDDossierDocumentsOneDrive		= Creer_Dossier(&amp;quot;Documents&amp;quot;,sIDDossierNuxiDevOneDrive)	&#13;
//			sIDDossierArticlesOneDrive		= Creer_Dossier(&amp;quot;Articles&amp;quot;,sIDDossierNuxiDevOneDrive)&#13;
//			sIDDossierTiersOneDrive			= Creer_Dossier(&amp;quot;Tiers&amp;quot;,sIDDossierNuxiDevOneDrive)&#13;
//			sIDDossierContratsOneDrive		= Creer_Dossier(&amp;quot;Contrats&amp;quot;,sIDDossierNuxiDevOneDrive)&#13;
//			sIDDossierOpportunitésOneDrive		= Creer_Dossier(&amp;quot;Opportunité&amp;quot;,sIDDossierNuxiDevOneDrive)&#13;
//			sIDDossierAppareilsOneDrive		= Creer_Dossier(&amp;quot;Appareil&amp;quot;,sIDDossierNuxiDevOneDrive)&#13;
//			//														info(&amp;quot;inter : &amp;quot; + sIDDossierInterventionsOneDrive,&amp;quot;doc : &amp;quot; + sIDDossierDocumentsOneDrive)&#13;
//			SI sIDDossierInterventionsOneDrive &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET sIDDossierDocumentsOneDrive &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Minuscule(sIDDossierInterventionsOneDrive) &amp;lt;&amp;gt; &amp;quot;unauthorized&amp;quot; ET Minuscule(sIDDossierDocumentsOneDrive) &amp;lt;&amp;gt; &amp;quot;unauthorized&amp;quot;ALORS&#13;
//				OneDriveActif = Vrai&#13;
//			FIN&#13;
//		FIN&#13;
//	FIN&#13;
//FIN&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments		&#13;
		&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			VariableRAZ(DocXMLSource)&#13;
			DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
			&#13;
			&#13;
			SI Minuscule(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe)) = Minuscule(tabListeTypeEnreg[t,2]) ALORS&#13;
				bOkInsert = Faux&#13;
				//SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					&#13;
					SELON Minuscule(tabListeTypeEnreg[t,2])	&#13;
						CAS &amp;quot;intervention&amp;quot;&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Intervention.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Intervention.log&amp;quot;&#13;
						CAS &amp;quot;document&amp;quot;&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Document.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Document.log&amp;quot;	&#13;
						CAS	&amp;quot;article&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Article.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Article.log&amp;quot;&#13;
						CAS	&amp;quot;tiers_cp&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Client.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Client.log&amp;quot;&#13;
						CAS	&amp;quot;tiers_f&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Fournisseurs.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Fournisseurs.log&amp;quot;&#13;
						CAS	&amp;quot;contrat&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Contrat.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Contrat.log&amp;quot;&#13;
						CAS	&amp;quot;opportunité&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Opportunité.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Opportunité.log&amp;quot;&#13;
						CAS	&amp;quot;appareil&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;GED_Appareil.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;GED_Appareil.log&amp;quot;&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
					TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
					sEnregCSV	= [&#13;
						IDInterne;Code;DateCreation;DateModification;NomDocument;BinaireDocument;ExtentionFichier;Table_Externe;IDInterne_Table_Externe;Code_Table_Externe;LienPublic;IDDocPublic;Observations;&#13;
					]&#13;
					sEnregCSV		= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV		= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				//trace(&amp;quot;xx Mappage des valeurs&amp;quot;)&#13;
				&#13;
				//IDInterne&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//DateCreation&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateCreation)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//DateModification&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateModification)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NomDocument&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BinaireDocument&#13;
				sValTemp		= &amp;quot;&amp;quot; //XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//ExtentionFichier&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ExtentionFichier)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Table_Externe&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe)&#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterne_Table_Externe&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
				CodeDocTemp		= &amp;quot;&amp;quot;&#13;
				IDTemp			= &amp;quot;&amp;quot;&#13;
				SELON Minuscule(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe))&#13;
					CAS &amp;quot;intervention&amp;quot;&#13;
						&#13;
						SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; _ET_ CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS //bNuxiSavActif= Vrai&#13;
							//NuxiSav&#13;
							IDInterne		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
							NomFichier		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)&#13;
							TypeFichier		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ExtentionFichier)&#13;
							SELON TypeFichier&#13;
								CAS &amp;quot;.jpg&amp;quot;,&amp;quot;.jpeg&amp;quot;,&amp;quot;.bmp&amp;quot;,&amp;quot;.ico&amp;quot;,&amp;quot;.gif&amp;quot;,&amp;quot;.png&amp;quot;&#13;
									TypeFichier		= &amp;quot;Image&amp;quot;&#13;
								CAS &amp;quot;.doc&amp;quot;,&amp;quot;.docx&amp;quot;&#13;
									TypeFichier		= &amp;quot;Doc&amp;quot;&#13;
								CAS &amp;quot;.xls&amp;quot;,&amp;quot;.xlsx&amp;quot;&#13;
									TypeFichier		= &amp;quot;Xls&amp;quot;&#13;
								CAS &amp;quot;.accdb&amp;quot;&#13;
									TypeFichier		= &amp;quot;Acc&amp;quot;&#13;
								CAS &amp;quot;.txt&amp;quot;&#13;
									TypeFichier		= &amp;quot;Texte&amp;quot;&#13;
								CAS &amp;quot;.pdf&amp;quot;&#13;
									TypeFichier		= &amp;quot;Pdf&amp;quot;&#13;
								CAS &amp;quot;.mp3&amp;quot;,&amp;quot;.mp4&amp;quot;&#13;
									TypeFichier		= &amp;quot;Son&amp;quot;&#13;
								CAS &amp;quot;.rar&amp;quot;,&amp;quot;.zip&amp;quot;&#13;
									TypeFichier		= &amp;quot;Zip&amp;quot;&#13;
								AUTRE CAS&#13;
									TypeFichier		= &amp;quot;Autres&amp;quot;&#13;
							FIN&#13;
							IDInterneModule			= &amp;quot;&amp;quot;&#13;
							IDInterneModule			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
							LienPubliqueOneDrive	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.LienPublic)&#13;
							sIdFichieOneDrive		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDDocPublic)&#13;
							SI LienPubliqueOneDrive=&amp;quot;&amp;quot; ET sIdFichieOneDrive=&amp;quot;&amp;quot; ALORS&#13;
								SI OneDriveActif = Vrai   ALORS&#13;
									(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierInterventionsOneDrive, bufBufferTemp,NomFicTemp)														&#13;
									Stockage			= &amp;quot;O&amp;quot;&#13;
								SINON&#13;
									Stockage			= &amp;quot;L&amp;quot;										&#13;
								FIN&#13;
							SINON&#13;
								Stockage=&amp;quot;O&amp;quot;&#13;
							FIN&#13;
							&#13;
						SINON&#13;
							//EBP&#13;
							sMaReq = [&#13;
								SELECT &#13;
								Id,&#13;
								ScheduleEventNumber&#13;
								FROM ScheduleEvent&#13;
								Where Id = &amp;apos;%1&amp;apos;&#13;
							]&#13;
							&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
							sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
							HAnnuleDéclaration(sdReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									CodeDocTemp	= sdReqTemp.ScheduleEventNumber&#13;
									IDTemp		= sdReqTemp.Id&#13;
								FIN&#13;
							FIN&#13;
							sValTemp				= IDTemp&#13;
							sValTemp				= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//NomDocument&#13;
							//									XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe) + &amp;quot;-&amp;quot; +&#13;
							sValTemp				= SansEspace(Remplace( CodeDocTemp  + &amp;quot;-&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument),[&amp;quot;\&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot;:&amp;quot;],&amp;quot;&amp;quot;))&#13;
							NomFicTemp				= sValTemp&#13;
							sValTemp				= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB,&amp;quot;/&amp;quot;,&amp;quot;\&amp;quot;,&amp;quot;:&amp;quot;],&amp;quot; &amp;quot;) &#13;
							sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							&#13;
						FIN&#13;
						&#13;
					CAS &amp;quot;document&amp;quot;&#13;
						//trace(&amp;quot;xx Chercher dans Doc de Vte&amp;quot;)&#13;
						//Chercher dans Doc de Vte&#13;
						sMaReq = [&#13;
							SELECT&#13;
							[Id],&#13;
							[NumberPrefix],&#13;
							[NumberSuffix],&#13;
							[DocumentNumber],&#13;
							[DocumentDate],&#13;
							[InvoicingAddress_ThirdName],&#13;
							[CustomerId]&#13;
							&#13;
							FROM [SaleDocument]&#13;
							&#13;
							%1&#13;
							&#13;
							&#13;
						]&#13;
						//Where Id = &amp;apos;%1&amp;apos; or Reference like &amp;apos;%%%1%&amp;apos;&#13;
						sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
						&#13;
						SI Taille(sValTemp) &amp;gt; 25 ALORS&#13;
							//C&amp;apos;est un GUID&#13;
							sValTemp	= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
							sMaReq		= ChaîneConstruit(sMaReq,&amp;quot;Where Id  like &amp;apos;%%%1%&amp;apos;&amp;quot;)&#13;
						SINON&#13;
							//c&amp;apos;est un code&#13;
							sMaReq = ChaîneConstruit(sMaReq,&amp;quot;Where Reference like &amp;apos;%%%1%&amp;apos; OR NotesClear like &amp;apos;%%%1%&amp;apos; or DocumentNumber = &amp;apos;%1&amp;apos;&amp;quot; )&#13;
						FIN&#13;
						sMaReq = ChaîneConstruit(sMaReq,sValTemp )&#13;
						//trace(&amp;quot;xx Req &amp;quot; + sMaReq)&#13;
						HAnnuleDéclaration(sdReqTemp)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
							//trace(&amp;quot;xx Req Hexec ok&amp;quot; )&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								//trace(&amp;quot;xx pas hendehors Req &amp;quot;)&#13;
								CodeDocTemp	= sdReqTemp.DocumentNumber&#13;
								IDTemp		= sdReqTemp.Id&#13;
							FIN&#13;
						FIN&#13;
						//trace(&amp;quot;xx fin req &amp;quot; +CodeDocTemp + &amp;quot;   &amp;quot;+ IDTemp)&#13;
						//si pas trouvé chercher dans dans doc achat &#13;
						SI IDTemp = &amp;quot;&amp;quot; ALORS&#13;
							sMaReq = [&#13;
								SELECT&#13;
								[Id],&#13;
								[NumberPrefix],&#13;
								[NumberSuffix],&#13;
								[DocumentNumber],&#13;
								[DocumentDate],&#13;
								[InvoicingAddress_ThirdName],&#13;
								[SupplierId]&#13;
								&#13;
								FROM [PurchaseDocument]&#13;
								&#13;
								%1&#13;
								&#13;
								&#13;
							]&#13;
							//Where Id = &amp;apos;%1&amp;apos; or Reference like &amp;apos;%%%1%&amp;apos;&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
							&#13;
							SI Taille(sValTemp) &amp;gt; 25 ALORS&#13;
								//C&amp;apos;est un GUID&#13;
								sValTemp	= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
								sMaReq		= ChaîneConstruit(sMaReq,&amp;quot;Where Id  like &amp;apos;%%%1%&amp;apos;&amp;quot;)&#13;
							SINON&#13;
								//c&amp;apos;est un code&#13;
								sMaReq = ChaîneConstruit(sMaReq,&amp;quot;Where Reference like &amp;apos;%%%1%&amp;apos; OR NotesClear like &amp;apos;%%%1%&amp;apos; or DocumentNumber = &amp;apos;%1&amp;apos;&amp;quot; )&#13;
							FIN&#13;
							sMaReq = ChaîneConstruit(sMaReq,sValTemp )&#13;
							&#13;
							&#13;
							//											VersPressePapier(sMaReq)&#13;
							HAnnuleDéclaration(sdReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									CodeDocTemp	= sdReqTemp.DocumentNumber&#13;
									IDTemp		= sdReqTemp.Id&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						//										trace(&amp;quot;xx0 sMaReq&amp;quot; + sMaReq)&#13;
						//										trace(&amp;quot;xx1 IDTemp&amp;quot; + IDTemp )&#13;
						&#13;
						sValTemp				= IDTemp&#13;
						sValTemp				= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//NomDocument&#13;
						//									XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe) + &amp;quot;-&amp;quot; +&#13;
						sValTemp				= SansEspace(Remplace( CodeDocTemp  + &amp;quot;-&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument),[&amp;quot;\&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot;:&amp;quot;],&amp;quot;&amp;quot;))&#13;
						&#13;
						NomFicTemp				= sValTemp&#13;
						sValTemp				= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
					CAS &amp;quot;appareil&amp;quot;&#13;
						SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; _ET_ CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
							//NuxiSav&#13;
							IDInterne		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
							NomFichier		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)&#13;
							TypeFichier		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ExtentionFichier)&#13;
							SELON TypeFichier&#13;
								CAS &amp;quot;.jpg&amp;quot;,&amp;quot;.jpeg&amp;quot;,&amp;quot;.bmp&amp;quot;,&amp;quot;.ico&amp;quot;,&amp;quot;.gif&amp;quot;,&amp;quot;.png&amp;quot;&#13;
									TypeFichier		= &amp;quot;Image&amp;quot;&#13;
								CAS &amp;quot;.doc&amp;quot;,&amp;quot;.docx&amp;quot;&#13;
									TypeFichier		= &amp;quot;Doc&amp;quot;&#13;
								CAS &amp;quot;.xls&amp;quot;,&amp;quot;.xlsx&amp;quot;&#13;
									TypeFichier		= &amp;quot;Xls&amp;quot;&#13;
								CAS &amp;quot;.accdb&amp;quot;&#13;
									TypeFichier		= &amp;quot;Acc&amp;quot;&#13;
								CAS &amp;quot;.txt&amp;quot;&#13;
									TypeFichier		= &amp;quot;Texte&amp;quot;&#13;
								CAS &amp;quot;.pdf&amp;quot;&#13;
									TypeFichier		= &amp;quot;Pdf&amp;quot;&#13;
								CAS &amp;quot;.mp3&amp;quot;,&amp;quot;.mp4&amp;quot;&#13;
									TypeFichier		= &amp;quot;Son&amp;quot;&#13;
								CAS &amp;quot;.rar&amp;quot;,&amp;quot;.zip&amp;quot;&#13;
									TypeFichier		= &amp;quot;Zip&amp;quot;&#13;
								AUTRE CAS&#13;
									TypeFichier		= &amp;quot;Autres&amp;quot;&#13;
							FIN&#13;
							IDInterneModule			= &amp;quot;&amp;quot;&#13;
							IDInterneModule			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
							LienPubliqueOneDrive	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.LienPublic)&#13;
							sIdFichieOneDrive		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDDocPublic)&#13;
							SI LienPubliqueOneDrive=&amp;quot;&amp;quot; ET sIdFichieOneDrive=&amp;quot;&amp;quot; ALORS&#13;
								SI OneDriveActif = Vrai   ALORS&#13;
									(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierInterventionsOneDrive, bufBufferTemp,NomFicTemp)														&#13;
									Stockage			= &amp;quot;O&amp;quot;&#13;
								SINON&#13;
									Stockage			= &amp;quot;L&amp;quot;										&#13;
								FIN&#13;
							SINON&#13;
								Stockage=&amp;quot;O&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
					AUTRE CAS&#13;
						sValTemp				= sValTemp&#13;
						sValTemp				= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//NomDocument&#13;
						//									XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe) + &amp;quot;-&amp;quot; +&#13;
						&#13;
						sValTemp				= SansEspace(Remplace( XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)  + &amp;quot;-&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument),[&amp;quot;\&amp;quot;,&amp;quot;/&amp;quot;,&amp;quot;:&amp;quot;],&amp;quot;&amp;quot;))&#13;
						NomFicTemp				= sValTemp&#13;
						sValTemp				= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
				FIN&#13;
				sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				&#13;
				//Code_Table_Externe&#13;
				sValTemp				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Table_Externe)&#13;
				sEnregCSV				= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//trace(&amp;quot;xx Code_Table_Externe &amp;quot; +sValTemp)&#13;
				&#13;
				LienPubliqueOneDrive	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.LienPublic)&#13;
				sIdFichieOneDrive		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDDocPublic)&#13;
				SELON Minuscule(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Table_Externe))&#13;
				&#13;
					CAS &amp;quot;intervention&amp;quot;&#13;
						SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; _ET_ CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sMaReq = [&#13;
								SELECT &#13;
								count(IDInterne) AS NbEvent,IDInterne&#13;
								FROM [interventions_details_nuxi.fic]&#13;
								Where IDInterne = &amp;apos;%1&amp;apos;&#13;
								GROUP BY IDInterne&#13;
							]&#13;
							sMaReq		= ChaîneConstruit(sMaReq,IDInterneModule)&#13;
							//											&#13;
							HAnnuleDéclaration(sdReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									SI sdReqTemp.NbEvent &amp;gt; 0 ALORS	//Le parent existe&#13;
										IDInterneModule						= sdReqTemp.IDInterne&#13;
										bufBufferTemp						= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										SI IDInterne&amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
											HAnnuleDéclaration(sdReqTemp)&#13;
											SI PAS HLitRecherche(Documents_Nuxi,&amp;quot;IDInterne&amp;quot;,IDInterne,hIdentique) ALORS HRAZ(Documents_Nuxi)&#13;
											Documents_Nuxi.LibelleFichier		= NomFichier&#13;
											Documents_Nuxi.NomFichier			= NomFichier&#13;
											Documents_Nuxi.TypeFichier			= TypeFichier&#13;
											Documents_Nuxi.Fichier				= bufBufferTemp&#13;
											Documents_Nuxi.Stockage				= Stockage&#13;
											Documents_Nuxi.AExternaliser		= 0&#13;
											Documents_Nuxi.IdentifiantDocDrive	= LienPubliqueOneDrive&#13;
											Documents_Nuxi.IDDocPublicDrive		= sIdFichieOneDrive	&#13;
											&#13;
											&#13;
											SI Documents_Nuxi..NouvelEnregistrement ALORS&#13;
												Documents_Nuxi.IDInterne		= IDInterne&#13;
												Documents_Nuxi.IDInterneModule	= IDInterneModule&#13;
												Documents_Nuxi.Nom_Module		= &amp;quot;Int&amp;quot;&#13;
												SI HAjoute(Documents_Nuxi) ALORS&#13;
													StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + Documents_Nuxi.IDInterne + &amp;quot; / Ajout&amp;quot; + RC&#13;
													&#13;
													bOkInsert = Vrai&#13;
												&#13;
												FIN&#13;
											SINON&#13;
												SI HModifie(Documents_Nuxi) ALORS&#13;
													StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + Documents_Nuxi.IDInterne + &amp;quot; / Modification&amp;quot; + RC&#13;
													bOkInsert = Vrai&#13;
												&#13;
												FIN&#13;
												&#13;
											FIN&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						SINON&#13;
							sMaReq = [&#13;
								SELECT &#13;
								count(Id) AS NbEvent&#13;
								FROM ScheduleEvent&#13;
								Where Id = &amp;apos;%1&amp;apos;&#13;
							]&#13;
							sValTemp	= IDTemp //majuscule(remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
							sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
							//											VersPressePapier(sMaReq)&#13;
							HAnnuleDéclaration(sdReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									SI sdReqTemp.NbEvent &amp;gt; 0 ALORS	//Le parent existe&#13;
										ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
											HAnnuleDéclaration(sdReqTemp)&#13;
											SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM ScheduleEventAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
												HLitPremier(sdReqTemp)&#13;
												SI HEnDehors(sdReqTemp) ALORS&#13;
													// Ajout Enreg EBP&#13;
													sMaReq = [&#13;
														INSERT INTO ScheduleEventAssociatedFiles (&#13;
														[sysCreatedDate],&#13;
														[sysCreatedUser],&#13;
														[sysModifiedDate],&#13;
														[sysModifiedUser],&#13;
														[Id],&#13;
														[ParentId],&#13;
														[Name],&#13;
														[Content],&#13;
														[DocumentType],&#13;
														[OneDriveShareUrl],&#13;
														[OneDriveItemId],&#13;
														[OneDriveCode]&#13;
														)&#13;
														VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;,  CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
													]&#13;
												SINON&#13;
													&#13;
													// Modification Enreg EBP&#13;
													sMaReq = [&#13;
														UPDATE ScheduleEventAssociatedFiles SET&#13;
														[sysModifiedDate] = getdate(),&#13;
														[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
														[ParentId] = &amp;apos;%2&amp;apos;,&#13;
														[Name] = &amp;apos;%3&amp;apos;,&#13;
														[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) ,&#13;
														[DocumentType] = %5,&#13;
														[OneDriveShareUrl] = %6,&#13;
														[OneDriveItemId] = %7,&#13;
														[OneDriveCode] = %8&#13;
														WHERE&#13;
														Id = &amp;apos;%1&amp;apos;&#13;
														&#13;
													]&#13;
													&#13;
												FIN&#13;
											FIN&#13;
											&#13;
											&#13;
											// &#13;
											ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
											ValParentId		= IDTemp //majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
											ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
											&#13;
											&#13;
											////															bufBufferTemp= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
											&#13;
											&#13;
											&#13;
											bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
											ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
											&#13;
											&#13;
											SI OneDriveActif = Vrai ALORS&#13;
												&#13;
												(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierInterventionsOneDrive, bufBufferTemp,NomFicTemp)&#13;
												//																&#13;
												ValDocumentType		= 2&#13;
												ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
												ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
												ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
												&#13;
											SINON&#13;
												//																&#13;
												ValDocumentType		= 0&#13;
												ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
												ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
												ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
											FIN&#13;
											sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
											//															VersPressePapier(sMaReq)&#13;
											&#13;
											SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
												StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
												bOkInsert = Vrai&#13;
											FIN&#13;
											&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						&#13;
					CAS &amp;quot;document&amp;quot;&#13;
						sMaReq = [&#13;
							SELECT &#13;
							count(Id) AS NbDoc&#13;
							FROM SaleDocument&#13;
							Where lower(Id) = &amp;apos;%1&amp;apos;&#13;
						]&#13;
						sValTemp	= IDTemp //majuscule(remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
						sMaReq		= ChaîneConstruit(sMaReq,Minuscule(sValTemp))&#13;
						//VersPressePapier(sMaReq)&#13;
						//trace(&amp;quot;XX2 sMaReq&amp;quot; + sMaReq)&#13;
						HAnnuleDéclaration(sdReqTemp)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
							//trace(&amp;quot;XX3&amp;quot;)&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								//trace(&amp;quot;XX4&amp;quot;)&#13;
								SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
									ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
									//trace(&amp;quot;xx 3 ValId&amp;quot; + ValId)&#13;
									SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
										HAnnuleDéclaration(sdReqTemp)&#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM SaleDocumentAssociatedFiles WHERE lower(Id) = &amp;apos;&amp;quot; + Minuscule(ValId) + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI HEnDehors(sdReqTemp) ALORS&#13;
												// Ajout Enreg EBP&#13;
												sMaReq = [&#13;
													INSERT INTO SaleDocumentAssociatedFiles (&#13;
													[sysCreatedDate],&#13;
													[sysCreatedUser],&#13;
													[sysModifiedDate],&#13;
													[sysModifiedUser],&#13;
													[Id],&#13;
													[ParentId],&#13;
													[Name],&#13;
													[Content],&#13;
													[DocumentType],&#13;
													[OneDriveShareUrl],&#13;
													[OneDriveItemId],&#13;
													[OneDriveCode]&#13;
													)&#13;
													VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
												]&#13;
											SINON&#13;
												// Modification Enreg EBP&#13;
												sMaReq = [&#13;
													UPDATE SaleDocumentAssociatedFiles SET&#13;
													[sysModifiedDate] = getdate(),&#13;
													[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
													[ParentId] = &amp;apos;%2&amp;apos;,&#13;
													[Name] = &amp;apos;%3&amp;apos;,&#13;
													[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
													[DocumentType] = %5,&#13;
													[OneDriveShareUrl] = %6,&#13;
													[OneDriveItemId] = %7,&#13;
													[OneDriveCode] = %8&#13;
													WHERE&#13;
													Id = &amp;apos;%1&amp;apos;&#13;
													&#13;
												]&#13;
												&#13;
											FIN&#13;
										FIN&#13;
										&#13;
										&#13;
										// &#13;
										ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										ValParentId		= IDTemp //majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
										//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
										bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										//fSauveBuffer(&amp;quot;c:\temp\test.pdf&amp;quot;,bufBufferTemp)&#13;
										ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
										//																info(&amp;quot;xx4 fin&amp;quot;)&#13;
										SI OneDriveActif = Vrai ALORS&#13;
											&#13;
											(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierDocumentsOneDrive, bufBufferTemp,NomFicTemp)&#13;
											&#13;
											//VersPressePapier(LienPubliqueOneDrive)&#13;
											ValDocumentType		= 2&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
											&#13;
										SINON&#13;
											&#13;
											ValDocumentType		= 0&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
										FIN&#13;
										sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
										//VersPressePapier(sMaReq)&#13;
										//trace(sMaReq)&#13;
										SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
											StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
											bOkInsert = Vrai&#13;
										FIN&#13;
										&#13;
									FIN&#13;
								SINON //tester si c&amp;apos;est un document d&amp;apos;achat&#13;
									sMaReq = [&#13;
										SELECT &#13;
										count(Id) AS NbDoc&#13;
										FROM PurchaseDocument&#13;
										Where Id = &amp;apos;%1&amp;apos;&#13;
									]&#13;
									sValTemp	= IDTemp //majuscule(remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
									sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
									//											VersPressePapier(sMaReq)&#13;
									//												trace(&amp;quot;XX2 sMaReq&amp;quot; + sMaReq)&#13;
									HAnnuleDéclaration(sdReqTemp)&#13;
									SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
										HLitPremier(sdReqTemp)&#13;
										SI PAS HEnDehors(sdReqTemp) ALORS&#13;
											SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
												ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
												//															trace(&amp;quot;xx 3 ValId&amp;quot; + ValId)&#13;
												SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
													HAnnuleDéclaration(sdReqTemp)&#13;
													SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM PurchaseDocumentAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
														HLitPremier(sdReqTemp)&#13;
														SI HEnDehors(sdReqTemp) ALORS&#13;
															// Ajout Enreg EBP&#13;
															sMaReq = [&#13;
																INSERT INTO PurchaseDocumentAssociatedFiles (&#13;
																[sysCreatedDate],&#13;
																[sysCreatedUser],&#13;
																[sysModifiedDate],&#13;
																[sysModifiedUser],&#13;
																[Id],&#13;
																[ParentId],&#13;
																[Name],&#13;
																[Content],&#13;
																[DocumentType],&#13;
																[OneDriveShareUrl],&#13;
																[OneDriveItemId],&#13;
																[OneDriveCode]&#13;
																)&#13;
																VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
															]&#13;
														SINON&#13;
															// Modification Enreg EBP&#13;
															sMaReq = [&#13;
																UPDATE PurchaseDocumentAssociatedFiles SET&#13;
																[sysModifiedDate] = getdate(),&#13;
																[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
																[ParentId] = &amp;apos;%2&amp;apos;,&#13;
																[Name] = &amp;apos;%3&amp;apos;,&#13;
																[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
																[DocumentType] = %5,&#13;
																[OneDriveShareUrl] = %6,&#13;
																[OneDriveItemId] = %7,&#13;
																[OneDriveCode] = %8&#13;
																WHERE&#13;
																Id = &amp;apos;%1&amp;apos;&#13;
																&#13;
															]&#13;
															&#13;
														FIN&#13;
													FIN&#13;
													&#13;
													&#13;
													// &#13;
													ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
													ValParentId		= IDTemp //majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
													ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
													//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
													bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
													//fSauveBuffer(&amp;quot;c:\temp\test.pdf&amp;quot;,bufBufferTemp)&#13;
													ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
													//																info(&amp;quot;xx4 fin&amp;quot;)&#13;
													SI OneDriveActif = Vrai ALORS&#13;
														&#13;
														(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierDocumentsOneDrive, bufBufferTemp,NomFicTemp)&#13;
														&#13;
														//VersPressePapier(LienPubliqueOneDrive)&#13;
														ValDocumentType		= 2&#13;
														ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
														ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
														ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
														&#13;
													SINON&#13;
														&#13;
														ValDocumentType		= 0&#13;
														ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
														ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
														ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
													FIN&#13;
													sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
													//																																		VersPressePapier(sMaReq)&#13;
													&#13;
													SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
														StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
														bOkInsert = Vrai&#13;
													FIN&#13;
													&#13;
												FIN&#13;
											FIN&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN	&#13;
					CAS &amp;quot;tiers_cp&amp;quot;&#13;
						sMaReq = [&#13;
							SELECT &#13;
							count(Id) AS NbDoc&#13;
							FROM Customer&#13;
							Where Id = &amp;apos;%1&amp;apos;&#13;
						]&#13;
						sValTemp	=XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Table_Externe)&#13;
						SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS &#13;
							sMaReq2 = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE MainDeliveryAddress_Address4 = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos; OR MainInvoicingAddress_Address4 = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos; OR NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
							//VersPressePapier(sMaReq)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq2) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									sValTemp = sdReqTemp.Id&#13;
								FIN&#13;
								HLibèreRequête(sdReqTemp)&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
						//											VersPressePapier(sMaReq)&#13;
						HAnnuleDéclaration(sdReqTemp)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
									ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
									SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
										HAnnuleDéclaration(sdReqTemp)&#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM CustomerAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI HEnDehors(sdReqTemp) ALORS&#13;
												// Ajout Enreg EBP&#13;
												sMaReq = [&#13;
													INSERT INTO CustomerAssociatedFiles (&#13;
													[sysCreatedDate],&#13;
													[sysCreatedUser],&#13;
													[sysModifiedDate],&#13;
													[sysModifiedUser],&#13;
													[Id],&#13;
													[ParentId],&#13;
													[Name],&#13;
													[Content],&#13;
													[DocumentType],&#13;
													[OneDriveShareUrl],&#13;
													[OneDriveItemId],&#13;
													[OneDriveCode]&#13;
													)&#13;
													VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
												]&#13;
											SINON&#13;
												// Modification Enreg EBP&#13;
												sMaReq = [&#13;
													UPDATE CustomerAssociatedFiles SET&#13;
													[sysModifiedDate] = getdate(),&#13;
													[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
													[ParentId] = &amp;apos;%2&amp;apos;,&#13;
													[Name] = &amp;apos;%3&amp;apos;,&#13;
													[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
													[DocumentType] = %5,&#13;
													[OneDriveShareUrl] = %6,&#13;
													[OneDriveItemId] = %7,&#13;
													[OneDriveCode] = %8&#13;
													WHERE&#13;
													Id = &amp;apos;%1&amp;apos;&#13;
													&#13;
												]&#13;
												&#13;
											FIN&#13;
										FIN&#13;
										&#13;
										&#13;
										// &#13;
										ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										ValParentId		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Table_Externe)&#13;
										&#13;
										&#13;
										SI Gauche(ValParentId,3) = &amp;quot;XX_&amp;quot; ALORS &#13;
											sMaReq2 = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE MainDeliveryAddress_Address4 = &amp;apos;&amp;quot; + ValParentId + &amp;quot;&amp;apos; OR MainInvoicingAddress_Address4 = &amp;apos;&amp;quot; + ValParentId + &amp;quot;&amp;apos; OR NotesClear like &amp;apos;%&amp;quot; + ValParentId + &amp;quot;%&amp;apos;&amp;quot; &#13;
											//VersPressePapier(sMaReq)&#13;
											SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq2) ALORS&#13;
												HLitPremier(sdReqTemp)&#13;
												SI PAS HEnDehors(sdReqTemp) ALORS&#13;
													ValParentId = sdReqTemp.Id&#13;
												FIN&#13;
												HLibèreRequête(sdReqTemp)&#13;
											FIN&#13;
										FIN&#13;
										&#13;
										&#13;
										ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
										//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
										bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										&#13;
										ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
										SI OneDriveActif = Vrai ALORS&#13;
											&#13;
											(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierTiersOneDrive, bufBufferTemp,NomFicTemp)&#13;
											&#13;
											//VersPressePapier(LienPubliqueOneDrive)&#13;
											ValDocumentType		= 2&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
											&#13;
										SINON&#13;
											&#13;
											ValDocumentType		= 0&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
										FIN&#13;
										sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
										//																															VersPressePapier(sMaReq)&#13;
										&#13;
										SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
											StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
											bOkInsert = Vrai&#13;
										FIN&#13;
										&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN	&#13;
					CAS &amp;quot;tiers_f&amp;quot;&#13;
						sMaReq = [&#13;
							SELECT &#13;
							count(Id) AS NbDoc&#13;
							FROM Supplier&#13;
							Where Id = &amp;apos;%1&amp;apos;&#13;
						]&#13;
						sValTemp	= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
						sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
						//											VersPressePapier(sMaReq)&#13;
						HAnnuleDéclaration(sdReqTemp)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
									ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
									SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
										HAnnuleDéclaration(sdReqTemp)&#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM SupplierAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI HEnDehors(sdReqTemp) ALORS&#13;
												// Ajout Enreg EBP&#13;
												sMaReq = [&#13;
													INSERT INTO SupplierAssociatedFiles (&#13;
													[sysCreatedDate],&#13;
													[sysCreatedUser],&#13;
													[sysModifiedDate],&#13;
													[sysModifiedUser],&#13;
													[Id],&#13;
													[ParentId],&#13;
													[Name],&#13;
													[Content],&#13;
													[DocumentType],&#13;
													[OneDriveShareUrl],&#13;
													[OneDriveItemId],&#13;
													[OneDriveCode]&#13;
													)&#13;
													VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
												]&#13;
											SINON&#13;
												// Modification Enreg EBP&#13;
												sMaReq = [&#13;
													UPDATE SupplierAssociatedFiles SET&#13;
													[sysModifiedDate] = getdate(),&#13;
													[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
													[ParentId] = &amp;apos;%2&amp;apos;,&#13;
													[Name] = &amp;apos;%3&amp;apos;,&#13;
													[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
													[DocumentType] = %5,&#13;
													[OneDriveShareUrl] = %6,&#13;
													[OneDriveItemId] = %7,&#13;
													[OneDriveCode] = %8&#13;
													WHERE&#13;
													Id = &amp;apos;%1&amp;apos;&#13;
													&#13;
												]&#13;
												&#13;
											FIN&#13;
										FIN&#13;
										&#13;
										&#13;
										// &#13;
										ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										ValParentId		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
										ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
										//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
										bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										&#13;
										ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
										SI OneDriveActif = Vrai ALORS&#13;
											&#13;
											(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierTiersOneDrive, bufBufferTemp,NomFicTemp)&#13;
											&#13;
											//VersPressePapier(LienPubliqueOneDrive)&#13;
											ValDocumentType		= 2&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
											&#13;
										SINON&#13;
											&#13;
											ValDocumentType		= 0&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
										FIN&#13;
										sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
										//															VersPressePapier(sMaReq)&#13;
										&#13;
										SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
											StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
											bOkInsert = Vrai&#13;
										FIN&#13;
										&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN	&#13;
					CAS &amp;quot;article&amp;quot;&#13;
						sMaReq = [&#13;
							SELECT &#13;
							count(Id) AS NbDoc&#13;
							FROM Item&#13;
							Where Id = &amp;apos;%1&amp;apos;&#13;
						]&#13;
						sValTemp	= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
						sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
						//											VersPressePapier(sMaReq)&#13;
						HAnnuleDéclaration(sdReqTemp)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
									ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
									SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
										HAnnuleDéclaration(sdReqTemp)&#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM ItemAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI HEnDehors(sdReqTemp) ALORS&#13;
												// Ajout Enreg EBP&#13;
												sMaReq = [&#13;
													INSERT INTO ItemAssociatedFiles (&#13;
													[sysCreatedDate],&#13;
													[sysCreatedUser],&#13;
													[sysModifiedDate],&#13;
													[sysModifiedUser],&#13;
													[Id],&#13;
													[ParentId],&#13;
													[Name],&#13;
													[Content],&#13;
													[DocumentType],&#13;
													[OneDriveShareUrl],&#13;
													[OneDriveItemId],&#13;
													[OneDriveCode]&#13;
													)&#13;
													VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
												]&#13;
											SINON&#13;
												// Modification Enreg EBP&#13;
												sMaReq = [&#13;
													UPDATE ItemAssociatedFiles SET&#13;
													[sysModifiedDate] = getdate(),&#13;
													[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
													[ParentId] = &amp;apos;%2&amp;apos;,&#13;
													[Name] = &amp;apos;%3&amp;apos;,&#13;
													[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
													[DocumentType] = %5,&#13;
													[OneDriveShareUrl] = %6,&#13;
													[OneDriveItemId] = %7,&#13;
													[OneDriveCode] = %8&#13;
													WHERE&#13;
													Id = &amp;apos;%1&amp;apos;&#13;
													&#13;
												]&#13;
												&#13;
											FIN&#13;
										FIN&#13;
										&#13;
										&#13;
										// &#13;
										ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										ValParentId		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
										ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
										//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
										bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										&#13;
										ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
										SI OneDriveActif = Vrai ALORS&#13;
											&#13;
											(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierArticlesOneDrive, bufBufferTemp,NomFicTemp)&#13;
											&#13;
											//VersPressePapier(LienPubliqueOneDrive)&#13;
											ValDocumentType		= 2&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
											&#13;
										SINON&#13;
											&#13;
											ValDocumentType		= 0&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
										FIN&#13;
										sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
										//															VersPressePapier(sMaReq)&#13;
										&#13;
										SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
											StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
											bOkInsert = Vrai&#13;
										FIN&#13;
										&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
					CAS &amp;quot;contrat&amp;quot;&#13;
						sMaReq = [&#13;
							SELECT &#13;
							count(Id) AS NbDoc&#13;
							FROM MaintenanceContract&#13;
							Where Id = &amp;apos;%1&amp;apos;&#13;
						]&#13;
						sValTemp	= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
						sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
						//											VersPressePapier(sMaReq)&#13;
						HAnnuleDéclaration(sdReqTemp)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
									ValId		= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
									SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
										HAnnuleDéclaration(sdReqTemp)&#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,&amp;quot;SELECT Id FROM MaintenanceContractAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI HEnDehors(sdReqTemp) ALORS&#13;
												// Ajout Enreg EBP&#13;
												sMaReq = [&#13;
													INSERT INTO MaintenanceContractAssociatedFiles (&#13;
													[sysCreatedDate],&#13;
													[sysCreatedUser],&#13;
													[sysModifiedDate],&#13;
													[sysModifiedUser],&#13;
													[Id],&#13;
													[ParentId],&#13;
													[Name],&#13;
													[Content],&#13;
													[DocumentType],&#13;
													[OneDriveShareUrl],&#13;
													[OneDriveItemId],&#13;
													[OneDriveCode]&#13;
													)&#13;
													VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
												]&#13;
											SINON&#13;
												// Modification Enreg EBP&#13;
												sMaReq = [&#13;
													UPDATE MaintenanceContractAssociatedFiles SET&#13;
													[sysModifiedDate] = getdate(),&#13;
													[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
													[ParentId] = &amp;apos;%2&amp;apos;,&#13;
													[Name] = &amp;apos;%3&amp;apos;,&#13;
													[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
													[DocumentType] = %5,&#13;
													[OneDriveShareUrl] = %6,&#13;
													[OneDriveItemId] = %7,&#13;
													[OneDriveCode] = %8&#13;
													WHERE&#13;
													Id = &amp;apos;%1&amp;apos;&#13;
													&#13;
												]&#13;
												&#13;
											FIN&#13;
										FIN&#13;
										&#13;
										&#13;
										// &#13;
										ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										ValParentId		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
										ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
										//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
										bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										&#13;
										&#13;
										ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
										SI OneDriveActif = Vrai ALORS&#13;
											&#13;
											(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierContratsOneDrive, bufBufferTemp,NomFicTemp)&#13;
											&#13;
											//VersPressePapier(LienPubliqueOneDrive)&#13;
											ValDocumentType		= 2&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
											&#13;
										SINON&#13;
											&#13;
											ValDocumentType		= 0&#13;
											ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
											ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
										FIN&#13;
										sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
										//																															VersPressePapier(sMaReq)&#13;
										&#13;
										SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
											StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
											bOkInsert = Vrai&#13;
										FIN&#13;
										&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN	&#13;
					CAS &amp;quot;appareil&amp;quot;&#13;
						SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; _ET_ CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sMaReq			= [&#13;
								SELECT &#13;
								count(IDInterne) AS NbApp,IDInterne&#13;
								FROM [appareils_nuxi.FIC]&#13;
								Where IDInterne = &amp;apos;%1&amp;apos;&#13;
								GROUP BY IDInterne&#13;
							]&#13;
							sMaReq		= ChaîneConstruit(sMaReq,IDInterneModule)&#13;
							//											&#13;
							HAnnuleDéclaration(sdReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									SI sdReqTemp.NbApp &amp;gt; 0 ALORS	//Le parent existe&#13;
										IDInterneModule						= sdReqTemp.IDInterne&#13;
										bufBufferTemp						= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
										SI IDInterne &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
											HAnnuleDéclaration(sdReqTemp)&#13;
											SI PAS HLitRecherche(Documents_Nuxi,&amp;quot;IDInterne&amp;quot;,IDInterne,hIdentique) ALORS HRAZ(Documents_Nuxi)&#13;
											Documents_Nuxi.LibelleFichier		= NomFichier&#13;
											Documents_Nuxi.NomFichier			= NomFichier&#13;
											Documents_Nuxi.TypeFichier			= TypeFichier&#13;
											Documents_Nuxi.Fichier				= bufBufferTemp&#13;
											Documents_Nuxi.Stockage				= Stockage&#13;
											Documents_Nuxi.AExternaliser		= 0&#13;
											Documents_Nuxi.IdentifiantDocDrive	= LienPubliqueOneDrive&#13;
											Documents_Nuxi.IDDocPublicDrive		= sIdFichieOneDrive	&#13;
											&#13;
											&#13;
											SI Documents_Nuxi..NouvelEnregistrement ALORS&#13;
												Documents_Nuxi.IDInterne		= IDInterne&#13;
												Documents_Nuxi.IDInterneModule	= IDInterneModule&#13;
												Documents_Nuxi.Nom_Module		= &amp;quot;App&amp;quot;&#13;
												SI HAjoute(Documents_Nuxi) ALORS&#13;
													StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + Documents_Nuxi.IDInterne + &amp;quot; / Ajout&amp;quot; + RC&#13;
													bOkInsert = Vrai&#13;
												FIN&#13;
											SINON&#13;
												SI HModifie(Documents_Nuxi) ALORS&#13;
													StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + Documents_Nuxi.IDInterne + &amp;quot; / Modification&amp;quot; + RC&#13;
													bOkInsert = Vrai&#13;
												FIN&#13;
												&#13;
											FIN&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						SINON&#13;
							sMaReq = [&#13;
								SELECT &#13;
								count(Id) AS NbDoc,&#13;
								Id &#13;
								FROM CustomerProduct&#13;
								Where %1&#13;
								Group By Id&#13;
							]&#13;
							sValTemp	= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
							SI Gauche(sValTemp,3) =&amp;quot;XX_&amp;quot; ALORS&#13;
								sValTemp = &amp;quot;NotesClear Like &amp;apos;%Ref Externe NuxiDev &amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot;&#13;
							SINON&#13;
								sValTemp = &amp;quot;Id = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot;&#13;
							FIN&#13;
							&#13;
							&#13;
							&#13;
							sMaReq		= ChaîneConstruit(sMaReq,sValTemp)&#13;
							//																							VersPressePapier(sMaReq)&#13;
							//trace(&amp;quot;XX1 &amp;quot; + sMaReq)&#13;
							HAnnuleDéclaration(sdReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									SI sdReqTemp.NbDoc &amp;gt; 0 ALORS	//Le parent existe&#13;
										DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe	= TexteVersXML(sdReqTemp.Id)&#13;
										ValId															= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
										SI ValId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
											HAnnuleDéclaration(sdReqTemp)&#13;
											sMaReq = &amp;quot;SELECT Id FROM CustomerProductAssociatedFiles WHERE Id = &amp;apos;&amp;quot; + ValId + &amp;quot;&amp;apos; &amp;quot;&#13;
											//trace(&amp;quot;XX2 &amp;quot; + sMaReq)&#13;
											SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
												//trace(&amp;quot;XX3 &amp;quot; )&#13;
												HLitPremier(sdReqTemp)&#13;
												SI HEnDehors(sdReqTemp) ALORS&#13;
													//trace(&amp;quot;XX4 &amp;quot; )&#13;
													// Ajout Enreg EBP&#13;
													sMaReq = [&#13;
														INSERT INTO CustomerProductAssociatedFiles (&#13;
														[sysCreatedDate],&#13;
														[sysCreatedUser],&#13;
														[sysModifiedDate],&#13;
														[sysModifiedUser],&#13;
														[Id],&#13;
														[ParentId],&#13;
														[Name],&#13;
														[Content],&#13;
														[DocumentType],&#13;
														[OneDriveShareUrl],&#13;
														[OneDriveItemId],&#13;
														[OneDriveCode]&#13;
														)&#13;
														VALUES (getdate(),&amp;apos;ADM&amp;apos;,getdate(),&amp;apos;ADM&amp;apos;, &amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2) , %5, %6, %7, %8)&#13;
													]&#13;
												SINON&#13;
													// Modification Enreg EBP&#13;
													//trace(&amp;quot;XX5 &amp;quot; )&#13;
													sMaReq = [&#13;
														UPDATE CustomerProductAssociatedFiles SET&#13;
														[sysModifiedDate] = getdate(),&#13;
														[sysModifiedUser] = &amp;apos;ADM&amp;apos;,&#13;
														[ParentId] = &amp;apos;%2&amp;apos;,&#13;
														[Name] = &amp;apos;%3&amp;apos;,&#13;
														[Content] = CONVERT(VARBINARY(max),&amp;apos;%4&amp;apos;,2),&#13;
														[DocumentType] = %5,&#13;
														[OneDriveShareUrl] = %6,&#13;
														[OneDriveItemId] = %7,&#13;
														[OneDriveCode] = %8&#13;
														WHERE&#13;
														Id = &amp;apos;%1&amp;apos;&#13;
														&#13;
													]&#13;
													&#13;
												FIN&#13;
												&#13;
												&#13;
												&#13;
												// &#13;
												ValId			= Majuscule(Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne),[&amp;quot;{&amp;quot;,&amp;quot;}&amp;quot;],&amp;quot;&amp;quot;))&#13;
												ValParentId		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Table_Externe)&#13;
												ValName			=  NomFicTemp // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomDocument)	&#13;
												//															bufBufferTemp	= Décrypte(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument) ,&amp;quot;&amp;quot;,cryptAnsi,encodeBASE64)&#13;
												bufBufferTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BinaireDocument),encodeBASE64SansRC)&#13;
												&#13;
												ValContent		=  Remplace(BufferVersHexa(bufBufferTemp),[&amp;quot; &amp;quot;, CRLF],&amp;quot;&amp;quot;) &#13;
												SI OneDriveActif = Vrai ALORS&#13;
													&#13;
													(LienPubliqueOneDrive,sIdFichieOneDrive)  = CopierFil_AndGetShared(&amp;quot;NuxiDev&amp;quot;,sIDDossierContratsOneDrive, bufBufferTemp,NomFicTemp)&#13;
													&#13;
													//VersPressePapier(LienPubliqueOneDrive)&#13;
													ValDocumentType		= 2&#13;
													ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;quot; + LienPubliqueOneDrive + &amp;quot;&amp;apos;&amp;quot; //Null //https://api-onedrive.ebp.com/GetFile/index?code=daa35901-acdd-4e9b-83b1-08dba2f17547&#13;
													ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
													ValOneDriveCode		= &amp;quot;&amp;apos;&amp;quot; +  sIdFichieOneDrive	+ &amp;quot;&amp;apos;&amp;quot; //daa35901-acdd-4e9b-83b1-08dba2f17547...&#13;
													&#13;
												SINON&#13;
													&#13;
													ValDocumentType		= 0&#13;
													ValOneDriveShareUrl	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
													ValOneDriveItemId	= &amp;quot;&amp;apos;&amp;apos;&amp;quot;&#13;
													ValOneDriveCode		= &amp;quot;&amp;apos;&amp;apos;&amp;quot;											&#13;
												FIN&#13;
												sMaReq				= ChaîneConstruit(sMaReq,ValId,ValParentId,ValName,ValContent,ValDocumentType,ValOneDriveShareUrl,ValOneDriveItemId,ValOneDriveCode)&#13;
												//																	VersPressePapier(sMaReq)											&#13;
												&#13;
												//trace(&amp;quot;XX6 &amp;quot; )&#13;
												SI HExécuteRequêteSQL(sdReqTemp2,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
													StrLog		= StrLog + &amp;quot;OK - &amp;quot; + tabListeTypeEnreg[t,1] +&amp;quot; : &amp;quot; + ValName + &amp;quot; / Ajout-Modif&amp;quot; + RC&#13;
													bOkInsert = Vrai&#13;
												FIN&#13;
												&#13;
											FIN&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						&#13;
					CAS &amp;quot;opportunité&amp;quot;&#13;
						&#13;
						&#13;
						&#13;
					AUTRE CAS&#13;
						&#13;
				FIN&#13;
				&#13;
				//LienPublic&#13;
				sValTemp	= LienPubliqueOneDrive&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDDocPublic&#13;
				sValTemp	= sIdFichieOneDrive&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Observations&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Observations)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++	&#13;
				SI bOkInsert = Vrai ALORS&#13;
					TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,1)&#13;
				SINON&#13;
					TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,-1)&#13;
				FIN&#13;
				&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN					&#13;
				&#13;
			SINON SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = &amp;quot;images&amp;quot; ALORS&#13;
				StrLog		= StrLog + &amp;quot;Dans la version V6, veuillez utiliser la GED (Gestion Électronique des Documents) de NuxiDev pour attacher des documents ou des photos.&amp;quot; + RC&#13;
				&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,1)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN	&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		&#13;
		&#13;
	FIN&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp +fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ADRESSES</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345685</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportAdresses()&#13;
&#13;
//16/10/2024 : By Fatima Ajout du lien du csv Dossier ftp import du client&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport est un entier&#13;
StrLogConcaténé	est une chaîne&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
Url											est une chaîne		&#13;
gsURLEBPImport								est une chaîne	&#13;
sURLEBP										est une chaîne&#13;
Vjs											est un JSON&#13;
RESTRequete									est une restRequest&#13;
RESTReponse									est une restResponse&#13;
oRequête									est une httpRequête&#13;
oRéponse									est une httpRéponse&#13;
MimeType									est  une chaîne&#13;
FormName									est une chaîne&#13;
sImportId									est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
nNbTentativeEnvoieCSV						est un entier&#13;
sStatut										est une chaîne&#13;
sMessageRetour								est une chaîne&#13;
sConditionWhere								est une chaîne&#13;
Colonnes									est une chaîne&#13;
nNbrRetour									est une entier&#13;
nNbTentativeEnCours							est un entier&#13;
nNbTentativeErreur							est une entier&#13;
nNbLigneErr									est un entier&#13;
nNbLigneDetails								est un entier&#13;
nCrees, nModifies,nImportes					est un entier&#13;
bIsImportValide								est un booléen	= Vrai&#13;
&#13;
//***********************************************************************&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;adresses&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;adresses_f&amp;quot;)&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;adresses&amp;quot;&#13;
							IDGuidEBP  = &amp;quot;{8140A767-E650-47AF-B12B-FE66345BA074}&amp;quot;&#13;
						CAS &amp;quot;adresses_f&amp;quot;&#13;
							IDGuidEBP  = &amp;quot;{33819D0E-C505-4FD6-AC73-410E66C52C8D}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP	= &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					sEnregCSV	= [&#13;
										Code (tiers);Nom du tiers;Identifiant de l&amp;apos;adresse;Adresse 1;Adresse 2;Adresse 3;Adresse 4;Ville;Code postal;Département;NPAI;Code Pays;Site Web;Nom de l&amp;apos;adresse;Type livraison;Type facturation;Principale de livraison;Principale de facturation;Principale de relance;Civilite;&#13;
					]&#13;
					sEnregCSV =Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
					&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;adresses&amp;quot;&#13;
							&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Adresses Clients.csv&amp;quot;&#13;
							sNomFicLog = sPréfixFic + &amp;quot;Adresses Clients.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;CustomersAddresses&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
						CAS &amp;quot;adresses_f&amp;quot;&#13;
							&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Adresses Fournisseurs.csv&amp;quot;&#13;
							sNomFicLog		= sPréfixFic + &amp;quot;Adresses Fournisseurs.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;CustomersAddresses&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				&#13;
				//Code (tiers)&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneClient)&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
					SI PAS bEBPSaaS ALORS &#13;
						//C&amp;apos;est un nouveau, chercher le code tiers généré par EBP&#13;
						SELON  Minuscule(tabListeTypeEnreg[t,1])&#13;
							CAS &amp;quot;adresses&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								//VersPressePapier(sMaReq)&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
							CAS &amp;quot;adresses_f&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Supplier WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								//VersPressePapier(sMaReq)&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
						FIN&#13;
					SINON&#13;
						//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&#13;
					FIN&#13;
				FIN&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom du tiers&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Identifiant de l&amp;apos;adresse&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse_1)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse_2)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse_3)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 4&#13;
				sValTemp	= &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Ville&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ville)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code postal&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CP)&#13;
				SI sValTemp = &amp;quot;&amp;quot; OU sValTemp = &amp;quot;-1&amp;quot; ALORS&#13;
					sValTemp = &amp;quot;FR&amp;quot;&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Département&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NPAI&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Pays&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInternePays)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Site Web&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom de l&amp;apos;adresse&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Nom_Site)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type livraison&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type facturation&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Principale de livraison&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Principale de facturation&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Principale de relance&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Civilite)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Principale de relance&#13;
				&#13;
				&#13;
				//&#13;
				sEnregCSV	= sEnregCSV + RC&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			&#13;
			sRetRecherche est une chaîne&#13;
			&#13;
			SI PAS bEBPSaaS ALORS &#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;contact&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [Address] Where [AddressFields_Address4] Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;Address&amp;quot;,&amp;quot;AddressFields_Address4&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
//ImportDocuments ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>APPAREIL</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345689</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportAppareil()&#13;
&#13;
&#13;
//04/02/2025 09:17 Correction traitement de chaines sur FenSpec XML&#13;
&#13;
tabListeTypeEnreg								est un tableau de 0,2 chaînes&#13;
sNomFic											est une chaîne&#13;
sNomFicLog										est une chaîne&#13;
NBtraité										est un entier&#13;
AppliSDK										est une chaîne&#13;
sPréfixFic										est une chaîne&#13;
NbTypeEnreg										est un entier&#13;
Prems											est un booléen&#13;
sEnregCSV										est une chaîne&#13;
sIdentifiantsEBP								est une chaîne&#13;
InTemp											est une chaîne&#13;
sNomProfilImport								est une chaîne&#13;
sValTemp										est une chaîne&#13;
DocXMLSource									est une xmlDocument&#13;
nIDFichier										est un entier&#13;
nIDFichierLog									est un entier&#13;
sXX_											est une chaîne&#13;
IDGuidEBP										est une chaîne&#13;
sdReqTemp										est une Source de Données&#13;
sMaReqTemp										est une chaîne&#13;
nNbEléments										est un entier&#13;
bEBPSaaS										est un booléen&#13;
sPréfixeNomProfilImport							est une chaîne&#13;
tabIDInterneSrvTraité							est un tableau de 0,2 chaîne&#13;
StrLog											est une chaîne&#13;
nNbImport										est un entier&#13;
dhDateHeureTemp									est une DateHeure&#13;
StrLogConcaténé									est une chaîne&#13;
&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso								est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps										est un entier&#13;
nIChamp											est un entier&#13;
XmlChampsPerso									est un xmlDocument&#13;
sValTempAnsi									est une chaîne ANSI&#13;
sNomAlias										est une chaîne&#13;
sValeurAlias									est une chaîne&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sUrl											est une chaîne		&#13;
sGsURLEBPImport									est une chaîne	&#13;
sURLEBP											est une chaîne&#13;
Vjs												est un JSON&#13;
RESTRequete										est une restRequest&#13;
RESTReponse										est une restResponse&#13;
oRequête										est une httpRequête&#13;
oRéponse										est une httpRéponse&#13;
sMimeType										est  une chaîne&#13;
sFormName										est une chaîne&#13;
sImportId										est une chaîne&#13;
sOrdreSDK										est une chaîne&#13;
nNbTentativeEnvoieCSV							est un entier&#13;
sStatut											est une chaîne&#13;
sMessageRetour									est une chaîne&#13;
sConditionWhere									est une chaîne&#13;
sColonnes										est une chaîne&#13;
nNbrRetour										est une entier&#13;
nNbTentativeEnCours								est un entier&#13;
nNbTentativeErreur								est une entier&#13;
nNbLigneErr										est un entier&#13;
nNbLigneDetails									est un entier&#13;
nCrees, nModifies,nImportes						est un entier&#13;
bIsImportValide									est un booléen	= Vrai&#13;
&#13;
//***********************************************************************&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;appareil&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;appareil&amp;quot;&#13;
							IDGuidEBP  = &amp;quot;{3960F6EA-6AA4-4017-AD13-13B8B04BC708}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp			= ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						&#13;
						sNomProfilImport	= &amp;quot;NuxiDev3&amp;quot;&#13;
						&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;appareil&amp;quot;	&#13;
							sEnregCSV = [&#13;
								Code;Libellé;Code famille produit client;Statut;Code client;Nom du client;Code article;Série/lot;Description commerciale en clair;Code type de garantie;Code type de garantie - Extension;Date de début pièces;&#13;
								Date de fin pièces;Date de début MO;Date de fin MO;Date de début déplacement;Date de fin déplacement;Civilité (contact) (livraison);Nom (contact) (livraison);Prénom (livraison);Téléphone fixe (livraison);&#13;
								Téléphone portable (livraison);Fax (livraison);ImportAppareil(livraison);E-mail (livraison);Adresse 1 (livraison);Adresse 2 (livraison);Adresse 3 (livraison);Adresse 4 (livraison);Code postal (livraison);Ville (livraison);Département (livraison);Code Pays (livraison);Notes en texte brut;&#13;
							]&#13;
							&#13;
							&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;APP&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							sEnregCSV		= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic			= sPréfixFic + &amp;quot;Produit Client.csv&amp;quot;&#13;
							sNomFicLog		= sPréfixFic + &amp;quot;Produit Client.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;CustomerProduct&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					sEnregCSV	= &amp;quot;&amp;quot;&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				&#13;
				//Code&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
				SI PAS bEBPSaaS ALORS&#13;
					sXX_			= &amp;quot;&amp;quot;&#13;
					SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
						sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [CustomerProduct] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sValTemp = sdReqTemp.Id&#13;
							SINON&#13;
								sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
								sValTemp	= &amp;quot;&amp;quot;&#13;
							FIN	&#13;
							HLibèreRequête(sdReqTemp)&#13;
						SINON&#13;
							sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
					FIN&#13;
				SINON&#13;
					sXX_			= &amp;quot;&amp;quot;&#13;
					SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
						sValTemp=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ sValTemp +&amp;quot;%&amp;quot;,&amp;quot;CustomerProduct&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						SI sValTemp=&amp;quot;&amp;quot; ALORS&#13;
							sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code famille produit client&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Statut&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code client&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeTiers)&#13;
				SI PAS bEBPSaaS ALORS&#13;
					SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS &#13;
						sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sValTemp = sdReqTemp.Id&#13;
							FIN&#13;
							HLibèreRequête(sdReqTemp)&#13;
						FIN&#13;
					FIN&#13;
				SINON&#13;
					SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS &#13;
						sValTemp=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ sValTemp +&amp;quot;%&amp;quot;,&amp;quot;Customer&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					FIN&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom du client&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code article&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeArticle)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Série/lot&#13;
				sValTemp	= Majuscule(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NumSerie))&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Description commerciale en clair&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Description)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code type de garantie&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code type de garantie - Extension&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de début pièces&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtiePieceDebut)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de fin pièces&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtiePieceFin)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de début MO&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieMODebut)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de fin MO&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieMOFin)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de début déplacement&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieDeplDebut)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de fin déplacement&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieDeplFin)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité (contact) (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom (contact) (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Prénom (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone fixe (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone portable (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fax (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fonction (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//E-mail (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 1 (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 2 (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 3 (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 4 (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code postal (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Ville (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Département (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Pays (livraison)&#13;
				sValTemp		= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Notes en texte brut&#13;
				&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
				SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
					sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
					sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
				FIN&#13;
				sValTemp		= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
				sValTemp		= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
				sValTemp		= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Champs perso&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
				POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
					sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
					sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
					nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;APP&amp;quot;, Majuscule(sNomAlias))&#13;
					SI nIChamp &amp;gt; 0 ALORS&#13;
						gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
					FIN&#13;
				FIN&#13;
				//Affectation des valeurs des Pages perso&#13;
				sValTempAnsi			= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
&#13;
				XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
				SI PAS ErreurDétectée ALORS&#13;
					nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
					POUR x = 1 À nNbChamps&#13;
						sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
						sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
						nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;APP&amp;quot;, Majuscule(sNomAlias))&#13;
						SI nIChamp &amp;gt; 0 ALORS&#13;
							gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
				POUR x = 1 À nNbChamps&#13;
					SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;APP&amp;quot; ALORS&#13;
						sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
					FIN&#13;
				FIN&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
				&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			sRetRecherche est une chaîne&#13;
			&#13;
			SI PAS bEBPSaaS ALORS &#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
				&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;appareil&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [CustomerProduct] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				&#13;
				POUR x = 1 À NBtraité&#13;
					sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;CustomerProduct&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp	= gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité			= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp				= &amp;quot;&amp;quot;&#13;
		StrLog				= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLE</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345684</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportArticles()&#13;
&#13;
&#13;
//04/02/2025 09:17 Correction traitement de chaines sur FenSpec XML&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
StrLogConcaténé								est une chaîne&#13;
nNbImport									est un entier&#13;
ImageTemp									est une Image&#13;
xCoefReducImage est un numérique&#13;
&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso							est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps									est un entier&#13;
nIChamp										est un entier&#13;
XmlChampsPerso								est un xmlDocument&#13;
sValTempAnsi								est une chaîne ANSI&#13;
sNomAlias									est une chaîne&#13;
sValeurAlias								est une chaîne&#13;
//**********************************************&#13;
&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sRetRecherche								est une chaîne&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;article&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;article&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{81CF1254-9C21-42ED-9190-14079670BAA9}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings: OK)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;article&amp;quot;&#13;
							&#13;
							&#13;
							sEnregCSV = [&#13;
								Code article;Libellé;Code Famille Articles;Libellé de la famille article;Code sous-famille article;Libellé de la sous-famille article;Prix d&amp;apos;achat;% de frais généraux;Montant des frais généraux;Prix de revient;Taux de marge;Marge HT;Taux de marque;PV HT;Taux de TVA;Code TVA (article);PV TTC;Type de prix fixe;Nombre de décimales des prix de l&amp;apos;article;Description commerciale en clair;Type d&amp;apos;article;Code emplacement;Code fournisseur;Référence;Nom du fournisseur;Reporter le prix de vente conseillé sur le prix de vente de l&amp;apos;article;PV HT public conseillé;Code éco-contribution;Montant éco-contribution TTC;Libellé éco-contribution;Géré en stock;Poids;Poids Net;Code de l&amp;apos;unité de poids;Libellé de l&amp;apos;unité de poids;Nombre d&amp;apos;articles/colis;Image de l&amp;apos;article (Base 64);Quantité par défaut;Code unité;Libellé de l&amp;apos;unité;Volume;Code de l&amp;apos;unité de volume;Libellé de l&amp;apos;unité de volume;Unité d&amp;apos;achat;Libellé de l&amp;apos;unité d&amp;apos;achat;Coefficient de conversion achat/vente;Largeur;Hauteur;Lon&#13;
								gueur;Unité des dimen&#13;
								sions;Libellé de l&amp;apos;unité des dimensions;Notes en texte brut;Description commerciale;Statut;Non facturable;Non imprimable;Non inclus;Autoriser les stocks négatifs;Compte comptable ventes (France);Compte comptable achats (France);Compte comptable ventes (Intracommunautaire);Compte comptable achats (Intracommunautaire);Compte comptable ventes (Importation/Exportation);Compte comptable achats (Importation/Exportation);Destination;Compte de variation de stock;Compte d&amp;apos;encours de stock;Seuil de réapprovisionnement;Quantité minimum en stock;Quantité maximum en stock;Service à la personne;Code intervenant principal;Nombre d&amp;apos;heures = quantité;Code de l&amp;apos;éco-contribution mobilier;Non metteur sur le marché;% de frais sur achat;Stock réel;Stock virtuel;Publier sur le web;Article de remplacement;Code barre;Oxatis - Description de la page;Oxatis - Mots-clés;Oxatis - Titre de la page;Oxatis - Description longue;&#13;
								Oxatis - Proposer ce produit à la vente même s&amp;apos;iL est indisponible;Oxatis - Cause de l&amp;apos;indisponibilité;Oxatis - Afficher le délai de disponibilité (Exemple : Disponible sous 4 jours&amp;quot;&amp;quot;);Oxatis - Montrer ce produit même s&amp;apos;il est indisponible;Oxatis - Afficher une note quand l&amp;apos;article est en stock (Exemple : &amp;quot;&amp;quot;En stock&amp;quot;&amp;quot;);Oxatis - Afficher le niveau de stock (Exemple : &amp;quot;&amp;quot;4 Produit(s) en stock&amp;quot;&amp;quot;);Oxatis - Marque;Oxatis - Vignette (Base 64);Oxatis - Coût HT Manutention autres exemplaires;Oxatis - Coût HT Manutention du 1er exemplaire;Oxatis - Frais de livraison TTC;Oxatis - Utiliser celui du fournisseur principal;&#13;
								Oxatis - Délai de disponibilité;Oxatis - Type de la catégorie 1;Oxatis - Type de la catégorie 2;Oxatis - Type de la catégorie 3;Oxatis - Utiliser la sous famille en tant que marque;Groupe 1;Groupe 2;&#13;
							]&#13;
							&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;ART&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Articles.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Articles.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;Items&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				//Code article&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
				sXX_			= &amp;quot;&amp;quot;&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [Item] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sXX_		= sValTemp&#13;
								sValTemp	= sdReqTemp.Id&#13;
							SINON&#13;
								sXX_		= sValTemp &#13;
								sValTemp	= &amp;quot;&amp;quot;&#13;
							FIN	&#13;
							HLibèreRequête(sdReqTemp)&#13;
						SINON&#13;
							sXX_		=  sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
					SINON&#13;
						sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Item&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
							sXX_		=  sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sXX_		= sValTemp&#13;
							sValTemp	= sRetRecherche&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Famille Articles&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneFamille)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de la famille article&#13;
				sValTemp	= &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code sous-famille article&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneSousFamille)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de la sous-famille article&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Prix d&amp;apos;achat&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PrixAchat)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//% de frais généraux&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Montant des frais généraux&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Prix de revient&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PrixRevient)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Taux de marge&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Marge HT&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Taux de marque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PV HT&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PRixVenteHT)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Taux de TVA&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TauxTVA)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code TVA (article)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PV TTC&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type de prix fixe&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nombre de décimales des prix de l&amp;apos;article&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Description commerciale en clair&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Designation)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type d&amp;apos;article&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneTypeArticle)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code emplacement&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code fournisseur&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeTiers_Fournisseur)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Référence&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ReferenceFournisseur)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom du fournisseur&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Reporter le prix de vente conseillé sur le prix de vente de l&amp;apos;article&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PV HT public conseillé&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PrixVentePublic)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code éco-contribution&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Montant éco-contribution TTC&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé éco-contribution&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Géré en stock&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Poids&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Poids)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Poids Net&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PoidsNet)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code de l&amp;apos;unité de poids&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de l&amp;apos;unité de poids&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nombre d&amp;apos;articles/colis&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NbArtColis)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Image de l&amp;apos;article (Base 64)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Photo)&#13;
				//fSauveBuffer(&amp;quot;C:\temp\img.jpg&amp;quot;,decode(sValTemp,encodeBASE64SansRC))&#13;
				SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
					ImageTemp						= &amp;quot;&amp;quot;&#13;
					ImageTemp..CouleurRemplissage	= Blanc&#13;
					ImageTemp						=  dChargeImage(Décode(sValTemp,encodeBASE64SansRC),imgDéfaut)&#13;
					SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
						xCoefReducImage = ImageTemp..Largeur / 600&#13;
					SINON&#13;
						xCoefReducImage = ImageTemp..Hauteur / 600&#13;
					FIN&#13;
					SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
					dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
					sValTemp = Encode(ImageTemp,encodeBASE64SansRC)&#13;
					&#13;
				FIN&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Quantité par défaut&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.QuantiteDefaut)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code unité&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de l&amp;apos;unité&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Volume&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Volume)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code de l&amp;apos;unité de volume&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de l&amp;apos;unité de volume&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Unité d&amp;apos;achat&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de l&amp;apos;unité d&amp;apos;achat&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Coefficient de conversion achat/vente&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Largeur&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Largeur)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Hauteur&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Hauteur)&#13;
				SI Val(sValTemp) = 0 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Longueur&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Unité des dimensions&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de l&amp;apos;unité des dimensions&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Notes en texte brut&#13;
				&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
				SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
					sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
					sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
				sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
				sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Description commerciale&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Statut&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Non facturable&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Non imprimable&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Non inclus&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Autoriser les stocks négatifs&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable ventes (France)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable achats (France)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable ventes (Intracommunautaire)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable achats (Intracommunautaire)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable ventes (Importation/Exportation)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable achats (Importation/Exportation)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Destination&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte de variation de stock&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte d&amp;apos;encours de stock&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Seuil de réapprovisionnement&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Quantité minimum en stock&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Quantité maximum en stock&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Service à la personne&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code intervenant principal&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nombre d&amp;apos;heures = quantité&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code de l&amp;apos;éco-contribution mobilier&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Non metteur sur le marché&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//% de frais sur achat&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Stock réel&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Stock virtuel&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Publier sur le web&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Article de remplacement&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ArticleRemplacement)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code barre&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeBarre)&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Description de la page&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Mots-clés&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Titre de la page&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Description longue&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Proposer ce produit à la vente même s&amp;apos;iL est indisponible&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Cause de l&amp;apos;indisponibilité&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Afficher le délai de disponibilité (Exemple : Disponible sous 4 jours&amp;quot;&amp;quot;)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Montrer ce produit même s&amp;apos;il est indisponible&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Afficher une note quand l&amp;apos;article est en stock (Exemple : &amp;quot;&amp;quot;En stock&amp;quot;&amp;quot;)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Afficher le niveau de stock (Exemple : &amp;quot;&amp;quot;4 Produit(s) en stock&amp;quot;&amp;quot;)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Marque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Vignette (Base 64)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Coût HT Manutention autres exemplaires&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Coût HT Manutention du 1er exemplaire&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Frais de livraison TTC&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Utiliser celui du fournisseur principal&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Délai de disponibilité&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Type de la catégorie 1&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Type de la catégorie 2&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Type de la catégorie 3&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Oxatis - Utiliser la sous famille en tant que marque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Groupe 1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Groupe1)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Groupe 2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Groupe2)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
				POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
					sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
					sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
					nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;ART&amp;quot;, Majuscule(sNomAlias))&#13;
					SI nIChamp &amp;gt; 0 ALORS&#13;
						gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
					FIN&#13;
				FIN&#13;
				//Affectation des valeurs des Pages perso&#13;
				sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
				XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
				SI PAS ErreurDétectée ALORS&#13;
					nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
					POUR x = 1 À nNbChamps&#13;
						sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
						sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
						nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;ART&amp;quot;, Majuscule(sNomAlias))&#13;
						SI nIChamp &amp;gt; 0 ALORS&#13;
							gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
				POUR x = 1 À nNbChamps&#13;
					SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;ART&amp;quot; ALORS&#13;
						sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
					FIN&#13;
				FIN&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
				&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
		&#13;
	FIN&#13;
	&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Articles] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import des [Articles]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Articles]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;article&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [Item] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;Item&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp	= gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		NBtraité			= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp				= &amp;quot;&amp;quot;&#13;
		StrLog				= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
//ImportContact ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>BE</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345688</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportBon_Entrée()&#13;
&#13;
//04/02/2025 09:17 Correction traitement de chaines sur FenSpec XML&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport									est un entier&#13;
IlMax										est un entier&#13;
StrLogConcaténé								est une chaîne&#13;
tabValChampsPerso							est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps									est un entier&#13;
nIChamp										est un entier&#13;
XmlChampsPerso								est un xmlDocument&#13;
sValTempAnsi								est une chaîne ANSI&#13;
sNomAlias									est une chaîne&#13;
sValeurAlias								est une chaîne&#13;
//Déclaration SAAS******************************************************&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
sRetRecherche								est une chaîne&#13;
//***********************************************************************&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;bon_entrée&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;bon_entrée&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{A97EF491-AD5D-4558-8976-CA40A0C42D27}&amp;quot;	&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp			= ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						&#13;
						sNomProfilImport	= &amp;quot;NuxiDev3&amp;quot;&#13;
						&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;bon_entrée&amp;quot;	&#13;
							sEnregCSV = [&#13;
								Document - Numéro du document;Document - Date;Document - Série de documents;Document - Dépôt;Document - Notes en texte brut;Document - Notes;Document - Référence;Document - Code Contrat de maintenance;Document - Code suivi incident;Ligne - Code article;Ligne - Description;Ligne - Description commerciale en clair;Ligne - Quantité;Ligne - Code emplacement;Ligne - Série/lot;Ligne - Date limite;Ligne - Quantité (Série/Lot/Emplac.);Ligne - Contrat de maintenance/Analyse;Ligne - Code suivi incident;Ligne - Dépôt;Ligne - Valeur de l&amp;apos;article;Ligne - Valeur totale;ID Tablette;&#13;
								&#13;
							]&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							//ajouter entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;BE&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Bon_Entrée.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Bon_Entrée.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;PutAways&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				SI ErreurDétectée = Vrai ALORS&#13;
					TraceErr(&amp;quot;Erreur d&amp;apos;encodage &amp;quot; + gtabSyncNuxiDev[IElement].RefDoc)&#13;
					&#13;
				SINON&#13;
					IlMax			= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
					SI IlMax &amp;gt;=  1 ALORS&#13;
						POUR iL = 1 À IlMax &#13;
							&#13;
							&#13;
							//Document - Numéro du document&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Date&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Date)&#13;
							SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
								sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Série de documents&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Dépôt&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Depot)&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Notes en texte brut&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
							sValTemp		= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
							sValTemp		= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
							sValTemp		= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Notes&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Référence&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Code Contrat de maintenance&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document - Code suivi incident&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Code article&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Article)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Description&#13;
							sValTemp		= &amp;quot;&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Description commerciale en clair&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Libelle_Article)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Quantité&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Code emplacement&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Emplacement)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							&#13;
							&#13;
							&#13;
							&#13;
							&#13;
							//Ligne - Série/lot&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SerieLot)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Date limite&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DLUO)&#13;
							SI DateValide(sValTemp) ALORS&#13;
								sValTemp = DateVersChaîne(sValTemp,&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Quantité (Série/Lot/Emplac.)&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Contrat de maintenance/Analyse&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Code suivi incident&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Dépôt&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Valeur de l&amp;apos;article&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Ligne - Valeur totale&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//ID Tablette&#13;
							sValTemp		=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Device)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
							//Affectation des valeurs des PDF dynamiques&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
							POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
								sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
								sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
								nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;BE&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
							//Affectation des valeurs des Pages perso&#13;
							sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
							XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
							SI PAS ErreurDétectée ALORS&#13;
								nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
								POUR x = 1 À nNbChamps&#13;
									sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
									sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
									nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;BE&amp;quot;, Majuscule(sNomAlias))&#13;
									SI nIChamp &amp;gt; 0 ALORS&#13;
										gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR x = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;BE&amp;quot; ALORS&#13;
									sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
									sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//Fin Mappages des champsperso ---------------------------------------------------------&#13;
							//&#13;
							sEnregCSV	= sEnregCSV + RC&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
//					SI nIDFichierLog&amp;gt;0 ALORS fFerme(nIDFichierLog)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
//		SI nIDFichierLog&amp;gt;0 ALORS fFerme(nIDFichierLog)&#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
		&#13;
	FIN&#13;
	SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp	= gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		NBtraité			= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp				= &amp;quot;&amp;quot;&#13;
		StrLog				= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Bon d&amp;apos;entrée] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import [Bon d&amp;apos;entrée]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Bon d&amp;apos;entrée]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;bon_entrée&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [StockDocument] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN	&#13;
				&#13;
			SINON&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;bon_entrée&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;StockDocument&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
								tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
							SINON&#13;
								tabIDInterneSrvTraité[x,2] = Vrai&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
// ImportAppareil ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>BS</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345687</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportBon_Sortie()&#13;
&#13;
//04/02/2025 09:17 Correction traitement de chaines sur FenSpec XML&#13;
&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport									est un entier&#13;
IlMax										est un entier&#13;
StrLogConcaténé								est une chaîne&#13;
tabValChampsPerso							est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps									est un entier&#13;
nIChamp										est un entier&#13;
XmlChampsPerso								est un xmlDocument&#13;
sValTempAnsi								est une chaîne ANSI&#13;
sNomAlias									est une chaîne&#13;
sValeurAlias								est une chaîne&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
sRetRecherche								est une chaîne&#13;
//***********************************************************************&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;bon_sortie&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;bon_sortie&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{1BEBA5C4-660B-40EA-BF21-FB17BA70EB41}&amp;quot;		&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp			= ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						&#13;
						sNomProfilImport	= &amp;quot;NuxiDev3&amp;quot;&#13;
						&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;bon_sortie&amp;quot;&#13;
							sEnregCSV = [&#13;
								Document - Numéro du document;Document - Date;Document - Série de documents;Document - Dépôt;Document - Notes en texte brut;Document - Notes;Document - Référence;Document - Code Contrat de maintenance;Document - Code suivi incident;Document - Identifiant de l&amp;apos;évènement;Ligne - Code article;Ligne - Description;Ligne - Description commerciale en clair;Ligne - Quantité;Ligne - Code emplacement;Ligne - Série/lot;Ligne - Date limite;Ligne - Quantité (Série/Lot/Emplac.);&#13;
								Ligne - Contrat de maintenance/Analyse;Ligne - Code suivi incident;Ligne - Dépôt;Ligne - Démarque inconnue;Ligne - Détérioré;Ligne - Périmé;Ligne - Vol;Ligne - Autres;Ligne - Réservé;Ligne - A facturer;Ligne - Code produit client;ID Tablette;Code Incident;Code Affaire;Document - Code du chantier;&#13;
								Début Inter;FIN Inter;Libellé inter;			&#13;
							]&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							//ajouter entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;BS&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Bon_Sortie.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Bon_Sortie.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;PickUp&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				SI ErreurDétectée = Vrai ALORS&#13;
					TraceErr(&amp;quot;Erreur d&amp;apos;encodage &amp;quot; + gtabSyncNuxiDev[IElement].RefDoc)&#13;
					&#13;
				SINON&#13;
					&#13;
					IlMax			= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
					&#13;
					SI IlMax &amp;gt;=  1 ALORS&#13;
						POUR iL = 1 À IlMax &#13;
							&#13;
							//											Document - Numéro du document&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Document - Date&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Date)&#13;
							SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
								sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Document - Série de documents&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Document - Dépôt&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Depot)&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Document - Notes en texte brut&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
							sValTemp		= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
							sValTemp		= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
							sValTemp		= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Document - Notes&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Document - Référence&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Document - Code Contrat de maintenance&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Document - Code suivi incident&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Document - Identifiant de l&amp;apos;évènement&#13;
							sValTemp		= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Code article&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Article)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Description&#13;
							sValTemp		= &amp;quot;&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Description commerciale en clair&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Libelle_Article)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Quantité&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Code emplacement&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Emplacement)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Série/lot&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SerieLot)&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Date limite&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DLUO)&#13;
							SI DateValide(sValTemp) ALORS&#13;
								sValTemp = DateVersChaîne(sValTemp,&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Quantité (Série/Lot/Emplac.)&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Contrat de maintenance/Analyse&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Code suivi incident&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Dépôt&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Depot)&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							//											Ligne - Démarque inconnue&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Demarque)&#13;
							SI sValTemp = &amp;quot;0&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Détérioré&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Deteriore)&#13;
							SI sValTemp = &amp;quot;0&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Périmé&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Perime)&#13;
							SI sValTemp = &amp;quot;0&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Vol&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].vol)&#13;
							SI sValTemp = &amp;quot;0&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Autres&#13;
							//											sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Autres_Divers)&#13;
							sValTemp	= Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)) - Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Demarque)) - Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Deteriore)) - Val(sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Perime)) - Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].vol))&#13;
							SI sValTemp = &amp;quot;0&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - Réservé&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											Ligne - A facturer&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//			Ligne - Code produit client  &#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//											&#13;
							//ID Tablette&#13;
							sValTemp	=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Device)&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Code Incident&#13;
							sValTemp	= &amp;quot;&amp;quot; //ReqSQL.&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Code Affaire;&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneAffaire)&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Document - Code du chantier	;&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneChantier)&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Début Inter;&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//FIN Inter;&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp	= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Libellé inter;&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sValTemp		= Remplace(sValTemp,[Caract(34)],&amp;quot;&amp;quot;) &#13;
							sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
							//Affectation des valeurs des PDF dynamiques&#13;
							sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
							POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
								sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
								sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
								nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;BS&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
							//Affectation des valeurs des Pages perso&#13;
							sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
							sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
							XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
							SI PAS ErreurDétectée ALORS&#13;
								nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
								POUR x = 1 À nNbChamps&#13;
									sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
									sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
									nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;BS&amp;quot;, Majuscule(sNomAlias))&#13;
									SI nIChamp &amp;gt; 0 ALORS&#13;
										gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR x = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;BS&amp;quot; ALORS&#13;
									sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
									sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//Fin Mappages des champsperso ---------------------------------------------------------&#13;
							&#13;
							sEnregCSV	= sEnregCSV + RC&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
//					SI nIDFichierLog&amp;gt;0 ALORS fFerme(nIDFichierLog)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
				&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
//		SI nIDFichierLog&amp;gt;0 ALORS fFerme(nIDFichierLog)&#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Bon de sortie] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import [Bon de sortie]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Bon de sortie]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;bon_sortie&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [StockDocument] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
			SINON&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;bon_sortie&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;StockDocument&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
								tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
							SINON&#13;
								tabIDInterneSrvTraité[x,2] = Vrai&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
		&#13;
	FIN&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp	= gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;		&#13;
		&#13;
		NBtraité			= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp				= &amp;quot;&amp;quot;&#13;
		StrLog				= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
// ImportBon_Entrée ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTACT</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345684</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportContact()&#13;
&#13;
&#13;
//04/02/2025 09:17 Correction traitement de chaines sur FenSpec XML&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport est un entier&#13;
StrLogConcaténé	est une chaîne&#13;
&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso	est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps			est un entier&#13;
nIChamp				est un entier&#13;
XmlChampsPerso		est un xmlDocument&#13;
sValTempAnsi		est une chaîne ANSI&#13;
sNomAlias			est une chaîne&#13;
sValeurAlias		est une chaîne&#13;
//**********************************************&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
sRetRecherche								est une chaîne&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;contact&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;contact&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{324F03F5-24FB-443E-BAB5-08B6AE2D0DCB}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;contact&amp;quot;	&#13;
							sEnregCSV = [&#13;
										Code (contact);Civilité (contact);Personne physique;Nom;Prénom;Fonction;Service/Bureau;Téléphone fixe;Fax;Téléphone portable;E-mail;Adresse 1 (principale);Adresse 2 (principale);Adresse 3 (principale);Adresse 4 (principale);Code postal (principale);Ville (principale);Département (principale);Code Pays (principale);NPAI (principale);Site Web (principale);Notes en texte brut;Contact web;Type de contact;Code tiers;Nom du tiers;Code rôle du contact;&#13;
										&#13;
							]&#13;
							&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;CON&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Contact.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Contact.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;Contacts&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				//Code (contact)&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
				sXX_			= &amp;quot;&amp;quot;&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [Contact] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sValTemp = sdReqTemp.Id&#13;
							SINON&#13;
								sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
								sValTemp	= &amp;quot;&amp;quot;&#13;
							FIN	&#13;
							HLibèreRequête(sdReqTemp)&#13;
						SINON&#13;
							sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
					SINON&#13;
						sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Contact&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
							sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp=sRetRecherche&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité (contact)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Civilite)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Personne physique&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Nom)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Prénom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Prenom)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fonction&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ContactFonction)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Service/Bureau&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.ContactService)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone fixe&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Tel)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fax&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Fax)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone portable&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GSM)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//E-mail&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Mail)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 1 (principale)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse1)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 2 (principale)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse2)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 3 (principale)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse3)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 4 (principale)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code postal (principale)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.cp)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Ville (principale)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ville)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Département (principale)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Pays (principale)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInternePays)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NPAI (principale)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Site Web (principale)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Notes en texte brut&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
				SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
					sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
					sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
				sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
				sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Contact web&#13;
				sValTemp	= &amp;quot;0&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type de contact&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TypeTiers)&#13;
				SELON sValTemp&#13;
					CAS &amp;quot;F&amp;quot;&#13;
						sValTemp = &amp;quot;2&amp;quot;&#13;
					CAS &amp;quot;C&amp;quot;&#13;
						sValTemp = &amp;quot;1&amp;quot;&#13;
					CAS &amp;quot;P&amp;quot;&#13;
						sValTemp = &amp;quot;0&amp;quot;&#13;
						&#13;
					AUTRE CAS&#13;
						sValTemp = &amp;quot;1&amp;quot;&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code tiers&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeTiers)&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
					SI PAS bEBPSaaS ALORS &#13;
						//C&amp;apos;est un nouveau, chercher le code tiers généré par EBP&#13;
						SELON  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TypeTiers)&#13;
						&#13;
							CAS  &amp;quot;F&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Supplier WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								&#13;
								//VersPressePapier(sMaReq)&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
								&#13;
							AUTRE CAS&#13;
								&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
						FIN&#13;
					SINON&#13;
						SELON  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TypeTiers)&#13;
							CAS  &amp;quot;F&amp;quot;&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Supplier&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
								SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
									sValTemp=sRetRecherche&#13;
								FIN&#13;
							AUTRE CAS&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Customer&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
								SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
									sValTemp=sRetRecherche&#13;
								FIN&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom du tiers&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code rôle du contact&#13;
				sValTemp	=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Role)&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				&#13;
				//&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
				POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
					sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
					sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
					nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;CON&amp;quot;, Majuscule(sNomAlias))&#13;
					SI nIChamp &amp;gt; 0 ALORS&#13;
						gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
					FIN&#13;
				FIN&#13;
				//Affectation des valeurs des Pages perso&#13;
				sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
				sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
				XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
				SI PAS ErreurDétectée ALORS&#13;
					nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
					POUR x = 1 À nNbChamps&#13;
						sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
						sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
						nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;CON&amp;quot;, Majuscule(sNomAlias))&#13;
						SI nIChamp &amp;gt; 0 ALORS&#13;
							gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
				POUR x = 1 À nNbChamps&#13;
					SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;CON&amp;quot; ALORS&#13;
						sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
					FIN&#13;
				FIN&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Contacts] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import des [Contacts]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Contacts]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;contact&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [Contact] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
			SINON&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;contact&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;Contact&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
								tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
							SINON&#13;
								tabIDInterneSrvTraité[x,2] = Vrai&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
// ImportAdresses ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENT</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250305083318759</Version>
      <CnxSource>1</CnxSource>
      <Requete>&#13;
//03/03/2025 Signature ancienne méthode en plus + dépôt client par défaut &#13;
&#13;
tabListeTypeEnreg								est un tableau de 0,2 chaînes&#13;
sNomFic											est une chaîne&#13;
sNomFicLog										est une chaîne&#13;
NBtraité										est un entier&#13;
AppliSDK										est une chaîne&#13;
sPréfixFic										est une chaîne&#13;
NbTypeEnreg										est un entier&#13;
Prems											est un booléen&#13;
sEnregCSV										est une chaîne&#13;
sIdentifiantsEBP								est une chaîne&#13;
InTemp											est une chaîne&#13;
sNomProfilImport								est une chaîne&#13;
sValTemp										est une chaîne&#13;
DocXMLSource									est une xmlDocument&#13;
nIDFichier										est un entier&#13;
nIDFichierLog									est un entier&#13;
sXX_											est une chaîne&#13;
IDGuidEBP										est une chaîne&#13;
sdReqTemp										est une Source de Données&#13;
sMaReqTemp										est une chaîne&#13;
nNbEléments										est un entier&#13;
bEBPSaaS										est un booléen&#13;
sPréfixeNomProfilImport							est une chaîne&#13;
tabIDInterneSrvTraité							est un tableau de 0,2 chaîne&#13;
StrLog											est une chaîne&#13;
dhDateHeureTemp									est une DateHeure&#13;
CodeDocTemp										est une chaîne&#13;
IMG_Temp										est une Image&#13;
sDossierImages									est une chaîne&#13;
PhotoFormat										est une chaîne&#13;
nNbTemp											est un entier&#13;
sEnregCSVA										est une chaîne&#13;
sEnregCSVB										est une chaîne&#13;
IlMax											est un entier&#13;
NePasValoriserLeSousJacent						est un booléen&#13;
sTypeLigne										est une chaîne&#13;
nNbSerieLotValide								est un entier&#13;
tabTempLotDate									est un tableau de 0 chaîne&#13;
tabTempLotNumero								est un tableau de 0 chaîne&#13;
tabTempLotQuantité								est un tableau de 0 chaîne&#13;
sStrTempLotDate									est une chaîne&#13;
sStrTempLotQuantité								est une chaîne&#13;
sStrTempLotNumero								est une chaîne&#13;
STRTemp											est une chaîne&#13;
CodeDocPrefixeTemp								est une chaîne&#13;
CodeDocSuffixeTemp								est une chaîne &#13;
CodeDocForcer									est une chaîne&#13;
bTrouvéTemp										est un booléen&#13;
nNbImport										est un entier&#13;
SérieDocument est une chaîne&#13;
&#13;
StrLogConcaténé	est une chaîne&#13;
&#13;
&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso								est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps										est un entier&#13;
nIChamp											est un entier&#13;
XmlChampsPerso									est un xmlDocument&#13;
sValTempAnsi									est une chaîne ANSI&#13;
sNomAlias										est une chaîne&#13;
sValeurAlias									est une chaîne&#13;
//**********************************************&#13;
//Déclaration SAAS******************************************************&#13;
&#13;
sURLEBP											est une chaîne&#13;
sOrdreSDK										est une chaîne&#13;
bIsImportValide									est un booléen	= Vrai&#13;
FactProvisoire									est une chaîne&#13;
sRetRecherche									est une chaîne&#13;
//***********************************************************************&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
//gbGlobaliser_Enreg_Import = vrai&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
FactProvisoire	= Majuscule(INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;FACT_PROVISOIRE&amp;quot;,&amp;quot;NON&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) ) &#13;
sDossierImages	= INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO&amp;quot;, XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] +&amp;quot;Images\&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
SI sDossierImages &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
	sDossierImages = ComplèteRep(sDossierImages)&#13;
	SI PAS fRépertoireExiste(sDossierImages) ALORS fRepCrée(sDossierImages)&#13;
FIN&#13;
SI  INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO_FORMAT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) = &amp;quot;&amp;quot; ALORS&#13;
	INIEcrit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO_FORMAT&amp;quot;,&amp;quot;LIEN&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
FIN&#13;
PhotoFormat = INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO_FORMAT&amp;quot;,&amp;quot;LIEN&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
SI  INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;SERIE_DOCUMENT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) = &amp;quot;&amp;quot; ALORS&#13;
	INIEcrit(&amp;quot;CONFIG&amp;quot;, &amp;quot;SERIE_DOCUMENT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
FIN&#13;
SérieDocument = INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;SERIE_DOCUMENT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
&#13;
&#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentcdea&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentfacta&amp;quot;) &#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentbra&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentdevis&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentcde&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentfact&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentavoir&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentbl&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;documentdempa&amp;quot;)&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;documentdevis&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{4AE4797C-5B00-4B72-B06A-F5473033C06A}&amp;quot;	    &#13;
						CAS &amp;quot;documentcde&amp;quot; &#13;
							IDGuidEBP = &amp;quot;{D22C51B6-5E65-45D7-A0E8-3B0A8348F16D}&amp;quot;&#13;
							&#13;
						CAS &amp;quot;documentfact&amp;quot; &#13;
							SI FactProvisoire = &amp;quot;NON&amp;quot; ALORS&#13;
								IDGuidEBP = &amp;quot;{ED7FCD30-7018-49C4-A1FC-622F0DEE675C}&amp;quot;	&#13;
							SINON&#13;
								IDGuidEBP = &amp;quot;{4009453E-47AA-4B9F-AD86-9F90C462F168}&amp;quot;&#13;
							FIN									&#13;
						CAS &amp;quot;documentbl&amp;quot; &#13;
							IDGuidEBP = &amp;quot;{5A1AA132-7002-4CD7-8EC9-71C03C0343AE}&amp;quot;										&#13;
						CAS &amp;quot;documentcdea&amp;quot; &#13;
							IDGuidEBP = &amp;quot;{9E2BF0CE-4139-4266-908B-3120292BCF91}&amp;quot;										&#13;
						CAS &amp;quot;documentfacta&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{6F5AE536-E18F-45AE-BB19-5C73F962C518}&amp;quot;			&#13;
						CAS &amp;quot;documentbra&amp;quot; &#13;
							IDGuidEBP = &amp;quot;{A2B6531F-45D2-4388-A8C8-AFAF8ED646A7}&amp;quot;&#13;
						CAS &amp;quot;documentdempa&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{85C7DE54-E329-445E-A76E-87D1F6A1D967}&amp;quot;&#13;
						CAS &amp;quot;documentavoir&amp;quot;&#13;
							IDGuidEBP  = &amp;quot;{F497F22A-581A-474D-8690-0BA5280A6E8B}&amp;quot;	&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP	= &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					sEnregCSV	= [&#13;
						DateCreation;DateModification;IDInterne;Code;TypeDocument;IDInterneSsTypeDoc;IDInterneDepot;VolumeTotal;PoidsTotal;IdInterneDocument_DevisLie;IdInterneDocument_CommandeLie;IdInterneDocument_Facture;IdInterneDocument_BL;IDInerneTiers;CodeTiers;FacturationNom;Livraison_Contact_Tel;Facturation_Adresse1;Livraison_Contact_Mail;Facturation_Adresse2;Facturation_Adresse3;&#13;
						Facturation_CP;Facturation_Ville;Facturation_IDInternePays;Facturation_Contact_Civilite;Facturation_Contact_Nom;Facturation_Contact_Prenom;Facturation_Contact_Tel;Facturation_Contact_Mail;LivraisonNom;Livraison_Adresse1;Livraison_Adresse2;Livraison_Adresse3;&#13;
						Livraison_CP;Livraison_Ville;Livraison_IDInternePays;Livraison_Contact_Civilite;Livraison_Contact_Nom;Livraison_contact_Prenom;IDInterneModeReglement;DateValidite;DateLivraison;EtatLivraison;SoldeDu;MontantBrutHT;PrixRevient;PrcRemisePied;MontantNetHT;PortFraisHT;PortTauxTva;MontantNetNetHT;EcoTaxeHT;PortFraisTTC;EcoTaxeTTC;MontantNetNetTTC;MontantAcompte;PrcEscompte;MontantEscompte;NetAPayer;NombreCol&#13;
						is;IDInter&#13;
						neCollaborateur;Signature;NomSignature;Note;NDChampsSpec;IDInterneAffaire;Document_Date;NomTiers;NumDocOrigine;Etape;Livraison_Pays;Facturation_Pays;Libelle;Status;IDInerneTVA1;IDInerneTVA2;IDInerneTVA3;IDInerneTVA4;IDInerneTVA5;TauxTVA1;TauxTVA2;TauxTVA3;TauxTVA4;TauxTVA5;MontantTVA1;MontantTVA2;MontantTVA3;MontantTVA4;MontantTVA5;BaseHT1;BaseHT2;BaseHT3;BaseHT4;BaseHT5;MontantRemisePied;IDInterneTVA_Port;CompteurCode;IDInterne_Incident;iDInterne_Contrat;Photo1;Photo2;Photo3;FacturationCivilite;LivraisonCivilite;Facturation_Contact_GSM;Livraison_Contact_GSM;&#13;
						Acompte - Code moyen de paiement;&#13;
						Acompte - Date de règlement;&#13;
						Code du projet;&#13;
						Document - Code Affaire;&#13;
						Document - Code Chantier;&#13;
						Document - Numéro d&amp;apos;engagement;&#13;
						Ligne_DateCreation;Ligne_DateModification;Ligne_Code;Ligne_RefNiveauHierarchie;Ligne_IDInterne;Ligne_Designation;Ligne_idInterneDocument;Ligne_NumeroLigne;Ligne_CodeArticle;Ligne_IDInerneArticle;Ligne_Quantite;Ligne_IDInerneUnite;Ligne_SerieLotNumero;Ligne_SerieLotDateLimite;Ligne_SerieLotQuantite;Ligne_VolumeTotal;Ligne_PoidsTotal;Ligne_PrixAchat;Ligne_PrixVenteBrutHT;Ligne_PrcRemise;Ligne_PrixRevient;Ligne_MontantRemise;Ligne_TauxTVA;Ligne_MontantTva;Ligne_MontantEcoTaxeHT;Ligne_MontantEcoTaxeTTC;Ligne_Quantite&#13;
						Commandee;Ligne_QuantiteLIvree;Ligne_Reliquat;Ligne_IDInerneUnite_Volume;Ligne_IDInerneUnite_Poids;Ligne_MontantNetHT;Ligne_Composant;Ligne_Lie;Ligne_RefNiveauPere;Ligne_IDInterne_Affaire;Ligne_ValoriserLieCompose;Ligne_MontantNetTTC;Ligne_idinterneTVA;Ligne_PoidsUnitaire;Ligne_QuantifierLieCompose;Ligne_NombreDeColis;Ligne_Niveau;Doc_ForcerCode;Doc_PrefixeNumero;Doc_SuffixeNumero;VRAI;FAUX;TypeLigne;Ligne_IDInterneOrigine;Ligne_IDInterneParent;Ligne_QuantiteOrigine;Document_IDInterneOrigine;&#13;
						ImportFromNuxilog;Document - Import Nuxilog;Civilité;ID Tablette;&#13;
						Ligne - Code suivi incident;&#13;
						Ligne - Code intervenant;&#13;
						Ligne - Code commercial/collaborateur;&#13;
						Ligne - Contrat de maintenance/Analyse;&#13;
						Ligne - Code affaire;&#13;
						Ligne - IDInterne Chantier;&#13;
						Ligne - Code Chantier;&#13;
						Transporteur;Ligne - PV HT en devise;Ligne - Montant Net HT en devise;Document - Cours de la devise;Document - Code ISO devise;Document - Devise appliquée dans les documents;Document - Série de documents&#13;
					]&#13;
					//Ajout des Entête champs perso&#13;
					sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
					&#13;
					TableauSupprimeTout(tabValChampsPerso)&#13;
					nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
					POUR i = 1 À nNbChamps&#13;
						SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;DOC&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
							sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
						FIN&#13;
					FIN&#13;
					POUR i = 1 À nNbChamps&#13;
						SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;LIG&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
							sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
						FIN&#13;
					FIN&#13;
					//fin Ajout des Entête champs perso&#13;
					sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
					&#13;
					&#13;
					&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;documentdevis&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;DevisVente.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;DevisVente.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;SaleQuotes&amp;quot;&#13;
						CAS &amp;quot;documentcde&amp;quot; &#13;
							sNomFic		= sPréfixFic + &amp;quot;CommandeVente.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;CommandeVente.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;SaleOrders&amp;quot;&#13;
						CAS &amp;quot;documentfact&amp;quot; &#13;
							SI FactProvisoire = &amp;quot;NON&amp;quot; ALORS&#13;
								sNomFic		= sPréfixFic + &amp;quot;FactureVente.csv&amp;quot;&#13;
								sNomFicLog	= sPréfixFic + &amp;quot;FactureVente.log&amp;quot;&#13;
								sOrdreSDK	= &amp;quot;SaleInvoices&amp;quot;&#13;
							SINON&#13;
								sNomFic		= sPréfixFic + &amp;quot;FactureVente_Provisoire.csv&amp;quot;&#13;
								sNomFicLog	= sPréfixFic + &amp;quot;FactureVente_Provisoire.log&amp;quot;&#13;
								sOrdreSDK	= &amp;quot;TemporarySaleInvoices&amp;quot;&#13;
							FIN&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							&#13;
						CAS &amp;quot;documentavoir&amp;quot;  &#13;
							sNomFic		= sPréfixFic + &amp;quot;Avoir.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Avoir.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;SaleCreditMemo&amp;quot;&#13;
						CAS &amp;quot;documentbl&amp;quot; &#13;
							sNomFic		= sPréfixFic + &amp;quot;BLVente.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;BLVente.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;SaleDelivery&amp;quot;&#13;
						CAS &amp;quot;documentcdea&amp;quot; &#13;
							sNomFic		= sPréfixFic + &amp;quot;CommandeAchat.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;CommandeAchat.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;PurchaseOrders&amp;quot;&#13;
						CAS &amp;quot;documentfacta&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;FactureAchat.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;FactureAchat.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;PurchaseInvoices&amp;quot;&#13;
						CAS &amp;quot;documentbra&amp;quot; &#13;
							sNomFic		= sPréfixFic + &amp;quot;BonReceptionAchat.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;BonReceptionAchat.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;PurchaseReceipt&amp;quot;&#13;
							&#13;
						CAS &amp;quot;documentdempa&amp;quot;&#13;
							sNomFic		= sPréfixFic + &amp;quot;DemandePrixAchat.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;DemandePrixAchat.log&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							sOrdreSDK	= &amp;quot;PurchaseQuotes&amp;quot;&#13;
					FIN&#13;
					TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
					TableauAjouteLigne(gtabExportDesFic,sNomFicLog)					&#13;
					&#13;
					//					trace(sNomFic)&#13;
					&#13;
					//Ligne de commande SDK à utiliser en fin de synchro&#13;
					AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
					+ sNomFicLog + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
					&#13;
					&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ET sEnregCSV&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				&#13;
				VariableRAZ(DocXMLSource)&#13;
				&#13;
//				QUAND EXCEPTION DANS&#13;
					DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
//				FAIRE&#13;
//					&#13;
//				fin&#13;
				&#13;
				//DateCreation&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateCreation)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//DateModification&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateModification)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterne&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
					sXX_ = sValTemp&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				CodeDocTemp	= sValTemp &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//TypeDocument&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TypeDocument)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterneSsTypeDoc&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneSsTypeDoc)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterneDepot&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneDepot) &#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				SI sValTemp = &amp;quot;&amp;quot; ALORS&#13;
					//rechercher le dépôt par défaut du client&#13;
					//Customer.StorehouseId&#13;
					sMaReqTemp = &amp;quot;SELECT TOP 1 StorehouseId FROM Customer WHERE Id like &amp;apos;%&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTiers + &amp;quot;%&amp;apos;&amp;quot; )&#13;
					SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
						HLitPremier(sdReqTemp)&#13;
						SI PAS HEnDehors(sdReqTemp) _ET_ Gauche(sdReqTemp.StorehouseId,8) &amp;lt;&amp;gt; &amp;quot;00000000&amp;quot; ALORS //&amp;quot;00000000-0000-0000-0000-000000000000&amp;quot; ALORS&#13;
							sValTemp = sdReqTemp.StorehouseId&#13;
						FIN&#13;
					FIN&#13;
					&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//VolumeTotal&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.VolumeTotal) &#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PoidsTotal&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PoidsTotal) &#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IdInterneDocument_DevisLie&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IdInterneDocument_DevisLie) &#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IdInterneDocument_CommandeLie&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IdInterneDocument_CommandeLie)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IdInterneDocument_Facture&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IdInterneDocument_Facture)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IdInterneDocument_BL&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IdInterneDocument_BL)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInerneTiers&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTiers) &#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
					//C&amp;apos;est un nouveau, chercher le code tiers généré par EBP&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sValTemp = sdReqTemp.Id&#13;
							SINON&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Supplier WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot;&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							HLibèreRequête(sdReqTemp)&#13;
						FIN&#13;
					SINON&#13;
						sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Customer&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
							sValTemp =sRetRecherche&#13;
						SINON&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Supplier&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
								sValTemp =sRetRecherche&#13;
							FIN&#13;
							&#13;
						FIN&#13;
					FIN&#13;
				FIN	&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//CodeTiers&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeTiers)&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
					//C&amp;apos;est un nouveau, chercher le code tiers généré par EBP&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
						//VersPressePapier(sMaReq)&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sValTemp = sdReqTemp.Id&#13;
							SINON&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Supplier WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot;&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							HLibèreRequête(sdReqTemp)&#13;
						FIN&#13;
					SINON&#13;
						sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Customer&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
							sValTemp =sRetRecherche&#13;
						SINON&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Supplier&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
								sValTemp =sRetRecherche&#13;
							FIN&#13;
							&#13;
						FIN&#13;
					FIN&#13;
				FIN	&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//FacturationNom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FacturationNom) &#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
			&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Contact_Tel&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Tel) &#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Adresse1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Adresse1)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Contact_Mail&#13;
				sValTemp	= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Mail),&amp;quot;;&amp;quot;,&amp;quot;,&amp;quot;) &#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Adresse2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Adresse2)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Adresse3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Adresse3)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Facturation_CP&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_CP)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Ville&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Ville)&#13;
				SI sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;...&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_IDInternePays&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_IDInternePays)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				SI sValTemp = &amp;quot;-1&amp;quot; OU sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;FR&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Contact_Civilite&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Civilite)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Contact_Nom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Nom)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Contact_Prenom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Prenom)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Contact_Tel&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Tel)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Contact_Mail&#13;
				sValTemp	= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Mail),&amp;quot;;&amp;quot;,&amp;quot;,&amp;quot;)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//LivraisonNom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.LivraisonNom)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Adresse1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Adresse1)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Adresse2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Adresse2)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Adresse3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Adresse3)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_CP&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_CP)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Ville&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Ville)&#13;
				SI sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;...&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_IDInternePays&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_IDInternePays)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				SI sValTemp = &amp;quot;-1&amp;quot; OU sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;FR&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Contact_Civilite&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Civilite)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Contact_Nom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Nom)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_contact_Prenom&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_contact_Prenom)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterneModeReglement&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneModeReglement)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//DateValidite&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateValidite)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) &#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//DateLivraison&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateLivraison)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Document_Date) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateLivraison) &amp;lt; XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Document_Date) ALORS&#13;
						sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Document_Date)&#13;
					FIN&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) &#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//EtatLivraison&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.EtatLivraison)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//SoldeDu&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.SoldeDu)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantBrutHT&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantBrutHT)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PrixRevient&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PrixRevient)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PrcRemisePied&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PrcRemisePied)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantNetHT&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantNetHT)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PortFraisHT&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PortFraisHT)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PortTauxTva&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PortTauxTva)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantNetNetHT&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantNetNetHT)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//EcoTaxeHT&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.EcoTaxeHT)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PortFraisTTC&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PortFraisTTC)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//EcoTaxeTTC&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.EcoTaxeTTC)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantNetNetTTC&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantNetNetTTC)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantAcompte&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantAcompte)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//PrcEscompte&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.PrcEscompte)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantEscompte&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantEscompte)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NetAPayer&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NetAPayer)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NombreColis&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NombreColis)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterneCollaborateur&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneCollaborateur)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Signature&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Signature)&#13;
				//---------Nouvelle methode, sauvegarde de l&amp;apos;image en fichier&#13;
				IMG_Temp		= &amp;quot;&amp;quot;&#13;
&#13;
				SI DocXMLSource.SyncNuxiDev.Enregistrement.Signature &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS IMG_Temp		= dChargeImage(Décode(DocXMLSource.SyncNuxiDev.Enregistrement.Signature,encodeBASE64SansRC))&#13;
				sValTemp		= sDossierImages + &amp;quot;Doc_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
				SI sDossierImages &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
					SI fFichierExiste(sValTemp) _OU_ dSauveImageJPEG(IMG_Temp,sValTemp)  ALORS &#13;
						&#13;
						SELON Majuscule(PhotoFormat)&#13;
							CAS &amp;quot;LIEN&amp;quot;&#13;
								sValTemp =  sDossierImages + &amp;quot;Doc_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
							CAS &amp;quot;NOM&amp;quot;&#13;
								sValTemp =   &amp;quot;Doc_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
							CAS &amp;quot;IMAGE&amp;quot;&#13;
								&#13;
							AUTRE CAS&#13;
								sValTemp =  sDossierImages + &amp;quot;Doc_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
						FIN&#13;
					SINON &#13;
						sValTemp = &amp;quot;&amp;quot;&#13;
					FIN&#13;
				SINON&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NomSignature&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomSignature)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Note&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
				SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
					sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
					sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
				sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
				sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				&#13;
				&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NDChampsSpec&#13;
				sValTemp	= &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterneAffaire&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneAffaire)&#13;
				SI sValTemp = &amp;quot;&amp;quot; ALORS&#13;
					sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Affaire)&#13;
				FIN&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Document_Date&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Document_Date)&#13;
				SI DateHeureValide(sValTemp) ALORS&#13;
					dhDateHeureTemp	= sValTemp&#13;
					sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) &#13;
				SINON	&#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN  &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NomTiers&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomTiers)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				SI sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;--VIDE--&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//NumDocOrigine&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NumDocOrigine)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Etape&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Etape)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Livraison_Pays&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Pays)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; OU sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;FR&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation_Pays&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Pays)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; OU sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;FR&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libelle&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Status&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Status)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS &#13;
					sValTemp = &amp;quot;&amp;quot;&#13;
				FIN&#13;
				&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInerneTVA1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTVA1)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInerneTVA2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTVA2)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInerneTVA3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTVA3)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInerneTVA4&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTVA4)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInerneTVA5&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInerneTVA5)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//TauxTVA1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TauxTVA1)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//TauxTVA2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TauxTVA2)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//TauxTVA3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TauxTVA3)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//TauxTVA4&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TauxTVA4)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//TauxTVA5&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TauxTVA5)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantTVA1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantTVA1)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantTVA2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantTVA2)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantTVA3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantTVA3)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantTVA4&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantTVA4)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantTVA5&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantTVA5)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BaseHT1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BaseHT1)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BaseHT2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BaseHT2)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BaseHT3&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BaseHT3)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BaseHT4&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BaseHT4)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BaseHT5&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.BaseHT5)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//MontantRemisePied&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.MontantRemisePied)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IDInterneTVA_Port&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneTVA_Port)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//CompteurCode&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CompteurCode)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				&#13;
				//IDInterne_Incident&#13;
				SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; 0 ALORS &#13;
					//NDB&#13;
					sValTemp	=&amp;quot;&amp;quot;&#13;
				SINON&#13;
					//EBP Sav&#13;
					sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Incident)&#13;
				FIN&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//iDInterne_Contrat&#13;
				SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; 0 ALORS &#13;
					//NDB&#13;
					sValTemp	=&amp;quot;&amp;quot;&#13;
				SINON&#13;
					//EBP Sav&#13;
					sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.iDInterne_Contrat)&#13;
				FIN&#13;
				&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Photo de 1 à 3&#13;
				nNbTemp		= DocXMLSource.SyncNuxiDev.Enregistrement.Images.Image..Occurrence&#13;
				POUR nImg = 1 À 3&#13;
					sValTemp =&amp;quot;&amp;quot;&#13;
					SI nImg &amp;lt;= nNbTemp ALORS&#13;
						sValTemp = DocXMLSource.SyncNuxiDev.Enregistrement.Images.Image[nImg].Photo&#13;
						SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
							IMG_Temp			= &amp;quot;&amp;quot;&#13;
							IMG_Temp			= Décode(sValTemp,encodeBASE64SansRC)&#13;
							sValTemp			= sDossierImages + DocXMLSource.SyncNuxiDev.Enregistrement.TypeDocument + &amp;quot;_&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code) + &amp;quot;_Photo&amp;quot; + nImg + &amp;quot;.jpg&amp;quot;&#13;
							SI sDossierImages &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
								SI fFichierExiste(sValTemp) _OU_ dSauveImageJPEG(IMG_Temp,sValTemp)  ALORS &#13;
									&#13;
									SELON Majuscule(PhotoFormat)&#13;
										CAS &amp;quot;LIEN&amp;quot;&#13;
											sValTemp =  sDossierImages + DocXMLSource.SyncNuxiDev.Enregistrement.TypeDocument + &amp;quot;_&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code) + &amp;quot;_Photo&amp;quot; + nImg + &amp;quot;.jpg&amp;quot;&#13;
										CAS &amp;quot;NOM&amp;quot;&#13;
											sValTemp =  DocXMLSource.SyncNuxiDev.Enregistrement.TypeDocument + &amp;quot;_&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code) + &amp;quot;_Photo&amp;quot; + nImg + &amp;quot;.jpg&amp;quot;&#13;
										CAS &amp;quot;IMAGE&amp;quot;&#13;
											&#13;
										AUTRE CAS&#13;
											sValTemp =  sDossierImages + DocXMLSource.SyncNuxiDev.Enregistrement.TypeDocument + &amp;quot;_&amp;quot; + XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code) + &amp;quot;_Photo&amp;quot; + nImg + &amp;quot;.jpg&amp;quot;&#13;
									FIN&#13;
								SINON&#13;
									sValTemp = &amp;quot;&amp;quot;&#13;
								FIN&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
					SINON&#13;
						sValTemp = &amp;quot;&amp;quot;&#13;
					FIN&#13;
					sEnregCSV = sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				FIN&#13;
				&#13;
				//FacturationCivilite&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Civilite)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				//LivraisonCivilite&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Civilite)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				//Facturation_Contact_GSM&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_GSM)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				//Livraison_Contact_GSM&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_GSM)&#13;
				//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
				sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Acompte - Code moyen de paiement;&#13;
				sValTemp	=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneMoyenPaiementAcpte)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Acompte - Date de règlement;&#13;
				sValTemp	=  &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Code du projet&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Chantier)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Document - Code Affaire&#13;
				sValTemp	=   XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Affaire)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Document - Code Chantier&#13;
				sValTemp	=   XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Chantier)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				//Numéro d&amp;apos;engagement&#13;
				sValTemp	=   XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NumEngagement)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
				&#13;
				&#13;
				&#13;
				sEnregCSVA	= sEnregCSV&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				IlMax		= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
				&#13;
				POUR L = 1 À IlMax&#13;
					&#13;
					SI (DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Composant = &amp;quot;1&amp;quot; OU DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Lie = &amp;quot;1&amp;quot;) ET DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_ValoriserLieCompose = &amp;quot;0&amp;quot; ALORS&#13;
						NePasValoriserLeSousJacent = Vrai&#13;
					SINON&#13;
						NePasValoriserLeSousJacent = Faux&#13;
					FIN&#13;
					&#13;
					&#13;
					SI  DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_NePasRemonterCetteLigne &amp;lt;&amp;gt; &amp;quot;1&amp;quot; ALORS  &#13;
						sEnregCSVB	= &amp;quot;&amp;quot;&#13;
						//Ligne_DateCreation&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_DateCreation)&#13;
						SI DateHeureValide(sValTemp) ALORS&#13;
							dhDateHeureTemp	= sValTemp&#13;
							sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
						SINON	&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN  &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_DateModification&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_DateModification) &#13;
						SI DateHeureValide(sValTemp) ALORS&#13;
							dhDateHeureTemp	= sValTemp&#13;
							sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
						SINON	&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN   &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Code&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Code)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_RefNiveauHierarchie&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_RefNiveauHierarchie)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_IDInterne&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterne)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Designation&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Designation)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						//correction du crlf ios qui n&amp;apos;est que lf&#13;
						sValTemp	= Remplace(sValTemp,RC,&amp;quot;*RC*&amp;quot; ) &#13;
						sValTemp	= Remplace(sValTemp,Caract(13),&amp;quot;&amp;quot; ) &#13;
						sValTemp	= Remplace(sValTemp,&amp;quot;*RC*&amp;quot;,RC)&#13;
						&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_idInterneDocument&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_idInterneDocument)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_NumeroLigne&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_NumeroLigne)&#13;
						&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_CodeArticle&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_CodeArticle)&#13;
						SI sValTemp = &amp;quot;&amp;quot; ET Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Quantite)) = 0 ET Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PrixVenteBrutHT)) = 0 ALORS&#13;
							sTypeLigne = &amp;quot;4&amp;quot; //&amp;quot;9&amp;quot;&#13;
						SINON SI sValTemp = &amp;quot;&amp;quot; ALORS&#13;
							sTypeLigne = &amp;quot;2&amp;quot;&#13;
						SINON&#13;
							SI PAS bEBPSaaS ALORS &#13;
								SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
									sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [Item] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
									SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
										HLitPremier(sdReqTemp)&#13;
										SI PAS HEnDehors(sdReqTemp) ALORS&#13;
											sValTemp = sdReqTemp.Id&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
								&#13;
								sMaReqTemp = &amp;quot;SELECT StandardText.Id FROM StandardText WHERE id = &amp;apos;&amp;quot; + sValTemp +&amp;quot;&amp;apos;&amp;quot;&#13;
								&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sTypeLigne = &amp;quot;4&amp;quot;&#13;
									SINON&#13;
										sTypeLigne = &amp;quot;2&amp;quot;&#13;
									FIN&#13;
								SINON&#13;
									sTypeLigne = &amp;quot;2&amp;quot;&#13;
								FIN&#13;
							SINON&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Item&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;id&amp;quot;)&#13;
								SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
									sValTemp=sRetRecherche&#13;
								FIN&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;StandardText&amp;quot;,&amp;quot;id&amp;quot;,&amp;quot;id&amp;quot;)&#13;
								SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
									sTypeLigne = &amp;quot;2&amp;quot;&#13;
								SINON&#13;
									sTypeLigne = &amp;quot;4&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_IDInerneArticle&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInerneArticle)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Quantite&#13;
						SI sTypeLigne = &amp;quot;4&amp;quot; OU sTypeLigne = &amp;quot;9&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
							&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Quantite)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_IDInerneUnite&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInerneUnite)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp			= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB			= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_SerieLotNumero&#13;
						sValTemp			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_SerieLotNumero)&#13;
						sValTemp			= Remplace(sValTemp,&amp;quot;¤&amp;quot;,&amp;quot;|&amp;quot;)&#13;
						sStrTempLotDate		= &amp;quot;&amp;quot;&#13;
						sStrTempLotNumero	= &amp;quot;&amp;quot;&#13;
						sStrTempLotQuantité	= &amp;quot;&amp;quot;&#13;
						&#13;
						STRTemp				= sValTemp&#13;
						&#13;
						TableauSupprimeTout(tabTempLotNumero)&#13;
						ChaîneVersTableau(STRTemp,tabTempLotNumero,&amp;quot;|&amp;quot;)&#13;
						nNbSerieLotValide	= tabTempLotNumero..Occurrence&#13;
						&#13;
						&#13;
						&#13;
						STRTemp				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_SerieLotDateLimite)&#13;
						STRTemp				= Remplace(STRTemp,&amp;quot;¤&amp;quot;,&amp;quot;|&amp;quot;)&#13;
						TableauSupprimeTout(tabTempLotDate)&#13;
						ChaîneVersTableau(STRTemp,tabTempLotDate,&amp;quot;|&amp;quot;)&#13;
						SI tabTempLotDate..Occurrence &amp;lt; nNbSerieLotValide ALORS nNbSerieLotValide = tabTempLotDate..Occurrence&#13;
						&#13;
						&#13;
						STRTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_SerieLotQuantite)&#13;
						STRTemp	= Remplace(STRTemp,&amp;quot;¤&amp;quot;,&amp;quot;|&amp;quot;)&#13;
						TableauSupprimeTout(tabTempLotQuantité)&#13;
						ChaîneVersTableau(STRTemp,tabTempLotQuantité,&amp;quot;|&amp;quot;)&#13;
						SI tabTempLotQuantité..Occurrence &amp;lt; nNbSerieLotValide ALORS nNbSerieLotValide = tabTempLotQuantité..Occurrence&#13;
						&#13;
						POUR xi = 1 À nNbSerieLotValide&#13;
							SI tabTempLotDate[xi] &amp;lt;&amp;gt; &amp;quot;&amp;quot; OU tabTempLotNumero[xi] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS // ou tabTempLotQuantité[xi] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
								SI DateValide(tabTempLotDate[xi]) ALORS&#13;
									tabTempLotDate[xi] = DateVersChaîne(tabTempLotDate[xi],&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
								FIN&#13;
								sStrTempLotDate		= sStrTempLotDate + tabTempLotDate[xi] + &amp;quot;¤&amp;quot;&#13;
								sStrTempLotNumero	= sStrTempLotNumero + tabTempLotNumero[xi] + &amp;quot;¤&amp;quot;&#13;
								sStrTempLotQuantité	= sStrTempLotQuantité + Remplace(tabTempLotQuantité[xi],&amp;quot;.&amp;quot;,&amp;quot;,&amp;quot;) + &amp;quot;¤&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
						//Supprimer le ¤ de fin&#13;
						SI Taille(sStrTempLotDate) &amp;gt; 0 ALORS sStrTempLotDate = Gauche(sStrTempLotDate,Taille(sStrTempLotDate)-1)&#13;
						SI Taille(sStrTempLotNumero) &amp;gt; 0 ALORS sStrTempLotNumero = Gauche(sStrTempLotNumero,Taille(sStrTempLotNumero)-1)&#13;
						SI Taille(sStrTempLotQuantité) &amp;gt; 0 ALORS sStrTempLotQuantité = Gauche(sStrTempLotQuantité,Taille(sStrTempLotQuantité)-1)	&#13;
						&#13;
						sValTemp	=  sStrTempLotNumero + Caract(34) + &amp;quot;;&amp;quot; + Caract(34) + sStrTempLotDate + Caract(34) + &amp;quot;;&amp;quot; + Caract(34) + sStrTempLotQuantité  &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_VolumeTotal&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_VolumeTotal)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_PoidsTotal&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PoidsTotal)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_PrixAchat&#13;
						&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PrixAchat)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_PrixVenteBrutHT&#13;
						SI NePasValoriserLeSousJacent = Vrai OU sTypeLigne = &amp;quot;4&amp;quot; OU sTypeLigne = &amp;quot;9&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PrixVenteBrutHT)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_PrcRemise&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PrcRemise)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_PrixRevient&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PrixRevient)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_MontantRemise&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantRemise)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_TauxTVA&#13;
						SI sTypeLigne = &amp;quot;4&amp;quot; OU sTypeLigne = &amp;quot;9&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_TauxTVA)&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_MontantTva&#13;
						SI sTypeLigne = &amp;quot;4&amp;quot; OU sTypeLigne = &amp;quot;9&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
							&#13;
						SINON SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantTva)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_MontantEcoTaxeHT&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantEcoTaxeHT)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_MontantEcoTaxeTTC&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantEcoTaxeTTC)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_QuantiteCommandee&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_QuantiteCommandee)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_QuantiteLIvree&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_QuantiteLIvree)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Reliquat&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Reliquat)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_IDInerneUnite_Volume&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInerneUnite_Volume)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_IDInerneUnite_Poids&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInerneUnite_Poids)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_MontantNetHT&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantNetHT)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Composant&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Composant)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Lie&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Lie )&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_RefNiveauPere&#13;
						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Lie ) = &amp;quot;1&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_RefNiveauPere)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_IDInterne_Affaire&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterne_Affaire)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_ValoriserLieCompose&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_ValoriserLieCompose)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_MontantNetTTC&#13;
						SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantNetTTC)&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_idinterneTVA&#13;
						SI sTypeLigne = &amp;quot;4&amp;quot; OU sTypeLigne = &amp;quot;9&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON SI NePasValoriserLeSousJacent = Vrai ALORS&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_idinterneTVA)&#13;
						FIN&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_PoidsUnitaire&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_PoidsUnitaire)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_QuantifierLieCompose&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_QuantifierLieCompose)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_NombreDeColis&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_NombreDeColis)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne_Niveau&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Niveau)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Doc_ForcerCode&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						SI Gauche(CodeDocTemp,3) &amp;lt;&amp;gt; &amp;quot;XX_&amp;quot; ALORS&#13;
							CodeDocForcer		= &amp;quot;1&amp;quot;&#13;
							CodeDocPrefixeTemp	= &amp;quot;&amp;quot;&#13;
							CodeDocSuffixeTemp	= &amp;quot;&amp;quot;&#13;
							POUR X = 1 À Taille(CodeDocTemp)&#13;
								SI Milieu(CodeDocTemp,X,1) &amp;gt;= &amp;quot;0&amp;quot; ET Milieu(CodeDocTemp,X,1) &amp;lt;= &amp;quot;9&amp;quot; ALORS&#13;
									CodeDocSuffixeTemp = CodeDocSuffixeTemp + Milieu(CodeDocTemp,X,1)&#13;
								SINON&#13;
									CodeDocPrefixeTemp = CodeDocPrefixeTemp + Milieu(CodeDocTemp,X,1)&#13;
								FIN&#13;
								&#13;
							FIN&#13;
							sValTemp = CodeDocPrefixeTemp&#13;
						SINON&#13;
							CodeDocForcer		= &amp;quot;0&amp;quot;&#13;
							CodeDocPrefixeTemp	= &amp;quot;&amp;quot;&#13;
							CodeDocSuffixeTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sValTemp	= CodeDocForcer&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Doc_PrefixeNumero&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						SI Gauche(CodeDocTemp,3) &amp;lt;&amp;gt; &amp;quot;XX_&amp;quot; ALORS&#13;
							CodeDocForcer		= &amp;quot;1&amp;quot;&#13;
							CodeDocPrefixeTemp	= &amp;quot;&amp;quot;&#13;
							CodeDocSuffixeTemp	= &amp;quot;&amp;quot;&#13;
							POUR X = 1 À Taille(CodeDocTemp)&#13;
								SI Milieu(CodeDocTemp,X,1) &amp;gt;= &amp;quot;0&amp;quot; ET Milieu(CodeDocTemp,X,1) &amp;lt;= &amp;quot;9&amp;quot; ALORS&#13;
									CodeDocSuffixeTemp = CodeDocSuffixeTemp + Milieu(CodeDocTemp,X,1)&#13;
								SINON&#13;
									CodeDocPrefixeTemp = CodeDocPrefixeTemp + Milieu(CodeDocTemp,X,1)&#13;
								FIN&#13;
								&#13;
							FIN&#13;
							sValTemp = CodeDocPrefixeTemp&#13;
						SINON&#13;
							CodeDocForcer		= &amp;quot;0&amp;quot;&#13;
							CodeDocPrefixeTemp	= &amp;quot;&amp;quot;&#13;
							CodeDocSuffixeTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Doc_SuffixeNumero&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						SI Gauche(CodeDocTemp,3) &amp;lt;&amp;gt; &amp;quot;XX_&amp;quot; ALORS&#13;
							CodeDocForcer		= &amp;quot;1&amp;quot;&#13;
							CodeDocPrefixeTemp	= &amp;quot;&amp;quot;&#13;
							CodeDocSuffixeTemp	= &amp;quot;&amp;quot;&#13;
							POUR X = 1 À Taille(CodeDocTemp)&#13;
								SI Milieu(CodeDocTemp,X,1) &amp;gt;= &amp;quot;0&amp;quot; ET Milieu(CodeDocTemp,X,1) &amp;lt;= &amp;quot;9&amp;quot; ALORS&#13;
									CodeDocSuffixeTemp = CodeDocSuffixeTemp + Milieu(CodeDocTemp,X,1)&#13;
								SINON&#13;
									CodeDocPrefixeTemp = CodeDocPrefixeTemp + Milieu(CodeDocTemp,X,1)&#13;
								FIN&#13;
								&#13;
							FIN&#13;
							sValTemp = CodeDocSuffixeTemp&#13;
						SINON&#13;
							CodeDocForcer		= &amp;quot;0&amp;quot;&#13;
							CodeDocPrefixeTemp	= &amp;quot;&amp;quot;&#13;
							CodeDocSuffixeTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Vrai&#13;
						sValTemp	= &amp;quot;1&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Faux&#13;
						sValTemp	= &amp;quot;0&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//TypeLigne&#13;
						sValTemp	= sTypeLigne&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						&#13;
						//Ligne_IDInterneOrigine&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterneOrigine)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						&#13;
						//Ligne_IDInterneParent&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterneParent)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterneOrigine) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterneOrigine)&#13;
							SI PAS bEBPSaaS ALORS &#13;
								SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
								&#13;
									CAS &amp;quot;documentdevis&amp;quot;, &amp;quot;documentcde&amp;quot;, &amp;quot;documentfact&amp;quot;, &amp;quot;documentbl&amp;quot;, &amp;quot;documentavoir&amp;quot;&#13;
										sMaReqTemp = &amp;quot;SELECT SaleDocumentLine.Id, SaleDocumentLine.DocumentId, SaleDocumentLine.Quantity FROM SaleDocumentLine WHERE SaleDocumentLine.Id = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot;&#13;
										&#13;
									CAS &amp;quot;documentcdea&amp;quot;, &amp;quot;documentfacta&amp;quot;, &amp;quot;documentbra&amp;quot;,&amp;quot;documentdempa&amp;quot;&#13;
										sMaReqTemp = &amp;quot;SELECT PurchaseDocumentLine.Id, PurchaseDocumentLine.DocumentId, PurchaseDocumentLine.Quantity FROM PurchaseDocumentLine WHERE PurchaseDocumentLine.Id = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot;&#13;
								FIN&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										//Ligne_QuantitOrigine&#13;
										sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Quantite)&#13;
										sValTemp	= Remplace(sValTemp,&amp;quot;.&amp;quot;,&amp;quot;,&amp;quot;)&#13;
										//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
										sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
										sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
										&#13;
										//Document_IDInterneOrigine&#13;
										sValTemp	= sdReqTemp.DocumentId&#13;
										//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
										sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;)  &#13;
										sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
									SINON&#13;
										//Ligne_QuantitOrigine&#13;
										sValTemp	= &amp;quot;&amp;quot;&#13;
										sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
										&#13;
										//Document_IDInterneOrigine&#13;
										sValTemp	= &amp;quot;&amp;quot;&#13;
										sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
									FIN&#13;
								SINON&#13;
									//Ligne_QuantitOrigine&#13;
									sValTemp	= &amp;quot;&amp;quot;&#13;
									sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
									&#13;
									//Document_IDInterneOrigine&#13;
									sValTemp	= &amp;quot;&amp;quot;&#13;
									sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
								FIN&#13;
							SINON&#13;
								SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
									CAS &amp;quot;documentdevis&amp;quot;, &amp;quot;documentcde&amp;quot;, &amp;quot;documentfact&amp;quot;, &amp;quot;documentbl&amp;quot;, &amp;quot;documentavoir&amp;quot;&#13;
										sRetRecherche = Import_RechercheDansNotes(sURLEBP,sValTemp,&amp;quot;SaleDocumentLine&amp;quot;,&amp;quot;Id&amp;quot;,&amp;quot;DocumentId&amp;quot;,&amp;quot;DocumentId&amp;quot;)&#13;
									CAS &amp;quot;documentcdea&amp;quot;, &amp;quot;documentfacta&amp;quot;, &amp;quot;documentbra&amp;quot;,&amp;quot;documentdempa&amp;quot;&#13;
										sRetRecherche = Import_RechercheDansNotes(sURLEBP,sValTemp,&amp;quot;PurchaseDocumentLine&amp;quot;,&amp;quot;Id&amp;quot;,&amp;quot;DocumentId&amp;quot;,&amp;quot;DocumentId&amp;quot;)&#13;
								FIN&#13;
								SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
									//Ligne_QuantitOrigine&#13;
									sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Quantite)&#13;
									sValTemp	= Remplace(sValTemp,&amp;quot;.&amp;quot;,&amp;quot;,&amp;quot;)&#13;
									//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
									sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
									sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
									&#13;
									//Document_IDInterneOrigine&#13;
									sValTemp	= sRetRecherche&#13;
									//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
									sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;)  &#13;
									sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
									&#13;
								SINON&#13;
									//Ligne_QuantitOrigine&#13;
									sValTemp	= &amp;quot;&amp;quot;&#13;
									sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
									&#13;
									//Document_IDInterneOrigine&#13;
									sValTemp	= &amp;quot;&amp;quot;&#13;
									sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
								FIN&#13;
								&#13;
							FIN&#13;
							&#13;
						SINON&#13;
							//Ligne_QuantitOrigine&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
							&#13;
							//Document_IDInterneOrigine&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						FIN&#13;
						//ImportFromNuxilog&#13;
						sValTemp	= &amp;quot;1&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						//Document - Import Nuxilog;&#13;
						sValTemp	= &amp;quot;1&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						// Civilité&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Civilite)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						//ID Tablette&#13;
						sValTemp	=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Device)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Code suivi incident&#13;
						sValTemp	=  &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Code intervenant;&#13;
						sValTemp	=  &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Code commercial/collaborateur;&#13;
						sValTemp	=  &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Contrat de maintenance/Analyse;&#13;
						sValTemp	=  &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Code affaire;&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ligne_Code_Affaire)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - IDInterne Chantier;&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ligne_IDInterne_Chantier)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Code Chantier;&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ligne_Code_Chantier)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Transporteur;&#13;
						//													sValTemp	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Transporteur),encodeBASE64)&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Transporteur)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						&#13;
						bTrouvéTemp	= Faux													&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_IDInterneOrigine)&#13;
						SI PAS bEBPSaaS ALORS&#13;
							SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
								&#13;
								SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
									CAS &amp;quot;documentdevis&amp;quot;, &amp;quot;documentcde&amp;quot;, &amp;quot;documentfact&amp;quot;, &amp;quot;documentbl&amp;quot;, &amp;quot;documentavoir&amp;quot;&#13;
										sMaReqTemp = &amp;quot;SELECT SaleDocumentLine.CurrencySalePriceVatExcluded, SaleDocument.CurrencyId, SaleDocument.CurrencyConversionRate FROM SaleDocumentLine, SaleDocument  WHERE SaleDocument.Id  = SaleDocumentLine.DocumentId AND SaleDocumentLine.Id = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot;&#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI PAS HEnDehors(sdReqTemp) ALORS		&#13;
												bTrouvéTemp = Vrai&#13;
												&#13;
											FIN&#13;
											&#13;
										FIN		&#13;
										&#13;
								FIN&#13;
								&#13;
							SINON&#13;
								//chercher les infos sur une autre ligne du doc&#13;
								POUR nIrec = 1 À IlMax&#13;
									SI bTrouvéTemp = Faux ALORS&#13;
										&#13;
										sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[nIrec].Ligne_IDInterneOrigine)&#13;
										SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
											sMaReqTemp = &amp;quot;SELECT &amp;apos;0&amp;apos; AS CurrencySalePriceVatExcluded, SaleDocument.CurrencyId, SaleDocument.CurrencyConversionRate FROM SaleDocumentLine, SaleDocument  WHERE SaleDocument.Id = SaleDocumentLine.DocumentId AND SaleDocumentLine.Id = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot;&#13;
											SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
												HLitPremier(sdReqTemp)&#13;
												SI PAS HEnDehors(sdReqTemp) ALORS		&#13;
													bTrouvéTemp = Vrai&#13;
												FIN&#13;
											FIN&#13;
										FIN&#13;
										&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						SINON&#13;
							//Pas de gestion multi devise en SAAS&#13;
							//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&#13;
						FIN&#13;
						//													Ligne - PV HT en devise&#13;
						SI  PAS bEBPSaaS _ET_ bTrouvéTemp = Vrai _ET_ sdReqTemp.CurrencyId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							SI sdReqTemp.CurrencySalePriceVatExcluded &amp;lt;&amp;gt; 0 ALORS&#13;
								sValTemp = sdReqTemp.CurrencySalePriceVatExcluded&#13;
							SINON SI Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Quantite)) &amp;lt;&amp;gt; 0 ALORS&#13;
								sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantNetHT)&#13;
								sValTemp	= Arrondi((sdReqTemp.CurrencyConversionRate * Val(sValTemp)) / Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_Quantite)),2)&#13;
							SINON&#13;
								sValTemp = 0&#13;
							FIN&#13;
							&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne - Montant Net HT en devise&#13;
						SI  PAS bEBPSaaS _ET_ bTrouvéTemp = Vrai _ET_ sdReqTemp.CurrencyId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_MontantNetHT)&#13;
							sValTemp	= Arrondi(sdReqTemp.CurrencyConversionRate * Val(sValTemp),2)&#13;
							&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//													Document - Cours de la devise&#13;
						SI  PAS bEBPSaaS _ET_ bTrouvéTemp = Vrai _ET_ sdReqTemp.CurrencyId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sValTemp = sdReqTemp.CurrencyConversionRate&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//													Document - Code ISO devise&#13;
						SI  PAS bEBPSaaS _ET_ bTrouvéTemp = Vrai _ET_ sdReqTemp.CurrencyId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sValTemp = sdReqTemp.CurrencyId&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Document - Devise appliquée dans les documents&#13;
						SI  PAS bEBPSaaS _ET_ bTrouvéTemp = Vrai _ET_ sdReqTemp.CurrencyId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;L&amp;quot;&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSVB		= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Document - Série de documents	&#13;
						sValTemp = SérieDocument&#13;
						sEnregCSVB		= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
									&#13;
						&#13;
						&#13;
						&#13;
						sEnregCSV		= sEnregCSV + sEnregCSVA + sEnregCSVB &#13;
						&#13;
						&#13;
						&#13;
						&#13;
						&#13;
						&#13;
						&#13;
						//ChampPerso&#13;
						&#13;
						//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
						//&#13;
						&#13;
						&#13;
						//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
						//Affectation des valeurs des PDF dynamiques&#13;
						sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
						POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
							sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
							sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
							nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;DOC&amp;quot;, Majuscule(sNomAlias))&#13;
							SI nIChamp &amp;gt; 0 ALORS&#13;
								gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
							FIN&#13;
						FIN&#13;
						//Affectation des valeurs des Pages perso ENTETE&#13;
						sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
						XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
						SI PAS ErreurDétectée ALORS&#13;
							nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
							POUR x = 1 À nNbChamps&#13;
								sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
								sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
								nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;DOC&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
						POUR x = 1 À nNbChamps&#13;
							SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;DOC&amp;quot; ALORS&#13;
								sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
								SI EstUnNombre(sValTemp) = Vrai ALORS&#13;
									sEnregCSV		= sEnregCSV +  sValTemp     + &amp;quot;;&amp;quot;&#13;
								SINON&#13;
									sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						//Affectation des valeurs des Pages perso LIGNE&#13;
						sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[L].Ligne_FenSpecifique),encodeBASE64)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
						XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
						SI PAS ErreurDétectée ALORS&#13;
							nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
							POUR x = 1 À nNbChamps&#13;
								sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
								sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
								nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;LIG&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
						POUR x = 1 À nNbChamps&#13;
							SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;LIG&amp;quot; ALORS&#13;
								sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
								SI EstUnNombre(sValTemp) = Vrai ALORS&#13;
									sEnregCSV		= sEnregCSV +  sValTemp     + &amp;quot;;&amp;quot;&#13;
								SINON&#13;
									sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
								&#13;
							FIN&#13;
						FIN&#13;
						&#13;
						//Fin Mappages des champsperso ---------------------------------------------------------&#13;
						&#13;
						&#13;
						&#13;
						&#13;
						&#13;
						//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
						sEnregCSV = &amp;quot;&amp;quot;&#13;
						&#13;
					FIN&#13;
				FIN	&#13;
				//&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
				&#13;
			FIN&#13;
			&#13;
		FIN&#13;
	FIN	&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
		&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Documents] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import des [Documents]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Documents]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;documentdevis&amp;quot;, &amp;quot;documentcde&amp;quot;, &amp;quot;documentfact&amp;quot;, &amp;quot;documentbl&amp;quot;, &amp;quot;documentavoir&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [SaleDocument] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
					CAS &amp;quot;documentcdea&amp;quot;, &amp;quot;documentfacta&amp;quot;, &amp;quot;documentbra&amp;quot;,&amp;quot;documentdempa&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [PurchaseDocument] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;documentdevis&amp;quot;, &amp;quot;documentcde&amp;quot;, &amp;quot;documentfact&amp;quot;, &amp;quot;documentbl&amp;quot;, &amp;quot;documentavoir&amp;quot;&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;SaleDocument&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						CAS &amp;quot;documentcdea&amp;quot;, &amp;quot;documentfacta&amp;quot;, &amp;quot;documentbra&amp;quot;,&amp;quot;documentdempa&amp;quot;&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;PurchaseDocument&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					FIN&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
		&#13;
	FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;		&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
		PROCÉDURE INTERNE EstUnNombre(sMaChaine est une chaîne)&#13;
			&#13;
		&#13;
		// Déclaration de l&amp;apos;expression régulière&#13;
		// Elle accepte les nombres négatifs, le point ou la virgule comme séparateur décimal&#13;
		sRegEx		est une chaîne	= &amp;quot;^-?[0-9]+([,\.][0-9]+)?$&amp;quot;&#13;
		bOkNum est un booléen&#13;
		&#13;
		// Vérification si la chaîne correspond à l&amp;apos;expression régulière&#13;
		SI RegexVérifie(sMaChaine,sRegEx) ALORS&#13;
			bOkNum = Vrai&#13;
		SINON&#13;
			bOkNum = Faux&#13;
		FIN&#13;
		&#13;
			RENVOYER(bOkNum)&#13;
			&#13;
			&#13;
		FIN&#13;
	&#13;
	&#13;
	&#13;
	</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTERVENTION</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250305083224924</Version>
      <CnxSource>1</CnxSource>
      <Requete>&#13;
//03/03/2025 11:12 ajout du fichier signature à l&amp;apos;ancienne&#13;
&#13;
tabListeTypeEnreg							 	est un tableau de 0,2 chaînes&#13;
sNomFic											est une chaîne&#13;
sNomFicLog										est une chaîne&#13;
sNomFicB										est une chaîne&#13;
sNomFicLogB										est une chaîne                                    &#13;
sNomFicC										est une chaîne&#13;
sNomFicLogC										est une chaîne&#13;
NBtraité										est un entier&#13;
AppliSDK										est une chaîne&#13;
AppliSDKB										est une chaîne&#13;
AppliSDKC										est une chaîne&#13;
sPréfixFic										est une chaîne&#13;
NbTypeEnreg										est un entier&#13;
Prems											est un booléen&#13;
PremsB											est un booléen&#13;
PremsC											est un booléen&#13;
IMG_Temp est une Image&#13;
sEnregCSV										est une chaîne&#13;
sEnregCSVB										est une chaîne&#13;
sEnregCSVC										est une chaîne&#13;
sIdentifiantsEBP								est une chaîne&#13;
InTemp											est une chaîne&#13;
sNomProfilImport								est une chaîne&#13;
sNomProfilImportb								est une chaîne&#13;
sValTemp										est une chaîne&#13;
DocXMLSource									est une xmlDocument&#13;
nIDFichier										est un entier&#13;
nIDFichierB										est un entier&#13;
nIDFichierC										est un entier&#13;
nIDFichierLog									est un entier&#13;
nIDFichierLogB									est un entier&#13;
nIDFichierLogC									est un entier&#13;
sXX_											est une chaîne&#13;
IDGuidEBP										est une chaîne&#13;
IDGuidEBPb										est une chaîne&#13;
sdReqTemp										est une Source de Données&#13;
sMaReqTemp										est une chaîne&#13;
nNbEléments										est un entier&#13;
bEBPSaaS										est un booléen&#13;
sPréfixeNomProfilImport							est une chaîne&#13;
tabIDInterneSrvTraité							est un tableau de 0,2 chaîne&#13;
StrLog											est une chaîne&#13;
sValTest										est une chaîne&#13;
IlMax											est un entier&#13;
IlMaxPlus										est un entier&#13;
sValDevice										est une chaîne&#13;
sValCodeAffaire									est une chaîne&#13;
sValCodeIncident								est une chaîne	&#13;
sNumContratMaintenance							est une chaîne&#13;
sCode_intervenant								est une chaîne&#13;
dhDateHeureDTemp								est une DateHeure&#13;
nNbTemp											est un entier&#13;
sDossierImages est une chaîne&#13;
CodeDocTemp est une chaîne&#13;
PhotoFormat est une chaîne&#13;
&#13;
sMaReq											est une chaîne&#13;
NumDocTemp										est une chaîne&#13;
sStartDateTime									est une chaîne&#13;
sEndDateTime									est une chaîne&#13;
dhDateHeureTemp									est une DateHeure&#13;
nNbImport est un entier&#13;
StrLogConcaténé	est une chaîne&#13;
&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso								est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps										est un entier&#13;
nIChamp											est un entier&#13;
XmlChampsPerso									est un xmlDocument&#13;
sValTempAnsi									est une chaîne ANSI&#13;
sNomAlias										est une chaîne&#13;
sValeurAlias									est une chaîne&#13;
//**********************************************&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sRetRecherche									est une chaîne&#13;
sURLEBP											est une chaîne&#13;
sOrdreSDK										est une chaîne&#13;
sOrdreSDKB										est une chaîne&#13;
bIsImportValide									est un booléen	= Vrai&#13;
sConditionYaml									est une chaîne&#13;
&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
&#13;
sDossierImages	= INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO&amp;quot;, XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] +&amp;quot;Images\&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
SI sDossierImages &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
	sDossierImages = ComplèteRep(sDossierImages)&#13;
	SI PAS fRépertoireExiste(sDossierImages) ALORS fRepCrée(sDossierImages)&#13;
FIN&#13;
SI  INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO_FORMAT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) = &amp;quot;&amp;quot; ALORS&#13;
	INIEcrit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO_FORMAT&amp;quot;,&amp;quot;LIEN&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
FIN&#13;
PhotoFormat = INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;PHOTO_FORMAT&amp;quot;,&amp;quot;LIEN&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
SI  INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;SERIE_DOCUMENT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) = &amp;quot;&amp;quot; ALORS&#13;
	INIEcrit(&amp;quot;CONFIG&amp;quot;, &amp;quot;SERIE_DOCUMENT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
FIN&#13;
&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
&#13;
&#13;
SI PAS bEBPSaaS ALORS &#13;
	sMaReqTemp = &amp;quot;SELECT COUNT(ID) as NbType FROM ScheduleEventType WHERE DisplayType = 1&amp;quot;&#13;
	SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
		HLitPremier(sdReqTemp)&#13;
		SI PAS HEnDehors(sdReqTemp) ALORS&#13;
			SI sdReqTemp.NbType &amp;gt; 0 ALORS&#13;
				TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;intervention&amp;quot;)&#13;
			FIN&#13;
		FIN&#13;
	SINON&#13;
		TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;intervention&amp;quot;)&#13;
	FIN&#13;
SINON&#13;
	//C&amp;apos;est un nouveau, chercher le code tiers généré par EBP&#13;
	sConditionYaml=[&#13;
		type:|CustomFilter&#13;
		column:|DisplayType&#13;
		operator:|Like&#13;
		valueType|:|string&#13;
		value:&#13;
		-|&amp;apos;1&amp;apos;&#13;
	]&#13;
	&#13;
	sConditionYaml			= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
	sConditionYaml			= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
	sRetRecherche			= Import_Recherche_ParCondition(sURLEBP,&amp;quot;ScheduleEventType&amp;quot;,&amp;quot;ID&amp;quot;,sConditionYaml)&#13;
	SI sRetRecherche&amp;gt;0 ALORS&#13;
		TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;intervention&amp;quot;)&#13;
	FIN&#13;
FIN&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;intervention&amp;quot;&#13;
							IDGuidEBP	= &amp;quot;{EE34B1F8-3D3D-4A46-8311-FCC5BBC26B5E}&amp;quot;&#13;
							IDGuidEBPb	= &amp;quot;{1BEBA5C4-660B-40EA-BF21-FB17BA70EB41}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						//Recherche profil Intervention&#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
						&#13;
						//Recherche profil Bon de Sortie&#13;
						&#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBPb,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImportb = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImportb = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImportb = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImportb = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
						&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)&#13;
						sNomProfilImportb=ProfileImport_Saas(IDGuidEBPb)&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;intervention&amp;quot;&#13;
							&#13;
							&#13;
							sEnregCSV = [&#13;
								Code;Numéro;Libellé;Début;Fin;Code intervenant;Code matériel;Durée réalisée;Code Affaire;Inclure dans le coût réalisé de l&amp;apos;analyse;Type de ligne;Notes en texte brut;Durée prévue;Cout horaire;Coût total;Etat;Type d&amp;apos;évènement;Type de document;Code document de vente;Code document d&amp;apos;achat;Identifiant de document de stock;Adresse 1;Adresse 2;Adresse 3;Adresse 4;Code postal;Ville;Département;Code Pays;Civilité (contact);Nom (contact);Prénom;Téléphone fixe;Téléphone portable;Fax;E-mail;Fonction;Saisi par;Prochain rappel;Rappel activé;Rappel;Type de durée (rappel);Code client;Code du fournisseur;Affichage Maintenance / SAV;Référence;Code modèle d&amp;apos;évènement;Temps de déplacement;Code suivi incident;Code frais de déplacement;Envoyer courrier de confirmation;Description de l&amp;apos;intervention en clair;Rapport d&amp;apos;intervention en clair;Intervention suivante à prévoir;Date de prochaine intervention;Décrémenter le compteur restant pour l&amp;apos;intervention suivante;&#13;
								Longitude;Latitude;NomSignature;Signature;Photo1;Photo2;Photo3;&#13;
								Code Contrat de maintenance;Ligne de temps - Code Affaire;Ligne de temps - Code Contrat de maintenance;Code du projet;Code du chantier;Identifiant Terminal;Vrai;Faux;&#13;
								Ligne de Temps - Code;Ligne de Temps - Numéro;L&#13;
								igne de Temps - Libellé;Ligne de Temps - Début;Ligne de Temps - Fin;Ligne de Temps - Code intervenant;Ligne de Temps - Code matériel;Ligne de Temps - Durée réalisée;Ligne de Temps - Code Affaire;Ligne de Temps - Inclure dans le coût réalisé de l&amp;apos;analyse;Ligne de Temps - Type de ligne;Ligne de Temps - Notes en texte brut;Ligne de Temps - Durée prévue;Ligne de Temps - Cout horaire;Ligne de Temps - Coût total;Ligne de Temps - Etat;Ligne de Temps - Numéro de ligne;Ligne de Temps - Voir dans le planning;Ligne de Temps - Identifiant du lot transféré à la paye;Ligne de Temps - HEUCOMP;Ligne de Temps - HEUSU10;Ligne de Temps - HEUSU25;Ligne de Temps - HEUSU25MENS;Ligne de Temps - HEUSU50;Ligne de Temps - HEUSU100;Ligne de Temps - PRIME;Ligne de Temps - PRIMEACT;Ligne de Temps - PRIMEEXACT;Ligne de Temps - CARTEORANGE;Ligne de Temps - PANIERS;Ligne de Temps - TICKETS;Ligne de Temps - Heures mensuelles;Produits client - Identifiant de produit client dans un évènement;Produits client -&#13;
								Identifiant de l&amp;apos;évènement;Produits client - Nombre d&amp;apos;heures décrémentées;Produits client - Code produit client;Produits client - Code article;Produits client - Libellé;Produits client - Série/lot;Produits client - Prise en charge (pièces);Produits client - Prise en charge (MO);Produits client - Prise en charge (déplacement)&#13;
								&#13;
								&#13;
							]	&#13;
							&#13;
							sEnregCSVB	= [&#13;
								Document - Numéro du document;Document - Date;Document - Série de documents;Document - Dépôt;Document - Notes en texte brut;Document - Notes;Document - Référence;Document - Code Contrat de maintenance;Document - Code suivi incident;Document - Identifiant de l&amp;apos;évènement;Ligne - Code article;Ligne - Description;Ligne - Description commerciale en clair;Ligne - Quantité;Ligne - Code emplacement;Ligne - Série/lot;Ligne - Date limite;Ligne - Quantité (série/lot);Ligne - Contrat de maintenance/Analyse;Ligne - Code suivi incident;Ligne - Dépôt;Ligne - Démarque inconnue;Ligne - Détériorés;Ligne - Périmé;Ligne - Vol;Ligne - Autres;Ligne - Réservé;Ligne - A facturer;Ligne - Code produit client;ID Tablette;Code Incident;Code Affaire;Document - Code du chantier;;;;;;Début Inter;Fin Inter;Libellé inter;&#13;
							]&#13;
							&#13;
							&#13;
							&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSVB =Remplace(sEnregCSVB,[RC,TAB,CRLF],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;INT&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							sEnregCSVB		= Remplace(sEnregCSVB,[RC,TAB,CRLF],&amp;quot;&amp;quot;)&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							&#13;
							sNomFic			= sPréfixFic + &amp;quot;Intervention.csv&amp;quot;&#13;
							sNomFicLog		= sPréfixFic + &amp;quot;Intervention.log&amp;quot;&#13;
							sNomFicC		= sPréfixFic + &amp;quot;Intervention_ETAT.csv&amp;quot;&#13;
							sNomFicLogC		= sPréfixFic + &amp;quot;Intervention_ETAT.log&amp;quot;&#13;
							sNomFicB		= sPréfixFic + &amp;quot;BonSortie.csv&amp;quot;&#13;
							sNomFicLogB		= sPréfixFic + &amp;quot;BonSortie.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicB)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLogB)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicC)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLogC)&#13;
							sOrdreSDK		= &amp;quot;ScheduleEvent&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK		= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLog  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							sOrdreSDKB	= &amp;quot;PickUp&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDKB	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLogB + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFicB + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDKB+&amp;quot;;&amp;quot; + sNomProfilImportb + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							&#13;
							sOrdreSDK		= &amp;quot;ScheduleEvent&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDKC		= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ sNomFicLogC  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFicC + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					sEnregCSV		= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					Prems			= Faux&#13;
					&#13;
					nIDFichierB		= fOuvre(sNomFicB ,foCréation+foEcriture)&#13;
					nIDFichierLogB	= fOuvre(sNomFicLogB ,foCréation+foEcriture)&#13;
					SI nIDFichierB &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichierB, &amp;amp;sEnregCSVB, Taille(sEnregCSVB))&#13;
					FIN&#13;
					PremsB		= Faux&#13;
					&#13;
//					nIDFichierC	= fOuvre(sNomFicC ,foCréation+foEcriture)&#13;
//					nIDFichierLogC	= fOuvre(sNomFicLogC ,foCréation+foEcriture)&#13;
//					SI nIDFichierC &amp;lt;&amp;gt; -1 ALORS&#13;
//						fEcritLigne(nIDFichierC, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
//					FIN&#13;
//					PremsC = Vrai&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot; &#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				//SI PAS bEBPSaaS ALORS &#13;
				&#13;
				sValTest		= DonneGUID(guidBrut)&#13;
				IlMax			= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
				IlMaxPlus		= IlMax //+ 1&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValDevice				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Device)&#13;
				sValCodeAffaire			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Affaire)&#13;
				sValCodeIncident		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Incident)&#13;
				sNumContratMaintenance	=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.iDInterne_Contrat)&#13;
				&#13;
				POUR iL = 1 À IlMax&#13;
					SI DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne  = &amp;quot;A&amp;quot; ALORS&#13;
						//Appareil, controler si il est sous contrat pour forcer le num contrat à l&amp;apos;entete&#13;
						SI (sNumContratMaintenance = &amp;quot;&amp;quot; OU sNumContratMaintenance = &amp;quot;-1&amp;quot;) ALORS&#13;
							SI PAS bEBPSaaS ALORS &#13;
								sMaReqTemp = [&#13;
									SELECT &#13;
									MaintenanceContract.Id&#13;
									FROM MaintenanceContractCustomerProduct , MaintenanceContract&#13;
									WHERE &#13;
									MaintenanceContractCustomerProduct.ContractId			= MaintenanceContract.Id AND&#13;
									MaintenanceContractCustomerProduct.CustomerProductId	= &amp;apos;%1&amp;apos; AND&#13;
									MaintenanceContract.StartDate &amp;lt;= GETDATE() AND&#13;
									MaintenanceContract.EndDate &amp;gt;=GETDATE() AND&#13;
									MaintenanceContract.Status = 2 &#13;
								]&#13;
								sValTest = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
								SI sValTest &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sMaReqTemp = ChaîneConstruit(sMaReqTemp,sValTest)&#13;
									SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
										HLitPremier(sdReqTemp)&#13;
										SI PAS HEnDehors(sdReqTemp) ALORS&#13;
											sNumContratMaintenance = sdReqTemp.Id&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							SINON&#13;
								sConditionYaml=[&#13;
									left:&#13;
									|left:&#13;
									||left:&#13;
									|||type:|CustomFilter&#13;
									|||column:|MaintenanceContract.StartDate&#13;
									|||operator:|Like&#13;
									|||valueType|:|string&#13;
									|||value:LowerOrEqual&#13;
									|||-|&amp;apos;%1&amp;apos;&#13;
									||operator:|AND&#13;
									||type:|ImbricationFilter&#13;
									||right:&#13;
									|||type:|CustomFilter&#13;
									|||column:|MaintenanceContract.EndDate&#13;
									|||operator:|UpperOrEqual&#13;
									|||valueType|:|string&#13;
									|||value:&#13;
									|||-|&amp;apos;%2&amp;apos;&#13;
									|operator:|AND&#13;
									|type:|ImbricationFilter&#13;
									|right:&#13;
									||type:|CustomFilter&#13;
									||column:|MaintenanceContract.Status&#13;
									||operator:|Like&#13;
									||valueType|:|string&#13;
									||value:&#13;
									||-|&amp;apos;2&amp;apos;&#13;
									operator:|AND&#13;
									type:|ImbricationFilter&#13;
									right:&#13;
									|type:|CustomFilter&#13;
									|column:|CustomerProductId&#13;
									|operator:|Like&#13;
									|valueType|:|string&#13;
									|value:&#13;
									|-|&amp;apos;%3&amp;apos;								&#13;
								]&#13;
								&#13;
								sValTest = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
								SI sValTest &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sMaReqTemp				= ChaîneConstruit(sMaReqTemp,DateSys,DateSys,sValTest)&#13;
									sConditionYaml			= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
									sConditionYaml			= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
									sRetRecherche			= Import_Recherche_ParCondition(sURLEBP,&amp;quot;MaintenanceContractCustomerProduct&amp;quot;,&amp;quot;MaintenanceContract.Id&amp;quot;,sConditionYaml)&#13;
									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
										sNumContratMaintenance = sRetRecherche&#13;
									FIN&#13;
								FIN&#13;
								&#13;
								&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						&#13;
					FIN&#13;
				FIN&#13;
				sCode_intervenant = &amp;quot;&amp;quot;&#13;
				POUR iL = 1 À IlMax&#13;
					SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;R&amp;quot; ET XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SousTypeLigne) = &amp;quot;H&amp;quot; ALORS&#13;
						//Affectation du code intervenant uniquement si 1 seul tech&#13;
						SI sCode_intervenant = &amp;quot;&amp;quot; ALORS&#13;
							sCode_intervenant = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
						SINON&#13;
							sCode_intervenant = &amp;quot;&amp;quot;&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				POUR iL = 0 À IlMaxPlus &#13;
					&#13;
					SI iL = 0 _OU_ iL &amp;gt; IlMax _OU_ DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne  = &amp;quot;A&amp;quot; _OU_ DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne  = &amp;quot;R&amp;quot; ALORS &#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne   )&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Numéro&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code   )&#13;
						sXX_		= &amp;quot;&amp;quot;&#13;
						&#13;
						SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
							SI PAS bEBPSaaS ALORS &#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 [ScheduleEventNumber] FROM [ScheduleEvent] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.ScheduleEventNumber&#13;
									SINON&#13;
										sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
										sValTemp	= &amp;quot;&amp;quot;&#13;
									FIN	&#13;
									HLibèreRequête(sdReqTemp)&#13;
								SINON&#13;
									sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
									sValTemp	= &amp;quot;&amp;quot;&#13;
								FIN&#13;
							SINON&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ sValTemp +&amp;quot;%&amp;quot;,&amp;quot;ScheduleEvent&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;ScheduleEventNumber&amp;quot;)&#13;
								SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
									sValTemp = sRetRecherche&#13;
								SINON&#13;
									sXX_		= &amp;quot;Ref Externe NuxiDev &amp;quot; + sValTemp &#13;
									sValTemp	= &amp;quot;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						&#13;
						CodeDocTemp = sValTemp&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Libellé&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle)&#13;
						SI sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;Intervention via NuxiDev&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Début&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DebutLe)&#13;
						sValTest	= sValTemp&#13;
						SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
							sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + Milieu(sValTemp,9,2) + &amp;quot;:&amp;quot; + Milieu(sValTemp,11,2)&#13;
						SINON&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateDoc)&#13;
							sValTest	= sValTemp&#13;
							sValTemp	= DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + Milieu(sValTemp,9,2) + &amp;quot;:&amp;quot; + Milieu(sValTemp,11,2)&#13;
						FIN&#13;
						&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Fin&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FinLe)&#13;
						SI sValTemp &amp;lt; sValTest ALORS sValTemp = sValTest&#13;
						SI PAS DateValide(Gauche(sValTemp,8)) ALORS&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateDoc)&#13;
							SI sValTemp &amp;lt; sValTest ALORS sValTemp = sValTest&#13;
							sValTemp	= DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + Milieu(sValTemp,9,2) + &amp;quot;:&amp;quot; + Milieu(sValTemp,11,2)&#13;
						FIN&#13;
						&#13;
						SI sValTemp = sValTest ALORS&#13;
							SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
								dhDateHeureDTemp = sValTemp&#13;
								dhDateHeureDTemp..Minute ++&#13;
								sValTemp = dhDateHeureDTemp&#13;
							FIN&#13;
						FIN&#13;
						SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
							sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + Milieu(sValTemp,9,2) + &amp;quot;:&amp;quot; + Milieu(sValTemp,11,2)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code intervenant&#13;
						sValTemp	= sCode_intervenant&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code matériel&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Durée réalisée&#13;
						sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DureeInterv)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code Affaire&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Affaire)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Inclure dans le coût réalisé de l&amp;apos;analyse&#13;
						sValTemp	= &amp;quot;&amp;quot;  //???&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Type de ligne&#13;
						sValTemp	= &amp;quot;2&amp;quot; //???&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Notes en texte brut&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
						SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
							sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
							sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
						sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
						sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Durée prévue&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Cout horaire&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Coût total&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Etat&#13;
//						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Etat) = 2 ET iL &amp;lt;= IlMax ALORS&#13;
//							sValTemp = &amp;quot;1&amp;quot;&#13;
//						SINON&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Etat)&#13;
//						FIN&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Type d&amp;apos;évènement&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Categorie)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Type de document&#13;
						&#13;
						sValTemp	= &amp;quot;1&amp;quot; //???&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code document de vente&#13;
						sValTemp	= &amp;quot;&amp;quot; //!!! XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_DocumentVte)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code document d&amp;apos;achat&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Identifiant de document de stock&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Adresse 1&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse1)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Adresse 2&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse2)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Adresse 3&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse3)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Adresse 4&#13;
						SI Gauche(sValTemp,3)  = &amp;quot;XX_&amp;quot; ALORS&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code postal&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CP)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ville&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ville)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Département&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code Pays&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Pays)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Civilité (contact)&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Nom (contact)&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Interlocuteur)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Prénom&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Téléphone fixe&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Tel)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Téléphone portable&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GSM)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Fax&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//E-mail&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Mail)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Fonction&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Saisi par&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.iDInterne_Operateur)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Prochain rappel&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34)+ &amp;quot;;&amp;quot;&#13;
						&#13;
						//Rappel activé&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Rappel&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Type de durée (rappel)&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code client&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Tiers)&#13;
						SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
							SI PAS bEBPSaaS ALORS &#13;
								//C&amp;apos;est un nouveau, chercher le code tiers généré par EBP&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE MainDeliveryAddress_Address4 = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos; OR MainInvoicingAddress_Address4 = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos; OR NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								//VersPressePapier(sMaReq)&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
								&#13;
							SINON&#13;
								sConditionYaml=[&#13;
									left:&#13;
									|left:||&#13;
									||type:|CustomFilter&#13;
									||column:|MainDeliveryAddress_Address4&#13;
									||operator:|Like&#13;
									||valueType|:|string&#13;
									||value:&#13;
									||-|&amp;apos;%1&amp;apos;&#13;
									|operator:|OR&#13;
									|type:|ImbricationFilter&#13;
									|right:&#13;
									||type:|CustomFilter&#13;
									||column:|MainInvoicingAddress_Address4&#13;
									||operator:|Like&#13;
									||valueType|:|string&#13;
									||value:&#13;
									||-|&amp;apos;%1&amp;apos;&#13;
									operator:|OR&#13;
									type:|ImbricationFilter&#13;
									right:&#13;
									|type:|CustomFilter&#13;
									|column:|NotesClear&#13;
									|operator:|Like&#13;
									|valueType|:|string&#13;
									|value:&#13;
									|-|&amp;apos;%1&amp;apos;				&#13;
								]&#13;
								SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sMaReqTemp				= ChaîneConstruit(sMaReqTemp,sValTemp)&#13;
									sConditionYaml			= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
									sConditionYaml			= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
									sRetRecherche			= Import_Recherche_ParCondition(sURLEBP,&amp;quot;Customer&amp;quot;,&amp;quot;Id&amp;quot;,sConditionYaml)&#13;
									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
										sValTemp = sRetRecherche&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN							&#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code du fournisseur&#13;
						sValTemp		= &amp;quot;&amp;quot;&#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Affichage Maintenance / SAV&#13;
						/*sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Categorie)*/&#13;
//						SI PAS bEBPSaaS ALORS 					&#13;
//							sMaReqTemp		= &amp;quot;SELECT ScheduleEventType.DisplayType FROM ScheduleEventType WHERE ScheduleEventType.Id = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot;&#13;
//							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
//								HLitPremier(sdReqTemp)&#13;
//								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
//									sValTemp = sdReqTemp.DisplayType&#13;
//								FIN&#13;
//								HLibèreRequête(sdReqTemp)								&#13;
//							sinon&#13;
//								sConditionYaml=[&#13;
//									type:|CustomFilter&#13;
//									column:|DisplayType&#13;
//									operator:|Like&#13;
//									valueType|:|string&#13;
//									value:&#13;
//									-|&amp;apos;%1&amp;apos;&#13;
//								]&#13;
//								SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
//									sMaReqTemp				= ChaîneConstruit(sMaReqTemp,sValTemp)&#13;
//									sConditionYaml			= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
//									sConditionYaml			= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
//									sRetRecherche			= Import_Recherche_ParCondition(sURLEBP,&amp;quot;ScheduleEventType&amp;quot;,&amp;quot;DisplayType&amp;quot;,sConditionYaml)&#13;
//									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
//										sValTemp = sRetRecherche&#13;
//									FIN&#13;
//								FIN&#13;
//							FIN&#13;
//							&#13;
//							SELON sValTemp&#13;
//								CAS &amp;quot;0&amp;quot;&#13;
//									sValTemp = &amp;quot;0&amp;quot;&#13;
//								CAS &amp;quot;1&amp;quot;&#13;
//									sValTemp = &amp;quot;1&amp;quot;&#13;
//								AUTRE CAS&#13;
//									sValTemp = &amp;quot;1&amp;quot;&#13;
//							FIN&#13;
//						fin&#13;
//						&#13;
						sValTemp=1&#13;
	 					sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Référence&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code modèle d&amp;apos;évènement&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Temps de déplacement&#13;
						sValTemp	= Abs(Val(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DureeDeplacement)))&#13;
						&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code suivi incident&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Incident)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code frais de déplacement&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Zone)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Envoyer courrier de confirmation&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Description de l&amp;apos;intervention en clair&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Symptome)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Rapport d&amp;apos;intervention en clair&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Description)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Intervention suivante à prévoir&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Date de prochaine intervention&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Décrémenter le compteur restant pour l&amp;apos;intervention suivante&#13;
						sValTemp	= &amp;quot;&amp;quot; &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//SI il = 0 ALORS&#13;
						&#13;
						//Longitude&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Longitude)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Latitude&#13;
						sValTemp	=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Latitude)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//NomSignature&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomSignature)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Signature&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Signature)&#13;
						SI sDossierImages &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							IMG_Temp		= &amp;quot;&amp;quot;&#13;
							SI DocXMLSource.SyncNuxiDev.Enregistrement.Signature &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS IMG_Temp		= dChargeImage(Décode(DocXMLSource.SyncNuxiDev.Enregistrement.Signature,encodeBASE64SansRC))&#13;
							sValTemp		= sDossierImages + &amp;quot;Int_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
							SI fFichierExiste(sValTemp) _OU_ dSauveImageJPEG(IMG_Temp,sValTemp)  ALORS &#13;
								&#13;
								SELON Majuscule(PhotoFormat)&#13;
									CAS &amp;quot;LIEN&amp;quot;&#13;
										sValTemp =  sDossierImages + &amp;quot;Doc_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
									CAS &amp;quot;NOM&amp;quot;&#13;
										sValTemp =   &amp;quot;Int_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
									CAS &amp;quot;IMAGE&amp;quot;&#13;
										&#13;
									AUTRE CAS&#13;
										sValTemp =  sDossierImages + &amp;quot;Int_&amp;quot; + CodeDocTemp + &amp;quot;_Signature.jpg&amp;quot;&#13;
								FIN&#13;
							SINON &#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						&#13;
						// Photo1&#13;
						sValTemp	= &amp;quot;&amp;quot; &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						// Photo2&#13;
						sValTemp	= &amp;quot;&amp;quot; &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						// Photo3&#13;
						sValTemp	= &amp;quot;&amp;quot; &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code contrat de maintenance&#13;
						sValTemp	= sNumContratMaintenance // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Contrat)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne de temps - Code Affaire&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Ligne de temps - Code Contrat de maintenance;&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Code du projet;&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						// Code du chantier;&amp;quot;												&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Chantier) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Identifiant du terminal&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Device)&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Vrai;&#13;
						sValTemp	= &amp;quot;1&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Faux;&#13;
						sValTemp	= &amp;quot;0&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//--------------------------LIGNES------------------------------&#13;
						&#13;
						SI iL &amp;gt; 0 ET iL &amp;lt;= IlMax ALORS &#13;
							&#13;
							&#13;
							&#13;
							&#13;
							&#13;
							//Ligne de temps - Code   &#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne)&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Numéro&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].NDEvenement) = &amp;quot;A&amp;quot; ALORS&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							SINON&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code)&#13;
							FIN&#13;
							SI Gauche(sValTemp,1) = &amp;quot;{&amp;quot; ALORS&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV = sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Libellé&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;R&amp;quot; ALORS&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Designation)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Début&#13;
							sValTemp	= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DateHeureDebut&#13;
							SI PAS DateValide(Gauche(sValTemp,8)) ALORS&#13;
								sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DebutLe)&#13;
							FIN&#13;
							&#13;
							SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
								sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + Milieu(sValTemp,9,2) + &amp;quot;:&amp;quot; + Milieu(sValTemp,11,2)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							&#13;
							//Ligne de temps - Fin&#13;
							sValTemp	= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DateHeureFin&#13;
							SI PAS DateValide(Gauche(sValTemp,8)) ALORS&#13;
								sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FinLe)&#13;
							FIN&#13;
							&#13;
							SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
								sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + Milieu(sValTemp,9,2) + &amp;quot;:&amp;quot; + Milieu(sValTemp,11,2)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV = sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Code intervenant&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;R&amp;quot; ET XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SousTypeLigne) = &amp;quot;H&amp;quot; ALORS&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV = sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Code matériel&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;R&amp;quot; ET XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SousTypeLigne) = &amp;quot;M&amp;quot; ALORS&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Durée réalisée&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Code Affaire&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].NDEvenement) = &amp;quot;A&amp;quot; ALORS&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Affaire)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Inclure dans le coût réalisé de l&amp;apos;analyse&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Type de ligne&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;R&amp;quot; ALORS&#13;
								sValTemp = &amp;quot;3&amp;quot; //???&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Notes en texte brut&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Durée prévue&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Cout horaire&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Coût total&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Etat&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Etat) = 2 ET iL &amp;lt;= IlMax ALORS&#13;
								sValTemp = &amp;quot;1&amp;quot;&#13;
							SINON&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Etat)&#13;
							FIN&#13;
							&#13;
							SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Numéro de ligne&#13;
							sValTemp		= iL&#13;
							sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Voir dans le planning&#13;
							sValTemp		= &amp;quot;1&amp;quot;&#13;
							SI PAS bEBPSaaS ALORS 		&#13;
								sMaReqTemp		= &amp;quot;SELECT ScheduleShowTimeLine FROM ScheduleEvent WHERE lower(id) = lower(&amp;apos;&amp;quot; + Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne),[&amp;quot;}&amp;quot;,&amp;quot;{&amp;quot;],&amp;quot;&amp;quot;) + &amp;quot;&amp;apos;)&amp;quot;&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.ScheduleShowTimeLine&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
								&#13;
							SINON&#13;
								sConditionYaml=[&#13;
									type:|CustomFilter&#13;
									column:|id&#13;
									operator:|Like&#13;
									valueType|:|string&#13;
									value:&#13;
									-|&amp;apos;%1&amp;apos;&#13;
								]&#13;
								SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sMaReqTemp				= ChaîneConstruit(sMaReqTemp,Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne),[&amp;quot;}&amp;quot;,&amp;quot;{&amp;quot;],&amp;quot;&amp;quot;))&#13;
									sConditionYaml			= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
									sConditionYaml			= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
									sRetRecherche			= Import_Recherche_ParCondition(sURLEBP,&amp;quot;ScheduleEvent&amp;quot;,&amp;quot;ScheduleShowTimeLine&amp;quot;,sConditionYaml,&amp;quot;ScheduleShowTimeLine&amp;quot;)&#13;
									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
										sValTemp = sRetRecherche&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Identifiant du lot transféré à la paye&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - HEUCOMP&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - HEUSU10&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - HEUSU25&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - HEUSU25MENS&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - HEUSU50&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - HEUSU100&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - PRIME&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - PRIMEACT&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - PRIMEEXACT&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - CARTEORANGE&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - PANIERS&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - TICKETS&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Ligne de temps - Heures mensuelles&#13;
							sValTemp	= &amp;quot;0&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Identifiant de produit client dans un évènement&#13;
							SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].NDEvenement) = &amp;quot;A&amp;quot; ALORS&#13;
								sValTemp = &amp;quot;&amp;quot;	&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sEnregCSV = sEnregCSV + Caract(34) +   sValTemp   + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							&#13;
							//Produits client - Identifiant de l&amp;apos;évènement&#13;
							SI  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;A&amp;quot; ALORS&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							SINON&#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
							FIN&#13;
							sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Nombre d&amp;apos;heures décrémentées&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Code produit client&#13;
							&#13;
							SI  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;A&amp;quot; ALORS &#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
								SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
									SI PAS bEBPSaaS ALORS &#13;
										sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [CustomerProduct] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
										SI HExécuteRequêteSQL(sdReqTemp,CnxIDBDD[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
											HLitPremier(sdReqTemp)&#13;
											SI PAS HEnDehors(sdReqTemp) ALORS&#13;
												sValTemp = sdReqTemp.Id&#13;
											FIN	&#13;
											HLibèreRequête(sdReqTemp)&#13;
										FIN&#13;
										&#13;
									SINON&#13;
										sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ sValTemp +&amp;quot;%&amp;quot;,&amp;quot;CustomerProduct&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
										SI sValTemp&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
											sValTemp=sRetRecherche&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot; &#13;
							FIN&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Code article&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Libellé&#13;
							SI  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;A&amp;quot; ALORS &#13;
								sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Designation)&#13;
							SINON&#13;
								sValTemp = &amp;quot;&amp;quot;&#13;
							FIN&#13;
							sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
							sEnregCSV	= sEnregCSV + Caract(34) + sValTemp     + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Série/lot&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Prise en charge (pièces)&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Prise en charge (MO)&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
							//Produits client - Prise en charge (déplacement)&#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
							sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							&#13;
						SINON&#13;
							sValTemp =&amp;quot;&amp;quot;&#13;
							POUR c = 1 À 42&#13;
								sEnregCSV =  sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
						&#13;
						&#13;
						&#13;
						//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
						//Affectation des valeurs des PDF dynamiques&#13;
						sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
						POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
							sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
							sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
							nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;INT&amp;quot;, Majuscule(sNomAlias))&#13;
							SI nIChamp &amp;gt; 0 ALORS&#13;
								gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
							FIN&#13;
						FIN&#13;
						//Affectation des valeurs des Pages perso&#13;
						sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
						XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
						SI PAS ErreurDétectée ALORS&#13;
							nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
							POUR x = 1 À nNbChamps&#13;
								sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
								sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
								nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;INT&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
						POUR x = 1 À nNbChamps&#13;
							SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;INT&amp;quot; ALORS&#13;
								sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
								SI EstUnNombre(sValTemp) = Vrai ALORS&#13;
									sEnregCSV		= sEnregCSV +  sValTemp     + &amp;quot;;&amp;quot;&#13;
								SINON&#13;
									sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						//Fin Mappages des champsperso ---------------------------------------------------------&#13;
						sEnregCSV = sEnregCSV + &amp;quot;~&amp;quot;&#13;
						SI iL &amp;gt; IlMax ALORS&#13;
							nNbTemp		= ChaîneOccurrence(sEnregCSV,&amp;quot;~&amp;quot;)&#13;
							sEnregCSVC	= ExtraitChaîne(sEnregCSV,nNbTemp ,&amp;quot;~&amp;quot;) + RC&#13;
							SI nIDFichierC &amp;lt;&amp;gt; -1 ALORS fEcritLigne(nIDFichierC, &amp;amp;sEnregCSVC, Taille(sEnregCSVC))&#13;
							PremsC		= Faux&#13;
							SI nNbTemp &amp;gt; 2 ALORS&#13;
								sEnregCSV	= ChaîneSupprime(sEnregCSV,ExtraitChaîne(sEnregCSV,nNbTemp ,&amp;quot;~&amp;quot;) + &amp;quot;~&amp;quot;)&#13;
							FIN&#13;
						FIN&#13;
						&#13;
						sEnregCSV = Remplace(sEnregCSV,&amp;quot;~&amp;quot;,RC)&#13;
					FIN&#13;
				FIN&#13;
				////********************LES CONSOMMATIONS EN BON DE SORTIE&#13;
				//nNbConsoInter = 0	ne pas remettre à zero !!! sinon bug si plusieurs bi et que le dernier n&amp;apos;a pas de conso&#13;
				sEnregCSVB = &amp;quot;&amp;quot;							&#13;
				POUR iL = 1 À IlMax &#13;
					&#13;
					SI DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne  = &amp;quot;C&amp;quot; _ET_ (DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].NDEvenement  = &amp;quot;A&amp;quot;) ALORS&#13;
						&#13;
						//Ajout de consommations créer un BS&#13;
						//										Champs exportés :&#13;
						//										Document - Numéro du document&#13;
						//sValTemp = &amp;quot;&amp;quot;//&amp;quot;XX_&amp;quot; + DateVersEntier(DateSys(),Vrai) + Droite(AnnéeEnCours(),1) + HeureSys() &#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Date&#13;
						sValTemp	= DateVersChaîne(DateSys(),&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Série de documents&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Dépôt&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DepotTablette)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						SI sValTemp = &amp;quot;&amp;quot; ALORS&#13;
							SI PAS bEBPSaaS ALORS &#13;
								sMaReq = &amp;quot;SELECT Storehouse.Id FROM Storehouse WHERE MAIN = 1&amp;quot;&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.ID&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
							SINON&#13;
								sConditionYaml=[&#13;
									type:|CustomFilter&#13;
									column:|MAIN&#13;
									operator:|Like&#13;
									valueType|:|string&#13;
									value:&#13;
									-|&amp;apos;1&amp;apos;&#13;
								]&#13;
								SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sConditionYaml				= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
									sConditionYaml				= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
									sRetRecherche				= Import_Recherche_ParCondition(sURLEBP,&amp;quot;Storehouse&amp;quot;,&amp;quot;Id&amp;quot;,sConditionYaml)&#13;
									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
										sValTemp = sRetRecherche&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Notes en texte brut&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Notes&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Référence&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Code Contrat de maintenance&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Contrat)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Code suivi incident&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Incident) &#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Document - Identifiant de l&amp;apos;évènement&#13;
						&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
						SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
							sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
							//C&amp;apos;est un nouveau, chercher le code inter &#13;
							SI PAS bEBPSaaS ALORS &#13;
								sMaReq		= &amp;quot;SELECT ScheduleEvent.ScheduleEventNumber FROM ScheduleEvent WHERE ScheduleEvent.Address_Address4 = &amp;apos;&amp;quot; + sValTemp + &amp;quot;&amp;apos;&amp;quot; &#13;
								//VersPressePapier(sMaReq)&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.ScheduleEventNumber &#13;
										&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
								&#13;
							SINON&#13;
								sConditionYaml=[&#13;
									type:|CustomFilter&#13;
									column:|Address_Address4&#13;
									operator:|Like&#13;
									valueType|:|string&#13;
									value:&#13;
									-|&amp;apos;%1&amp;apos;&#13;
								]&#13;
								SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sConditionYaml				= ChaîneConstruit(sConditionYaml,sValTemp)&#13;
									sConditionYaml				= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
									sConditionYaml				= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
									sRetRecherche				= Import_Recherche_ParCondition(sURLEBP,&amp;quot;ScheduleEvent&amp;quot;,&amp;quot;ScheduleEventNumber&amp;quot;,sConditionYaml)&#13;
									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
										sValTemp = sRetRecherche&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						NumDocTemp	= sValTemp&#13;
						//										Ligne - Code article&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
						SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
							SI PAS bEBPSaaS ALORS &#13;
								sMaReq = &amp;quot;SELECT TOP 1 Id FROM [Item] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.Id&#13;
									FIN&#13;
								FIN&#13;
							SINON&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ sValTemp +&amp;quot;%&amp;quot;,&amp;quot;Item&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
								SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
									sValTemp = sRetRecherche&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						SI Gauche(sValTemp,4) = &amp;quot;TXT0&amp;quot; ALORS sValTemp = &amp;quot;MSGTXT1&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Description&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Designation)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Description commerciale en clair&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Designation)&#13;
						sValTemp	= Remplace(sValTemp,Caract(34),&amp;quot;&amp;apos;&amp;quot;)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Quantité&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Code emplacement&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Série/lot&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Date limite&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Quantité (série/lot)&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Contrat de maintenance/Analyse&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Code suivi incident&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Incident)&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Dépôt&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DepotTablette)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						SI sValTemp = &amp;quot;&amp;quot; ALORS&#13;
							SI PAS bEBPSaaS ALORS &#13;
								sMaReq = &amp;quot;SELECT Storehouse.Id FROM Storehouse WHERE MAIN = 1&amp;quot;&#13;
								SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sValTemp = sdReqTemp.ID&#13;
									FIN&#13;
									HLibèreRequête(sdReqTemp)&#13;
								FIN&#13;
								&#13;
							SINON&#13;
								sConditionYaml=[&#13;
									type:|CustomFilter&#13;
									column:|MAIN&#13;
									operator:|Like&#13;
									valueType|:|string&#13;
									value:&#13;
									-|&amp;apos;1&amp;apos;&#13;
								]&#13;
								SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									sConditionYaml				= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
									sConditionYaml				= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
									sRetRecherche				= Import_Recherche_ParCondition(sURLEBP,&amp;quot;Storehouse&amp;quot;,&amp;quot;Id&amp;quot;,sConditionYaml)&#13;
									SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
										sValTemp = sRetRecherche&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Démarque inconnue&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Détériorés&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Périmé&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Vol&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Autres&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - Réservé&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//										Ligne - A facturer&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Situation)&#13;
						SI sValTemp = &amp;quot;F&amp;quot; ALORS&#13;
							sValTemp = &amp;quot;1&amp;quot;&#13;
						SINON&#13;
							sValTemp = 0&#13;
						FIN&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						//							Ligne - Code produit client&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						// ID Tablette&#13;
						sValTemp	= sValDevice &#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Incident&#13;
						sValTemp	= sValCodeIncident&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Affaire&#13;
						sValTemp	= sValCodeAffaire&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Document - Code du chantier&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Chantier) &#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sEnregCSVB = sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						POUR c = 1 À 6&#13;
							sEnregCSVB = sEnregCSVB + &amp;quot;;&amp;quot;&#13;
						FIN&#13;
						&#13;
						SI PAS bEBPSaaS ALORS &#13;
							sMaReq = [&#13;
								SELECT &#13;
								Id,&#13;
								ScheduleEventNumber,&#13;
								StartDateTime,&#13;
								EndDateTime&#13;
								&#13;
								FROM ScheduleEvent&#13;
								&#13;
								Where ID = &amp;apos;%1&amp;apos;&#13;
								&#13;
								&#13;
							]&#13;
							&#13;
							sMaReq		= ChaîneConstruit(sMaReq,XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne))&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									sStartDateTime	= sdReqTemp.StartDateTime&#13;
									sEndDateTime	= sdReqTemp.EndDateTime&#13;
								FIN&#13;
							FIN&#13;
							&#13;
							&#13;
						SINON&#13;
							//DateDebut&#13;
							sConditionYaml=[&#13;
								type:|CustomFilter&#13;
								column:|ID&#13;
								operator:|Like&#13;
								valueType|:|string&#13;
								value:&#13;
								-|&amp;apos;%1&amp;apos;&#13;
							]&#13;
							&#13;
							sConditionYaml				= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
							sConditionYaml				= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
							sRetRecherche				= Import_Recherche_ParCondition(sURLEBP,&amp;quot;Storehouse&amp;quot;,&amp;quot;StartDateTime&amp;quot;,sConditionYaml,&amp;quot;StartDateTime&amp;quot;)&#13;
							SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
								sStartDateTime = sRetRecherche&#13;
							FIN&#13;
							&#13;
							&#13;
							//DateFin&#13;
							sConditionYaml=[&#13;
								type:|CustomFilter&#13;
								column:|ID&#13;
								operator:|Like&#13;
								valueType|:|string&#13;
								value:&#13;
								-|&amp;apos;%1&amp;apos;&#13;
							]&#13;
							&#13;
							sConditionYaml				= Remplace(sConditionYaml,&amp;quot;|&amp;quot;,&amp;quot; &amp;quot;)&#13;
							sConditionYaml				= URLEncode(sConditionYaml,encodeURLDepuisAnsi)&#13;
							sRetRecherche				= Import_Recherche_ParCondition(sURLEBP,&amp;quot;Storehouse&amp;quot;,&amp;quot;StartDateTime&amp;quot;,sConditionYaml,&amp;quot;StartDateTime&amp;quot;)&#13;
							SI sRetRecherche&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
								sEndDateTime = sRetRecherche&#13;
								&#13;
							FIN&#13;
							&#13;
						FIN&#13;
						&#13;
						//Début&#13;
						sValTemp	= sStartDateTime&#13;
						SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
							dhDateHeureTemp	= sValTemp&#13;
							sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Fin&#13;
						sValTemp	= sEndDateTime&#13;
						SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
							dhDateHeureTemp	= sValTemp&#13;
							sValTemp		= DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
						&#13;
						//Libellé Inter&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle)&#13;
						SI sValTemp = &amp;quot;&amp;quot; ALORS sValTemp = &amp;quot;Intervention via NuxiDev&amp;quot;&#13;
						sEnregCSVB	= sEnregCSVB + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;	&#13;
						&#13;
						&#13;
						sEnregCSVB	= sEnregCSVB + RC&#13;
					FIN&#13;
				FIN&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				&#13;
				SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				SI sEnregCSVB &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS fEcritLigne(nIDFichierB, &amp;amp;sEnregCSVB, Taille(sEnregCSVB))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					SI nIDFichierB&amp;gt;0 ALORS fFerme(nIDFichierB)&#13;
					SI nIDFichierC&amp;gt;0 ALORS fFerme(nIDFichierC)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN				&#13;
				&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI nIDFichierB&amp;gt;0 ALORS fFerme(nIDFichierB)&#13;
	SI nIDFichierC&amp;gt;0 ALORS fFerme(nIDFichierC)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				SI nIDFichierLogB &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLogB)&#13;
				SI nIDFichierLogC &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLogC)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)	//Inter&#13;
				SI fFichierExiste(sNomFicLog) ALORS&#13;
					StrLog = StrLog + [RC + &amp;quot;----------------------------&amp;quot; + RC] + fChargeTexte(sNomFicLog)&#13;
				FIN&#13;
				&#13;
				//			LanceAppli(AppliSDK,exeActif,exeBloquant)	//Re-inter pour modifier l&amp;apos;adresse car bug ebp si c&amp;apos;est l&amp;apos;ajout d&amp;apos;une inter avec une autre adresse&#13;
				//			SI fFichierExiste(sNomFicLog) ALORS&#13;
				//				StrLog = StrLog + [RC + &amp;quot;----------------------------&amp;quot; + RC] + fChargeTexte(sNomFicLog)&#13;
				//			FIN&#13;
				&#13;
				//			LanceAppli(AppliSDKC,exeActif,exeBloquant)	//Modif etat inter&#13;
				//			SI fFichierExiste(sNomFicLogB) ALORS&#13;
				//				StrLog = StrLog + [RC + &amp;quot;----------------------------&amp;quot; + RC] + fChargeTexte(sNomFicLog)&#13;
				//			FIN&#13;
				&#13;
				LanceAppli(AppliSDKB,exeActif,exeBloquant)		//Bon de sortie&#13;
				SI fFichierExiste(sNomFicLogC) ALORS&#13;
					StrLog = StrLog + [RC + &amp;quot;----------------------------&amp;quot; + RC] + fChargeTexte(sNomFicLogC)&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1]) //Inter&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
				&#13;
				//			(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1]) //Re-inter pour modifier l&amp;apos;adresse car bug ebp si c&amp;apos;est l&amp;apos;ajout d&amp;apos;une inter avec une autre adresse&#13;
				//			&#13;
				//			SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
				//				fEcritLigne(nIDFichierLog, StrLog)&#13;
				//				fFerme(nIDFichierLog)&#13;
				//			FIN&#13;
				&#13;
				//			(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFicC,tabListeTypeEnreg[t,1]) //Modif etat inter&#13;
				//			&#13;
				//			SI nIDFichierLogC &amp;lt;&amp;gt; -1 ALORS&#13;
				//				fEcritLigne(nIDFichierLogC, StrLog)&#13;
				//				fFerme(nIDFichierLogC)s&#13;
				//			FIN&#13;
				SI ChaîneOccurrence(fChargeTexte(sNomFicB),RC) &amp;gt; 1  ALORS&#13;
					(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImportb,sOrdreSDKB,sNomFicB,tabListeTypeEnreg[t,1]) 	//Bon de sortie&#13;
				FIN&#13;
				SI nIDFichierLogB &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLogB, StrLog)&#13;
					fFerme(nIDFichierLogB)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Interventions] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import des [Interventions]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Interventions]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;intervention&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [ScheduleEvent] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;ScheduleEvent&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
			&#13;
		&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
	PROCÉDURE INTERNE EstUnNombre(sMaChaine est une chaîne)&#13;
		&#13;
		&#13;
		// Déclaration de l&amp;apos;expression régulière&#13;
		// Elle accepte les nombres négatifs, le point ou la virgule comme séparateur décimal&#13;
		sRegEx		est une chaîne	= &amp;quot;^-?[0-9]+([,\.][0-9]+)?$&amp;quot;&#13;
		bOkNum		est un booléen&#13;
		&#13;
		// Vérification si la chaîne correspond à l&amp;apos;expression régulière&#13;
		SI RegexVérifie(sMaChaine,sRegEx) ALORS&#13;
			bOkNum = Vrai&#13;
		SINON&#13;
			bOkNum = Faux&#13;
		FIN&#13;
		&#13;
		RENVOYER(bOkNum)&#13;
		&#13;
		&#13;
	FIN&#13;
&#13;
&#13;
&#13;
</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INVENTAIRE</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345692</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportInventaire()&#13;
&#13;
&#13;
&#13;
//22/01/2025 16:00&#13;
&#13;
//si INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;DEBUG_IMPORT&amp;quot;,&amp;quot;0&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)  = 1 alors&#13;
//	ImportInventaire()&#13;
//	&#13;
//	retour&#13;
//FIN&#13;
&#13;
&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
&#13;
nNbImport									est un entier&#13;
sChaîneEcriture								est une chaîne&#13;
IlMax										est un  entier&#13;
StrInventaire								est une chaîne&#13;
tabInventaire								est un tableau de 0,0 chaînes&#13;
tabInventaireCumulé							est un tableau de 0,0 chaînes&#13;
tabDépotIDInventaire						est un tableau de 0,3 chaîne&#13;
nNbCol										est un entier&#13;
nNbLigne									est un entier&#13;
sChaîneLue									est une chaîne&#13;
IlDépot										est un entier&#13;
iL											est un entier&#13;
StrLogConcaténé								est une chaîne&#13;
&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso							est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps									est un entier&#13;
nIChamp										est un entier&#13;
XmlChampsPerso								est un xmlDocument&#13;
sValTempAnsi								est une chaîne ANSI&#13;
sNomAlias									est une chaîne&#13;
sValeurAlias								est une chaîne&#13;
//**********************************************&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sRetRecherche								est une chaîne&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;inventaire&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;inventaire&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{03DFD6AE-E902-4146-828E-BCED8A8DCDDC}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						&#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;inventaire&amp;quot; &#13;
							&#13;
							sEnregCSV = [&#13;
								Document - Numéro du document;Document - Date;Document - Dépôt;Document - Doit être transféré en comptabilité;Document - État de validation;Document - Notes;Document - Référence;Ligne - Code article;Ligne - Description;Ligne - Stock actuel;Ligne - Valeur unitaire actuelle;Ligne - Valeur stock actuel;Ligne - Série/lot;Ligne - Date limite;Ligne - Code emplacement;Ligne - Nouveau stock;Ligne - Nouvelle valeur unitaire;Ligne - Nouvelle valeur totale;Ligne - Commentaire;Ligne - Valeur de l&amp;apos;inventaire précédent;Ligne - Démarque inconnue;Ligne - Détériorés;Ligne - Périmé;Ligne - Vol;Ligne - Autres;&#13;
							]&#13;
							&#13;
							//Ajout des Entête champs perso&#13;
							&#13;
							//fin Ajout des Entête champs perso&#13;
							&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Inventaire.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Inventaire.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;Inventories&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				IlMax			= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
				SI IlMax &amp;gt;=  1 ALORS&#13;
					POUR iL = 1 À IlMax &#13;
						//Document - Numéro du document&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Date&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Date)&#13;
						SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
							sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Dépôt&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Depot)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Doit être transféré en comptabilité&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - État de validation&#13;
						sValTemp	= &amp;quot;ENCOURS&amp;quot; //XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Etat)&#13;
						SI sValTemp = -1 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Notes&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
						SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
							sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
							sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
						sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
						sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Référence&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Reference)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code article&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Article)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Description&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Libelle_Article)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Stock actuel&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Valeur unitaire actuelle&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Valeur stock actuel&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Série/lot&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//											sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[il].RegroupementSerieDLUO)&#13;
						//											si sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
						//												TableauSupprimeTout(tabRegroupementSerieDLUO) &#13;
						//												ChaîneVersTableau(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[il].RegroupementSerieDLUO),tabRegroupementSerieDLUO)&#13;
						//												POUR I = 1 A TableauInfo(tabRegroupementSerieDLUO,tiNombreLignes)&#13;
						//													&#13;
						//													sValTemp = sValTemp + [&amp;quot;¤&amp;quot;] + tabRegroupementSerieDLUO[i,2] &#13;
						//												FIN&#13;
						//											sinon&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SerieLot)&#13;
						//											fin&#13;
						&#13;
						&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Date limite&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//											sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[il].RegroupementSerieDLUO)&#13;
						//											SI sValTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
						//												TableauSupprimeTout(tabRegroupementSerieDLUO) &#13;
						//												ChaîneVersTableau(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[il].RegroupementSerieDLUO),tabRegroupementSerieDLUO)&#13;
						//												POUR I = 1 A TableauInfo(tabRegroupementSerieDLUO,tiNombreLignes)&#13;
						//													STRTempB =  &#13;
						//													sValTemp = sValTemp + [&amp;quot;¤&amp;quot;] + tabRegroupementSerieDLUO[i,2] &#13;
						//												FIN&#13;
						//											SINON&#13;
						&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DLUO)&#13;
						SI DateValide(sValTemp) ALORS&#13;
							sValTemp = DateVersChaîne(sValTemp,&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						&#13;
						//											FIN&#13;
						&#13;
						&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code emplacement&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Nouveau stock&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].NouveauStock)&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;.&amp;quot;],&amp;quot;,&amp;quot;) &#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Nouvelle valeur unitaire&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Nouvelle valeur totale&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Commentaire&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Commentaire)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Valeur de l&amp;apos;inventaire précédent&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Démarque inconnue&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Demarque)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Détériorés&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Deteriore)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Périmé&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Perime)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Vol&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].vol)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Autres&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Autres_Divers)&#13;
						//sValTemp = Remplace(sValTemp,[&amp;quot;&amp;apos;&amp;quot;,Caract(34),&amp;quot;%&amp;quot;,&amp;quot;,&amp;quot;],&amp;quot; &amp;quot;) &#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//&#13;
						sEnregCSV	= sEnregCSV + RC&#13;
					FIN&#13;
				FIN&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				&#13;
				//Affectation des valeurs des Pages perso&#13;
				&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			// Ouverture du fichier&#13;
			nIDFichier = fOuvre(sNomFic, foLecture)&#13;
			SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
				// Lecture du fichier&#13;
				sChaîneLue	= fLitLigne(nIDFichier)&#13;
				sChaîneLue	= Remplace(sChaîneLue,&amp;quot;;&amp;quot;,&amp;quot;~&amp;quot;)&#13;
				ChaîneVersTableau(sChaîneLue,tabInventaireCumulé,RC,&amp;quot;~&amp;quot;) 	//Ajoute les entetes du fichier&#13;
				TANTQUE sChaîneLue &amp;lt;&amp;gt; EOT &#13;
					SI StrInventaire &amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS StrInventaire = StrInventaire + RC&#13;
					StrInventaire	= StrInventaire + sChaîneLue	&#13;
					sChaîneLue		= fLitLigne(nIDFichier)&#13;
					sChaîneLue		= Remplace(sChaîneLue,Caract(34) + &amp;quot;;&amp;quot; ,&amp;quot;~&amp;quot;)&#13;
					sChaîneLue		= Remplace(sChaîneLue,Caract(34) ,&amp;quot;&amp;quot;)&#13;
					&#13;
				FIN&#13;
				// Fermeture du fichier&#13;
				fFerme(nIDFichier)&#13;
				ChaîneVersTableau(StrInventaire,tabInventaire,RC,&amp;quot;~&amp;quot;)	//Transfert du csv dans un tableau&#13;
				//			trace(StrInventaire)&#13;
				TableauSupprimeLigne(tabInventaire,1) //suprrimer la ligne d&amp;apos;entete&#13;
				nNbCol		= TableauInfo(tabInventaire,tiNombreColonnes)&#13;
				nNbLigne	= TableauInfo(tabInventaire,tiNombreLignes)&#13;
				&#13;
				TANTQUE nNbLigne &amp;gt; 0 ET nNbCol &amp;gt;= 8&#13;
					SI tabInventaire[nNbLigne,8] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
						iL = TableauAjouteLigne(tabInventaireCumulé)&#13;
						POUR c = 1 À nNbCol&#13;
							tabInventaireCumulé[iL,c] = tabInventaire[nNbLigne,c]&#13;
						FIN&#13;
						IlDépot = TableauCherche(tabDépotIDInventaire,tcLinéaire,&amp;quot;1&amp;quot;,tabInventaire[nNbLigne,3])&#13;
						SI IlDépot  = -1 ALORS&#13;
							IlDépot = TableauAjouteLigne(tabDépotIDInventaire,tabInventaire[nNbLigne,3],Majuscule(DonneGUID(guidBrut)),tabInventaire[nNbLigne,2])&#13;
						FIN&#13;
						tabInventaireCumulé[iL,1]	= tabDépotIDInventaire[IlDépot,2]&#13;
						tabInventaireCumulé[iL,2]	= tabDépotIDInventaire[IlDépot,3]&#13;
						TableauSupprimeLigne(tabInventaire,nNbLigne)&#13;
						nNbLigne = nNbLigne - 1&#13;
						SI nNbLigne &amp;gt; 0 ALORS&#13;
							POUR l = nNbLigne À 1 PAS -1&#13;
								SI tabInventaire[l,3] = tabInventaireCumulé[iL,3] _ET_ tabInventaire[l,8] = tabInventaireCumulé[iL,8] _ET_ tabInventaire[l,13] = tabInventaireCumulé[iL,13] _ET_ tabInventaire[l,14] = tabInventaireCumulé[iL,14] ALORS // depot + code article + serie lot + DLUO&#13;
									&#13;
									tabInventaireCumulé[iL,16]	= Val(tabInventaireCumulé[iL,16]) + Val(tabInventaire[l,16])&#13;
									tabInventaireCumulé[iL,21]	= Val(tabInventaireCumulé[iL,21]) + Val(tabInventaire[l,21])&#13;
									tabInventaireCumulé[iL,22]	= Val(tabInventaireCumulé[iL,22]) + Val(tabInventaire[l,22])&#13;
									tabInventaireCumulé[iL,23]	= Val(tabInventaireCumulé[iL,23]) + Val(tabInventaire[l,23])&#13;
									tabInventaireCumulé[iL,24]	= Val(tabInventaireCumulé[iL,24]) + Val(tabInventaire[l,24])&#13;
									tabInventaireCumulé[iL,25]	= Val(tabInventaireCumulé[iL,25]) + Val(tabInventaire[l,25])&#13;
									TableauSupprimeLigne(tabInventaire,l)&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
					SINON&#13;
						TableauSupprimeLigne(tabInventaire,nNbLigne)&#13;
					FIN&#13;
					nNbLigne = TableauInfo(tabInventaire,tiNombreLignes)&#13;
				FIN&#13;
				StrInventaire	= TableauVersChaîne(tabInventaireCumulé,RC,&amp;quot;;&amp;quot;)&#13;
				sChaîneEcriture	= StrInventaire&#13;
				&#13;
				&#13;
				// Ouverture du fichier&#13;
				sNomFic			= fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;-cumule.csv&amp;quot;&#13;
				TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
				TableauAjouteLigne(gtabExportDesFic,fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				nIDFichier	= fOuvre(sNomFic,foCréation+foEcriture)&#13;
				SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichier, &amp;amp;sChaîneEcriture, Taille(sChaîneEcriture))&#13;
					// Fermeture du fichier&#13;
					fFerme(nIDFichier)&#13;
				SINON&#13;
					Erreur()&#13;
				FIN&#13;
			FIN&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Inventaire] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import [Inventaire]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Inventaire]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;inventaire&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [StockDocument] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;StockDocument&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
			&#13;
		FIN&#13;
	FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
// ImportSaisieDesTemps ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SAISIEDESTEMPS</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345692</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportSaisieDesTemps()&#13;
&#13;
&#13;
&#13;
//16/10/2024 : By Fatima Ajout du lien du csv Dossier ftp import du client&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport est un entier&#13;
IlMax est un entier&#13;
StrLogConcaténé	est une chaîne&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso							est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps									est un entier&#13;
nIChamp										est un entier&#13;
XmlChampsPerso								est un xmlDocument&#13;
sValTempAnsi								est une chaîne ANSI&#13;
sNomAlias									est une chaîne&#13;
sValeurAlias								est une chaîne&#13;
&#13;
dhDateHeureDTemp	est une DateHeure&#13;
dhDateHeureFTemp	est une DateHeure&#13;
DuréeTemp			est une Durée&#13;
//**********************************************&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sRetRecherche								est une chaîne&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
&#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;saisiedestemps&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;saisiedestemps&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{25B00448-0E17-4AE7-A8BF-E3A94D00B09D}&amp;quot;&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						&#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;saisiedestemps&amp;quot;&#13;
							&#13;
							&#13;
							sEnregCSV = [&#13;
									Libellé;Début;Fin;Code intervenant;Code matériel;Durée réalisée - Durée en heures;Code Affaire;Code du chantier;Notes en texte brut;Etat;&#13;
							]	&#13;
							&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;ART&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,3] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,3])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,3] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							sNomFic		= sPréfixFic + &amp;quot;Saisie des temps.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Saisie des temps.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;PayrollScheduleTimeEvent&amp;quot;&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				IlMax = DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
				SI IlMax &amp;gt;=  1 ALORS&#13;
					POUR iL = 1 À IlMax 	&#13;
						//Libellé&#13;
						sValTemp			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].LibelleRessource)&#13;
						sValTemp			= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV			= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Début&#13;
						sValTemp			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DateHeureDebut)&#13;
						dhDateHeureDTemp	= sValTemp&#13;
						sValTemp			= DateVersChaîne(dhDateHeureDTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureDTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
						sValTemp			= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV			= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Fin&#13;
						sValTemp			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DateHeureFin)&#13;
						dhDateHeureFTemp	= sValTemp&#13;
						sValTemp			= DateVersChaîne(dhDateHeureFTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureFTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
						sValTemp			= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV			= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Code intervenant&#13;
						sValTemp			= &amp;quot;&amp;quot;&#13;
						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeRessource) = &amp;quot;H&amp;quot; ALORS&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].CodeRessource)&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Code matériel&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeRessource) = &amp;quot;M&amp;quot; ALORS&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].CodeRessource)&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Durée réalisée - Durée en heures&#13;
						sValTemp	=    &amp;quot;&amp;quot;// XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
						DuréeTemp	= dhDateHeureFTemp - dhDateHeureDTemp&#13;
						sValTemp	= Arrondi(DuréeTemp..EnHeures,2)&#13;
						&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Code Affaire&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterneAffaire)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Code du chantier&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterneChantier)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Notes en texte brut&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
						SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
							sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
							sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
						sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
						sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Etat&#13;
						sValTemp	= &amp;quot;1&amp;quot;// En cours //XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//&#13;
						&#13;
						//&#13;
						sEnregCSV	= sEnregCSV + RC	&#13;
					FIN&#13;
				FIN&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				&#13;
				//Affectation des valeurs des Pages perso&#13;
				&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Saisie de temps] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import [Saisie de temps]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Saisie de temps]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;saisiedestemps&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [ScheduleEvent] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;ScheduleEvent&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
&#13;
&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TIERS</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345683</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportTiers()&#13;
&#13;
//04/02/2025 09:17 Correction traitement de chaines sur FenSpec XML&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport									est un entier&#13;
StrLogConcaténé								est une chaîne&#13;
//Declaration Trt Champs perso******************&#13;
tabValChampsPerso							est un tableau de 0,2 chaîne		//Nom du champs / Valeur&#13;
nNbChamps									est un entier&#13;
nIChamp										est un entier&#13;
XmlChampsPerso								est un xmlDocument&#13;
sValTempAnsi								est une chaîne ANSI&#13;
sNomAlias									est une chaîne&#13;
sValeurAlias								est une chaîne&#13;
//**********************************************&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
sRetRecherche								est une chaîne&#13;
bIsImportValide								est un booléen&#13;
//***********************************************************************&#13;
&#13;
SI CnxBDDSrc[1].Libellé = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
FIN&#13;
&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
//Lecture des paramètres et paramètres poubelle &#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;tierscp&amp;quot;)&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;tiersf&amp;quot;)&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;tierscp&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{1A76DD5D-6783-4E58-8BC1-46ECD1D300EF}&amp;quot;&#13;
							&#13;
						CAS &amp;quot;tiersf&amp;quot;&#13;
							IDGuidEBP = &amp;quot;{E0F6C1CF-6495-4895-9723-3123C36B9EF9}&amp;quot;	&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						sMaReqTemp = ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						SI sPréfixeNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot; ALORS&#13;
							sNomProfilImport = &amp;quot;ImagesNuxiDev&amp;quot;&#13;
						SINON&#13;
							sNomProfilImport = &amp;quot;NuxiDev3&amp;quot;&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP	= &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête&#13;
					sEnregCSV	= [&#13;
						Code (tiers);Civilité;Nom;Code Famille;Libellé;Code sous-famille client;Libellé sous-famille client;Personne physique;Statut;Adresse 1 (facturation);Adresse 2 (facturation);Adresse 3 (facturation);Adresse 4 (facturation);Code postal (facturation);Ville (facturation);Département (facturation);Code Pays (facturation);Site Web (facturation);Civilité (contact) (facturation);Nom (contact) (facturation);Prénom (facturation);FONCTION (facturation);Service/Bureau (facturation);Téléphone fixe (facturation);Téléphone portable (facturation);Fax (facturation);E-mail (facturation);Civilité (adresse) (livraison);nom (adresse) (livraison);Adresse 1 (livraison);Adresse 2 (livraison);Adresse 3 (livraison);Adresse 4 (livraison);Code postal (livraison);Ville (livraison);Département (livraison);Code Pays (livraison);Site Web (livraison);Civilité (contact) (livraison);nom (contact) (livraison);Prénom (livraison);fonction (livraison);Service/Bureau (livraison);Téléphone fixe (livraison);Téléphone&#13;
						&#13;
						portable &#13;
						(livraison);Fax (livraison);E-mail (livraison);Compte comptable;% remise;Encours autorisé;Solde initial;Date de première facture;Code mode de règlement;Date de paiement;Code territorialité;Siren;Nic;Siret;Code NAF;Numéro de TVA intracommunautaire;Notes en texte brut;Libellé du mode règlement;Libellé du code NAF;Est la banque principale;Libellé de la banque;Code pays de la banque;Domiciliation 1 de la banque;Domiciliation 2 de la banque;Domiciliation 3 de la banque;RIB / BBAN;BIC;IBAN;Code de la catégorie tarifaire;Libellé de la catégorie tarifaire;Code commercial/collaborateur;Nom du commercial/collaborateur;% Remise 2;% escompte;Date de dernière facturation;Type de tiers;Facturation TTC;Code frais de port;Client en compte;Type d&amp;apos;envoi des contacts sur le web;Référence unique du mandat SEPA;Date de signature du mandat SEPA;Séquence de présentation SEPA;% acompte;Référence de l&amp;apos;acheteur / Code service;&#13;
						Livraison_Longitude;Livraison_Latitude;Livraison_LngLatPrécision;Facturation_Longitude;Facturation_Latitude;Facturation_LngLatPrécision;Groupe 1;Groupe 2;FacturationCivilite;LivraisonCivilite;&#13;
					]&#13;
					sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
					&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;tierscp&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;CLI&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							//Déclarer le fichier de sortie&#13;
							sNomFic		= sPréfixFic + &amp;quot;ClientsProspects.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;ClientsProspects.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;Customers&amp;quot;	&#13;
							&#13;
						CAS &amp;quot;tiersf&amp;quot;&#13;
							//ajouter entête champs perso&#13;
							//Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							TableauSupprimeTout(tabValChampsPerso)&#13;
							nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
							POUR i = 1 À nNbChamps&#13;
								SI gtabChampsSpecifiqueImport[i,1] = &amp;quot;FOU&amp;quot; _ET_ gtabChampsSpecifiqueImport[i,2] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
									TableauAjouteLigne(tabValChampsPerso,gtabChampsSpecifiqueImport[i,2])&#13;
									sEnregCSV = sEnregCSV + [&amp;quot;;&amp;quot;] + gtabChampsSpecifiqueImport[i,2] + &amp;quot;;&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							//fin Ajout des Entête champs perso&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							//Déclarer le fichier de sortie&#13;
							sNomFic		= sPréfixFic + &amp;quot;Fournisseurs.csv&amp;quot;&#13;
							sNomFicLog	= sPréfixFic + &amp;quot;Fournisseurs.log&amp;quot;&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= &amp;quot;Suppliers&amp;quot;&#13;
					FIN&#13;
					//Ligne de commande SDK à utiliser en fin de synchro&#13;
					AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
					+ fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
					&#13;
					nIDFichier = fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					Prems		= Faux&#13;
					&#13;
					SI bEBPSaaS = Vrai ALORS nIDFichierLog=fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				&#13;
				//---------------------------------------------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				//Code (tiers)&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
				sXX_			= &amp;quot;&amp;quot;&#13;
				SI Gauche(sValTemp,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
					SI PAS bEBPSaaS ALORS &#13;
						SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
							CAS &amp;quot;tierscp&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [Customer] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot; &#13;
							CAS &amp;quot;tiersf&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM [Supplier] WHERE NotesClear like &amp;apos;%&amp;quot; + sValTemp + &amp;quot;%&amp;apos;&amp;quot;&#13;
						FIN&#13;
						&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sXX_		=  sValTemp&#13;
								sValTemp	= sdReqTemp.Id&#13;
							SINON&#13;
								sXX_		=  sValTemp &#13;
								sValTemp	= &amp;quot;&amp;quot;&#13;
							FIN	&#13;
							HLibèreRequête(sdReqTemp)&#13;
						SINON&#13;
							sXX_		=  sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						FIN&#13;
					SINON&#13;
						SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
							CAS &amp;quot;tierscp&amp;quot;&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Customer&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							CAS &amp;quot;tiersf&amp;quot;&#13;
								sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot; + sValTemp + &amp;quot;%&amp;quot;,&amp;quot;Supplier&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)	&#13;
						FIN&#13;
						SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
							sXX_		= sValTemp &#13;
							sValTemp	= &amp;quot;&amp;quot;&#13;
						SINON&#13;
							sXX_		= sValTemp &#13;
							sValTemp	= sRetRecherche&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Civilite)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom&#13;
				&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Nom)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Famille&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneFamille)&#13;
				SI sValTemp = -1 ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code sous-famille client&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneSousFamille)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé sous-famille client&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Personne physique&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Statut&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 1 (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Adresse1)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 2 (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Adresse2)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 3 (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Adresse3)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 4 (facturation)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code postal (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_CP)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Ville (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Ville)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Département (facturation)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Pays (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_IDInternePays)&#13;
				SI sValTemp = &amp;quot;&amp;quot; OU sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;FR&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Site Web (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Web)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité (contact) (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Civilite)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom (contact) (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Nom)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Prénom (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Prenom)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fonction (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Fonction)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Service/Bureau (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Service)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone fixe (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Tel)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone portable (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_GSM)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fax (facturation)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Fax)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//E-mail (facturation)&#13;
				sValTemp	= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Contact_Mail),&amp;quot;;&amp;quot;,&amp;quot;,&amp;quot;)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité (adresse) (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Civilite)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom (adresse) (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Nom)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 1 (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Adresse1)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 2 (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Adresse2)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 3 (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Adresse3)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Adresse 4 (livraison)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code postal (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_CP)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Ville (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Ville)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Département (livraison)&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code Pays (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_IDInternePays)&#13;
				SI sValTemp = &amp;quot;&amp;quot; OU sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;FR&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Site Web (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Web)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Civilité (contact) (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Civilite)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom (contact) (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Nom)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Prénom (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_contact_Prenom)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fonction (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Fonction)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Service/Bureau (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Service)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone fixe (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Tel)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Téléphone portable (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_GSM)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Fax (livraison)&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Fax)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//E-mail (livraison)&#13;
				sValTemp	= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Contact_Mail),&amp;quot;;&amp;quot;,&amp;quot;,&amp;quot;)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Compte comptable&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//% remise&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Encours autorisé&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Encours_Autorise)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Solde initial&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de première facture&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code mode de règlement&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneModeReglement)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de paiement&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code territorialité&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Siren&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nic&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Siret&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Siret)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code NAF&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Numéro de TVA intracommunautaire&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Notes en texte brut&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
				SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(sValTemp,sXX_) = Faux ALORS&#13;
					sValTemp	= Remplace(sValTemp,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
					sValTemp	= sValTemp + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
				FIN&#13;
				sValTemp	= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
				sValTemp	= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
				sValTemp	= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé du mode règlement&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé du code NAF&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Est la banque principale&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de la banque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code pays de la banque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Domiciliation 1 de la banque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Domiciliation 2 de la banque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Domiciliation 3 de la banque&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//RIB / BBAN&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//BIC&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//IBAN&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code de la catégorie tarifaire&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Libellé de la catégorie tarifaire&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code commercial/collaborateur&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterneCollaborateur)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Nom du commercial/collaborateur&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//% Remise 2&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//% escompte&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de dernière facturation&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type de tiers&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TypeTiers)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Facturation TTC&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Code frais de port&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Client en compte&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Type d&amp;apos;envoi des contacts sur le web&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Référence unique du mandat SEPA&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Date de signature du mandat SEPA&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Séquence de présentation SEPA&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//% acompte&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Référence de l&amp;apos;acheteur / Code service&#13;
				sValTemp	= &amp;quot;&amp;quot;//XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//									Livraison_Longitude;&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Longitude)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//									Livraison_Latitude;&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Latitude)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//									Livraison_LngLatPrécision;&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_LngLatPrécision)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//									Facturation_Longitude;&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Longitude)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//									Facturation_Latitude;&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Latitude)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//									Facturation_LngLatPrécision;&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_LngLatPrécision)&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Groupe 1&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Groupe1)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//Groupe 2&#13;
				sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Groupe2)&#13;
				SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//FacturationCivilite&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Facturation_Civilite)&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				//LivraisonCivilite&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Livraison_Civilite)&#13;
				sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
					CAS &amp;quot;tierscp&amp;quot;				&#13;
						&#13;
						&#13;
						POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
							sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
							sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
							nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;CLI&amp;quot;, Majuscule(sNomAlias))&#13;
							SI nIChamp &amp;gt; 0 ALORS&#13;
								gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
							FIN&#13;
						FIN&#13;
						//Affectation des valeurs des Pages perso&#13;
						sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
						XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
						SI PAS ErreurDétectée ALORS&#13;
							nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
							POUR x = 1 À nNbChamps&#13;
								sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
								sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
								nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;CLI&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
						POUR x = 1 À nNbChamps&#13;
							SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;CLI&amp;quot; ALORS&#13;
								sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
								sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
						&#13;
						&#13;
					CAS &amp;quot;tiersf&amp;quot;&#13;
						&#13;
						&#13;
						POUR TOUTE CHAÎNE sValTemp2 DE sValTemp SÉPARÉE PAR &amp;quot;¤&amp;quot;&#13;
							sNomAlias								= ExtraitChaîne(sValTemp2,2,&amp;quot;|&amp;quot;)&#13;
							sValeurAlias							= ExtraitChaîne(sValTemp2,3,&amp;quot;|&amp;quot;)&#13;
							nIChamp									= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;FOU&amp;quot;, Majuscule(sNomAlias))&#13;
							SI nIChamp &amp;gt; 0 ALORS&#13;
								gtabChampsSpecifiqueImport[nIChamp,2]	= sValeurAlias&#13;
							FIN&#13;
						FIN&#13;
						//Affectation des valeurs des Pages perso&#13;
						sValTempAnsi	= Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;%&amp;quot; + Asc(&amp;quot;&amp;amp;&amp;quot;) + &amp;quot;%&amp;quot;,&amp;quot;&amp;amp;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(26),&amp;quot;oe&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26)+ Caract(26),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(184),&amp;quot;diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26),&amp;quot;Diam.&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(77),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(63),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(32) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;’&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;”&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;apos;&amp;apos;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,&amp;quot;&amp;amp;&amp;amp;&amp;quot; ,ChaîneVersUTF8(&amp;quot;&amp;amp;&amp;quot;))&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(162),&amp;quot;-&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(26),&amp;quot;&amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(226) + Caract(26) + Caract(157),&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(195) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(196) + Caract(26) ,&amp;quot; &amp;quot;)&#13;
						sValTempAnsi			= Remplace(sValTempAnsi,Caract(197) + Caract(39) ,&amp;quot; &amp;quot;)&#13;
						XmlChampsPerso	= XMLOuvre(sValTempAnsi,depuisChaîne)&#13;
						SI PAS ErreurDétectée ALORS&#13;
							nNbChamps = XmlChampsPerso.Data.Champ..Occurrence&#13;
							POUR x = 1 À nNbChamps&#13;
								sNomAlias		= XMLVersTexte(XmlChampsPerso.Data.Champ[x].Alias)&#13;
								sValeurAlias	= (XmlChampsPerso.Data.Champ[x]..Attribut[sNomAlias])&#13;
								nIChamp			= TableauCherche(gtabChampsSpecifiqueImport,tcLinéairePremier,&amp;quot;1;2&amp;quot;, &amp;quot;FOU&amp;quot;, Majuscule(sNomAlias))&#13;
								SI nIChamp &amp;gt; 0 ALORS&#13;
									gtabChampsSpecifiqueImport[nIChamp,3] = sValeurAlias&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						nNbChamps = TableauInfo(gtabChampsSpecifiqueImport,tiNombreLignes)&#13;
						POUR x = 1 À nNbChamps&#13;
							SI gtabChampsSpecifiqueImport[x,1] = &amp;quot;FOU&amp;quot; ALORS&#13;
								sValTemp		= gtabChampsSpecifiqueImport[x,3]&#13;
								sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Tiers] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import des [Tiers]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Tiers]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;tierscp&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [Customer] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
					CAS &amp;quot;tiersf&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [Supplier] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN	&#13;
				FIN&#13;
			SINON&#13;
				POUR x = 1 À NBtraité&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;tierscp&amp;quot;&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;Customer&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						CAS &amp;quot;tiersf&amp;quot;&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;Supplier&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					FIN&#13;
					SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
			&#13;
		FIN&#13;
	FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
&#13;
&#13;
&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TRSF_DEPOT</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345687</Version>
      <CnxSource>1</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportTransfert()&#13;
&#13;
//24/01/2025 : By Fatima ajout bon de transfert&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
sNomFicLog									est une chaîne&#13;
NBtraité									est un entier&#13;
AppliSDK									est une chaîne&#13;
sPréfixFic									est une chaîne&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
sEnregCSV									est une chaîne&#13;
sIdentifiantsEBP							est une chaîne&#13;
InTemp										est une chaîne&#13;
sNomProfilImport							est une chaîne&#13;
sValTemp									est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
nIDFichierLog								est un entier&#13;
sXX_										est une chaîne&#13;
IDGuidEBP									est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
bEBPSaaS									est un booléen&#13;
sPréfixeNomProfilImport						est une chaîne&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport									est un entier&#13;
IlMax										est un entier&#13;
BON_DE_TRANSFERT							est une chaîne&#13;
sTypeTransfert est une chaîne&#13;
&#13;
StrLogConcaténé								est une chaîne&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sRetRecherche								est une chaîne&#13;
sURLEBP										est une chaîne&#13;
sOrdreSDK									est une chaîne&#13;
bIsImportValide								est un booléen	= Vrai&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
//Récup des identifiant de cnx au SDK&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
		sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
	FIN&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
&#13;
//Déclaration des variables&#13;
//TransferRequests Ordres de transfert&#13;
//TransferOrders Bons de transfert&#13;
&#13;
//Lecture des paramètres et paramètres poubelle &#13;
SI  INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;BON_DE_TRANSFERT&amp;quot;,&amp;quot;&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) = &amp;quot;&amp;quot; ALORS&#13;
	INIEcrit(&amp;quot;CONFIG&amp;quot;, &amp;quot;BON_DE_TRANSFERT&amp;quot;,&amp;quot;TransferRequests&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;)&#13;
FIN&#13;
BON_DE_TRANSFERT = Majuscule(INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;BON_DE_TRANSFERT&amp;quot;,&amp;quot;TransferRequests&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) )&#13;
sTypeTransfert=INILit(&amp;quot;CONFIG&amp;quot;, &amp;quot;BON_DE_TRANSFERT&amp;quot;,&amp;quot;TransferRequests&amp;quot;,gsRepTempBackup + [fSep] + &amp;quot;Conf.ini&amp;quot;) &#13;
//lecture version logiciel Maitre et détection des options (maintenance sav etc ....)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;transfert&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	sEnregCSV			= &amp;quot;&amp;quot;&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				SI Prems = Vrai OU gbGlobaliser_Enreg_Import = Faux ALORS&#13;
					SI gbGlobaliser_Enreg_Import = Faux ALORS&#13;
						sEnregCSV			= &amp;quot;&amp;quot;&#13;
						StrLog				= &amp;quot;&amp;quot;&#13;
						TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
						SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
							//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
							sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
							SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
								fRepCrée(sPréfixFic)&#13;
							FIN&#13;
							sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
						SINON&#13;
							sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
						FIN&#13;
					FIN&#13;
					//---------------------------------------------Recherche du nom du profil d&amp;apos;import******************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
						CAS &amp;quot;transfert&amp;quot;&#13;
							SI sTypeTransfert=&amp;quot;TransferRequests&amp;quot; ALORS //Ordre de transfert&#13;
								IDGuidEBP  = Minuscule(&amp;quot;{9E586947-D51A-4F23-BC7D-B771EE137DAC}&amp;quot;) 	&#13;
							SINON //Bon de transfert&#13;
								IDGuidEBP  = Minuscule(&amp;quot;{EAC41837-0189-4CBF-BCFF-75E196CD4FF9}&amp;quot;) 	&#13;
							FIN&#13;
							&#13;
					FIN&#13;
					SI sPréfixeNomProfilImport = &amp;quot;&amp;quot; ALORS sPréfixeNomProfilImport = &amp;quot;NuxiDev&amp;quot;&#13;
					SI PAS bEBPSaaS ALORS &#13;
						sMaReqTemp = [&#13;
							SELECT &#13;
							EbpSysGenericImportSettings.name &#13;
							FROM EbpSysGenericImportSettings &#13;
							WHERE &#13;
							left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 0&#13;
							Order By EbpSysGenericImportSettings.name DESC&#13;
						]&#13;
						//left(EbpSysGenericImportSettings.name,7) = &amp;apos;NuxiDev&amp;apos; and &#13;
						sMaReqTemp			= ChaîneConstruit(sMaReqTemp,IDGuidEBP,sPréfixeNomProfilImport)&#13;
						&#13;
						sNomProfilImport	= &amp;quot;NuxiDev3&amp;quot;&#13;
						&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								sNomProfilImport = sdReqTemp.name&#13;
							SINON&#13;
								SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
									HLitPremier(sdReqTemp)&#13;
									SI PAS HEnDehors(sdReqTemp) ALORS&#13;
										sNomProfilImport = sdReqTemp.name&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
						HLibèreRequête(sdReqTemp)&#13;
					SINON&#13;
						//FATIMA &#13;
						//Recuperer le nom du profil d&amp;apos;import (Il manque l&amp;apos;ouverture de la table EbpSysGenericImportSettings)&#13;
						sNomProfilImport=ProfileImport_Saas(IDGuidEBP)//&amp;quot;NuxiDev5&amp;quot;&#13;
					FIN&#13;
					IDGuidEBP = &amp;quot;***&amp;quot;&#13;
					//--------------------------------------------------------Générer la ligne d&amp;apos;entête****************************************************************************************&#13;
					SELON Minuscule(tabListeTypeEnreg[t,1])	&#13;
						CAS &amp;quot;transfert&amp;quot;&#13;
							sEnregCSV = [&#13;
								Document - Numéro du document;Document - Date;Document - Série de documents;Document - Dépôt;Document - Notes en texte brut;Document - Notes;Document - Référence;Document - Code Contrat de maintenance;Document - Code suivi incident;Document - Dépôt de destination;Document - Dépôt de transit;Document - Durée du transit;Document - Date d&amp;apos;exécution;Ligne - Code article;Ligne - Description;Ligne - Description commerciale en clair;Ligne - Quantité;Ligne - Code emplacement;Ligne - Série/lot;Ligne - Quantité (Série/Lot/Emplac.);Ligne - Contrat de maintenance/Analyse;Ligne - Code suivi incident;Ligne - Dépôt;Ligne - Code emplacement transit;Ligne - Code emplacement destination;Ligne - Dépôt de destination;Ligne - Montant des Frais;Ligne - Réservé;&#13;
							]&#13;
							sEnregCSV	= Remplace(sEnregCSV,[Caract(13), Caract(10), Caract(9)],&amp;quot;&amp;quot;)&#13;
							&#13;
							//ajouter entête champs perso&#13;
							&#13;
							&#13;
							//Déclarer le fichier de sortie*******************************************************************************************************************************&#13;
							SI BON_DE_TRANSFERT=&amp;quot;TransferRequests&amp;quot; ALORS&#13;
								sNomFic		= sPréfixFic + &amp;quot;Ordre Transfert.csv&amp;quot;&#13;
								sNomFicLog	= sPréfixFic + &amp;quot;Ordre Transfert.log&amp;quot;&#13;
							SINON&#13;
								sNomFic		= sPréfixFic + &amp;quot;Bon de Transfert.csv&amp;quot;&#13;
								sNomFicLog	= sPréfixFic + &amp;quot;Bon de Transfert.log&amp;quot;&#13;
							FIN&#13;
							&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFic)&#13;
							TableauAjouteLigne(gtabExportDesFic,sNomFicLog)&#13;
							sOrdreSDK	= BON_DE_TRANSFERT&#13;
							//Ligne de commande SDK à utiliser en fin de synchro&#13;
							AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
							+ fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;  + Caract(34) + &amp;quot; /Import=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
							&#13;
							//***************************************************&#13;
							&#13;
					FIN&#13;
					nIDFichier		= fOuvre(sNomFic ,foCréation+foEcriture)&#13;
					nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
					SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
						fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
					FIN&#13;
					Prems		= Faux&#13;
				FIN			&#13;
				sEnregCSV	= &amp;quot;&amp;quot;&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource	= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				&#13;
				IlMax			= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
				SI IlMax &amp;gt;=  1 ALORS&#13;
					POUR iL = 1 À IlMax 	&#13;
						//Document - Numéro du document&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Date&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Date)&#13;
						&#13;
						SI DateValide(Gauche(sValTemp,8)) ALORS&#13;
							sValTemp = DateVersChaîne(Gauche(sValTemp,8),&amp;quot;JJ/MM/AAAA&amp;quot;)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Série de documents&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Dépôt&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne_Depot_Src)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Notes en texte brut&#13;
						sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
						sValTemp		= Remplace(sValTemp,ExtraitChaîne(sValTemp,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
						sValTemp		= Remplace(sValTemp,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
						sValTemp		= sValTemp + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
						sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						&#13;
						//Document - Notes&#13;
						sValTemp		= &amp;quot;&amp;quot;&#13;
						sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Référence&#13;
						sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
						sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Code Contrat de maintenance&#13;
						sValTemp		= &amp;quot;&amp;quot;&#13;
						sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Code suivi incident&#13;
						sValTemp		= &amp;quot;&amp;quot;&#13;
						sValTemp		= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV		= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Dépôt de destination&#13;
						sValTemp		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne_Depot_Dest)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Dépôt de transit&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Durée du transit&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Document - Date d&amp;apos;exécution&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code article&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Article)&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Description&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Description commerciale en clair&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Libelle_Article)&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Quantité&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code emplacement&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Série/lot&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SerieLot)&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Quantité (Série/Lot/Emplac.)&#13;
						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SerieLot) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
							sValTemp = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
						SINON&#13;
							sValTemp = &amp;quot;&amp;quot;&#13;
						FIN&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Contrat de maintenance/Analyse&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code suivi incident&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Dépôt&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne_Depot_Src)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code emplacement transit&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Code emplacement destination&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Dépôt de destination&#13;
						sValTemp	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne_Depot_Dest)&#13;
						SI sValTemp = &amp;quot;-1&amp;quot; ALORS sValTemp = &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Montant des Frais&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//Ligne - Réservé&#13;
						sValTemp	= &amp;quot;&amp;quot;&#13;
						sValTemp	= Remplace(sValTemp,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
						sEnregCSV	= sEnregCSV + Caract(34) +  sValTemp    + Caract(34) + &amp;quot;;&amp;quot; &#13;
						&#13;
						//&#13;
						sEnregCSV	= sEnregCSV + RC	&#13;
					FIN&#13;
				FIN&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				fEcritLigne(nIDFichier, &amp;amp;sEnregCSV, Taille(sEnregCSV))&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
				&#13;
				SI gbGlobaliser_Enreg_Import = Faux ALORS &#13;
					SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
					ExecuteImport(t)&#13;
					MAJ_Srv_Sync()	&#13;
				FIN&#13;
				&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI nIDFichier&amp;gt;0 ALORS fFerme(nIDFichier)&#13;
	SI sEnregCSV &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET gbGlobaliser_Enreg_Import = Vrai ALORS &#13;
		ExecuteImport(t)	&#13;
		MAJ_Srv_Sync()&#13;
	FIN&#13;
FIN&#13;
SI StrLogConcaténé &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS RapportEspaceClient(StrLogConcaténé,bIsImportValide)&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExecuteImport(t est un entier)&#13;
		SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
			//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
			SI PAS bEBPSaaS ALORS &#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS fFerme(nIDFichierLog)&#13;
				LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
				SI fFichierExiste(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;) ALORS&#13;
					StrLog = fChargeTexte(fExtraitChemin(sNomFic,fDisque+fFichier+fRépertoire) + &amp;quot;.log&amp;quot;)&#13;
				SINON&#13;
					StrLog = &amp;quot;erreur pas de log généré par EBP&amp;quot;&#13;
				FIN&#13;
			SINON&#13;
				(StrLog,bIsImportValide)=Import_Inserer_Excel(sNomProfilImport,sOrdreSDK,sNomFic,tabListeTypeEnreg[t,1])&#13;
				&#13;
				SI nIDFichierLog &amp;lt;&amp;gt; -1 ALORS&#13;
					fEcritLigne(nIDFichierLog, StrLog)&#13;
					fFerme(nIDFichierLog)&#13;
				FIN&#13;
			FIN&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Transfert Dépôt] : &amp;quot; + nNbImport + &amp;quot; nouveau(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
			SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
				TraceErr(&amp;quot;Fonction Import [Transfert Dépôt]&amp;quot; + RC + StrLog)&#13;
			SINON&#13;
				TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Transfert Dépôt]&amp;quot; + RC + StrLog)&#13;
			FIN&#13;
			//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
			NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
			SI PAS bEBPSaaS ALORS &#13;
				&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;transfert&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sMaReqTemp = &amp;quot;Select ID From [StockDocument] Where NotesClear Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
							//verspressePapier(sMaReqTemp)&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									tabIDInterneSrvTraité[x,2] = Vrai&#13;
								SINON&#13;
									tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
				&#13;
				&#13;
			SINON&#13;
				SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
					CAS &amp;quot;transfert&amp;quot;&#13;
						POUR x = 1 À NBtraité&#13;
							sRetRecherche=Import_RechercheDansNotes(sURLEBP,&amp;quot;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;quot;,&amp;quot;StockDocument&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
							SI sRetRecherche=&amp;quot;&amp;quot; ALORS&#13;
								tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
							SINON&#13;
								tabIDInterneSrvTraité[x,2] = Vrai&#13;
							FIN&#13;
						FIN&#13;
				FIN&#13;
			FIN&#13;
			&#13;
		FIN&#13;
	FIN&#13;
&#13;
&#13;
&#13;
	PROCÉDURE INTERNE MAJ_Srv_Sync()&#13;
		//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
		gsCheminImportFtp est une chaîne&#13;
		gsCheminImportFtp	= gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
		&#13;
		NBtraité			= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp				= &amp;quot;&amp;quot;&#13;
		StrLog				= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		StrLogConcaténé = StrLogConcaténé + [RC + &amp;quot;****************************&amp;quot; + RC] + StrLog&#13;
	FIN&#13;
// Résumé : &amp;lt;indiquez ici ce que fait la procédure&amp;gt;&#13;
// Syntaxe :&#13;
// ImportBon_Sortie ()&#13;
//&#13;
// Paramètres :&#13;
//	Aucun&#13;
// Valeur de retour :&#13;
// 	Aucune&#13;
//&#13;
// Exemple :&#13;
// &amp;lt;Indiquez ici un exemple d&amp;apos;utilisation&amp;gt;&#13;
//&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ADRESSE-COLLABORATEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456464</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT&#13;
Colleague.sysCreatedDate  AS DateCreation ,&#13;
Colleague.sysModifiedDate  AS DateModification ,&#13;
Colleague.Id  AS IDInterne ,&#13;
Colleague.Id  AS Code ,&#13;
&amp;apos;S&amp;apos; as TypeTiers,&#13;
Colleague.Contact_Name  AS Nom ,&#13;
Colleague.Contact_FirstName  AS Prenom ,&#13;
Colleague.Address_Address1  AS Adresse1 ,&#13;
Colleague.Address_Address2  AS Adresse2 ,&#13;
Colleague.Address_Address3  AS Adresse3 ,&#13;
Colleague.Address_ZipCode  AS CP ,&#13;
Colleague.Address_City  AS Ville ,&#13;
Colleague.Contact_Phone  AS Tel ,&#13;
Colleague.Contact_CellPhone  AS GSM ,&#13;
Colleague.Contact_Civility  AS Civilite ,&#13;
Colleague.Contact_Email AS Mail ,&#13;
Colleague.Contact_Fax AS Fax ,&#13;
Colleague.Contact_ColleagueFunction  AS ContactFonction ,&#13;
Colleague.Address_CountryIsoCode  AS IDInternePays ,&#13;
Colleague.Address_Longitude AS Longitude,&#13;
Colleague.Address_Latitude  AS Latitude,&#13;
Colleague.Notes  AS Note ,&#13;
Colleague.Id  AS IDInterneCollaborateur,&#13;
StorehouseId&#13;
%5&#13;
FROM Colleague&#13;
WHERE&#13;
Colleague.ActiveState  = 0</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ADRESSE-DEPOT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456464</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT&#13;
Storehouse.sysCreatedDate   AS DateCreation ,&#13;
Storehouse.sysModifiedDate   AS DateModification ,&#13;
Storehouse.Id   AS IDInterne ,&#13;
Storehouse.Id   AS Code ,&#13;
&amp;apos;D&amp;apos; as TypeTiers,&#13;
Contact_Name  AS Nom ,&#13;
Contact_FirstName   AS Prenom ,&#13;
Storehouse.Address_Address1   AS Adresse1 ,&#13;
Storehouse.Address_Address2   AS Adresse2 ,&#13;
Storehouse.Address_Address3   AS Adresse3 ,&#13;
Storehouse.Address_ZipCode   AS CP ,&#13;
Storehouse.Address_City   AS Ville ,&#13;
Storehouse.Contact_Phone   AS Tel ,&#13;
Contact_CellPhone   AS GSM ,&#13;
Contact_Email AS Mail ,&#13;
Contact_Fax AS Fax ,&#13;
Address_CountryIsoCode   AS IDInternePays ,&#13;
Address_Longitude AS Longitude,&#13;
Address_Latitude   AS Latitude,&#13;
Notes  AS Note&#13;
%5&#13;
FROM Storehouse</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>AFFAIRE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152213208</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Deal.sysCreatedDate AS DateCreation , &#13;
Deal.sysModifiedDate AS DateModification , &#13;
Deal.Id AS IDInterne , &#13;
Deal.Id AS Code , &#13;
Deal.Caption AS Libelle , &#13;
Deal.DealDate AS DateAffaire , &#13;
Deal.DealState AS Etape , &#13;
Deal.PredictedCosts AS PrixRevient_Previ, &#13;
Deal.PredictedSales AS PrixVente_Previ, &#13;
Deal.AccomplishedCosts AS PrixRevient, &#13;
Deal.AccomplishedSales AS PrixVente, &#13;
Deal.NotesClear AS Note ,&#13;
%5 &#13;
CASE Deal.DealState &#13;
     WHEN 0 THEN &amp;apos;A  l étude&amp;apos;&#13;
     WHEN 1 THEN &amp;apos;Accepté&amp;apos;&#13;
     WHEN 2  THEN &amp;apos;En cours&amp;apos;&#13;
     WHEN 3  THEN &amp;apos;Réceptionné&amp;apos;&#13;
     WHEN 4 THEN &amp;apos;Terminé&amp;apos;&#13;
     WHEN 5 THEN &amp;apos;Annulé&amp;apos;&#13;
&#13;
END  AS Etape_Libellé &#13;
&#13;
&#13;
&#13;
&#13;
FROM Deal &#13;
WHERE &#13;
Deal.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Deal.DealState &amp;lt;&amp;gt; 4 and Deal.DealState &amp;lt;&amp;gt; 5 And &#13;
DATEDIFF(day,Deal.DealDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305093300664</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Item.sysCreatedDate AS DateCreation , &#13;
Item.sysModifiedDate AS DateModification , &#13;
Item.Id AS IDInterne , &#13;
Item.Id AS Code , &#13;
Item.Caption AS Libelle , &#13;
Item.DesComClear AS Designation , &#13;
Item.ItemImage AS Photo , &#13;
Item.BarCode AS CodeBarre , &#13;
Item.UnitId AS IDInterneUnite_Vente  , &#13;
Item.DefaultQuantity AS QuantitéDéfaut , &#13;
Item.SupplierId AS IDInterneTiers_Fournisseur , &#13;
Item.PurchasePrice AS PrixAchat , &#13;
Item.SalePriceVatExcluded AS PRixVenteHT , &#13;
Item.Weight AS Poids , &#13;
Item.NetWeight AS PoidsNet , &#13;
(SELECT Vat.Rate FROM Vat WHERE  Vat.Id = Item.VatId) AS TauxTVA , &#13;
&#13;
Item.ManageStock AS GestionStock , &#13;
Item.RealStock AS StockReel , &#13;
Item.VirtualStock AS StockVirtuel , &#13;
Item.EcotaxId AS idinterneEcoTaxe , &#13;
&#13;
Item.NumberOfItemByPackage AS NbArtColis , &#13;
Item.AdvisedSalePriceVATExcluded AS PrixVentePublic , &#13;
Item.PriceDecimalNumber AS NbDecimalesPrix , &#13;
Item.Height AS Hauteur , &#13;
Item.Width AS Largeur , &#13;
Item.FamilyId AS IDInterneFamille , &#13;
Item.SubFamilyId AS IDInterneSousFamille , &#13;
Item.ItemType AS IDInterneTypeArticle , &#13;
Item.CostPrice AS PrixRevient , &#13;
Item.ReplacementItem AS ArticleRemplacement , &#13;
Item.DefaultLifeTime AS DuréedeVie , &#13;
Item.NotesClear AS Note , &#13;
Item.Length AS Longueur , &#13;
Item.DimensionUnitId AS IDInterneUnite_Taille , &#13;
&#13;
Item.VatId  AS  IDInterne_TVA, &#13;
Item.Volume AS Volume, &#13;
Item.VolumeUnitId AS IDInterneUnite_Volume,  &#13;
Item.SalePriceVatIncluded AS PrixVenteTTC, &#13;
Item.SupplierId AS CodeTiers_Fournisseur ,&#13;
 (SELECT TOP 1 ThirdReference.Reference FROM ThirdReference WHERE ThirdReference.ThirdId = Item.SupplierId  AND ThirdReference.ItemId = Item.Id ) AS ReferenceFournisseur,&#13;
&#13;
Item.WeightUnitId As IDInterneUnite_Poids,&#13;
Item.ParentRangeItemId AS IDInterne_ArticleGammeParent, &#13;
Item.ParentRangeItemId AS Code_ArticleGammeParent, &#13;
Item.RangeTypeElementId0 AS IDInterne_ElementGamme1, &#13;
Item.RangeTypeElementId1 AS IDInterne_ElementGamme2, &#13;
Item.RangeTypeElementId2 AS IDInterne_ElementGamme3, &#13;
Item.RangeTypeElementId3 AS IDInterne_ElementGamme4, &#13;
Item.RangeTypeElementId4 AS IDInterne_ElementGamme5,&#13;
&amp;apos;0&amp;apos; AS GéréEnGamme,&#13;
CASE TrackingMode &#13;
    WHEN 0 THEN &#13;
        &amp;apos;0&amp;apos;&#13;
    ELSE&#13;
         &amp;apos;1&amp;apos;&#13;
END  AS GéréEnSérieLot, &#13;
CASE LimitDateMode &#13;
    WHEN 0 THEN &#13;
        &amp;apos;0&amp;apos;&#13;
    ELSE&#13;
         &amp;apos;1&amp;apos;&#13;
END  AS GéréEnDLUO  ,&#13;
Item.Group1 AS IDInterne_Groupe1,&#13;
Item.Group2 AS IDInterne_Groupe2,&#13;
Id AS RegimeTvaArticle&#13;
&#13;
&#13;
&#13;
%5&#13;
FROM Item &#13;
&#13;
&#13;
&#13;
WHERE &#13;
&#13;
/*&#13;
-- Pour ne synchroniser que les articles vendus ou nouvellement créé&#13;
(EXISTS (&#13;
        SELECT 1&#13;
        FROM SaleDocumentLine&#13;
        WHERE SaleDocumentLine.ItemId = Item.Id&#13;
    )&#13;
    OR Item.sysCreatedDate &amp;gt;= DATEADD(DAY, -%2, GETDATE()))&#13;
AND&#13;
*/&#13;
Item.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Item.ActiveState &amp;lt;&amp;gt; 1 and Item.ActiveState &amp;lt;&amp;gt; 2 and   ((FamilyId NOT IN (%8) or FamilyId is Null) and (SubFamilyId NOT IN (%8) or SubFamilyId is Null))&#13;
&#13;
/* Pour ne synchroniser que les articles vendus ou nouvellement créé&#13;
&#13;
WHERE&#13;
(EXISTS (&#13;
        SELECT 1&#13;
        FROM SaleDocumentLine&#13;
        WHERE SaleDocumentLine.ItemId = Item.Id&#13;
    )&#13;
    OR Item.sysCreatedDate &amp;gt;= DATEADD(DAY, -%2, GETDATE()))&#13;
AND&#13;
Item.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Item.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Item.ActiveState &amp;lt;&amp;gt; 1 and Item.ActiveState &amp;lt;&amp;gt; 2 and   ((FamilyId NOT IN (%8) or FamilyId is Null) and (SubFamilyId NOT IN (%8) or SubFamilyId is Null))&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLEFOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152402092</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SupplierItem.sysCreatedDate AS DateCreation , &#13;
SupplierItem.sysModifiedDate AS DateModification , &#13;
SupplierItem.Id AS IDInterne , &#13;
SupplierItem.Id AS Code , &#13;
SupplierItem.ItemId AS IDInterneArticle , &#13;
SupplierItem.SupplierId AS IDInterneTiers_Fournisseur , &#13;
SupplierItem.PurchaseUnitId AS IDInterneUnite_Achat , &#13;
&#13;
(SELECT ThirdReference.Reference FROM ThirdReference WHERE ThirdReference.Id = SupplierItem.ReferenceId ) AS ReferenceFournisseur,&#13;
(SELECT ThirdReference.BarCode FROM ThirdReference WHERE ThirdReference.Id = SupplierItem.ReferenceId ) AS CodeBarre, &#13;
&#13;
SupplierItem.NetPurchasePrice AS PrixAchat &#13;
FROM SupplierItem&#13;
WHERE&#13;
SupplierItem.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) </Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLE_SERIELOT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241127142405493</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
TrackingStockItem.ItemId + CONVERT(VARCHAR(50),TrackingStockItem.StorehouseId) as IDInterne,&#13;
TrackingStockItem.sysCreatedDate AS DateCreation, &#13;
TrackingStockItem.sysModifiedDate AS DateModification, &#13;
&#13;
TrackingStockItem.ItemId AS IDInterneArticle, &#13;
TrackingStockItem.StorehouseId AS IDInterne_Dépôt, &#13;
TrackingStockItem.RealStock AS Stock_Réel, &#13;
TrackingStockItem.VirtualStock AS Stock_Virtuel, &#13;
TrackingStockItem.TrackingNumber AS SérieLot, &#13;
TrackingStockItem.LimitDate AS DLUO &#13;
FROM TrackingStockItem , Item&#13;
&#13;
WHERE &#13;
TrackingStockItem.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
TrackingStockItem.RealStock &amp;gt; 0 AND Item.Id =TrackingStockItem.ItemId And &#13;
Item.ActiveState =0 and  ((FamilyId NOT IN (%8) or FamilyId is Null) and (SubFamilyId NOT IN (%8) or SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLE_GAMME</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152446019</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
RangeItem.Id AS IDInterne, &#13;
RangeItem.Id AS Code, &#13;
RangeItem.Caption AS Libelle, &#13;
RangeItem.FamilyId AS IDInterneFamille, &#13;
RangeItem.SubFamilyId AS IDInterneSousFamille, &#13;
RangeItem.ItemType AS IDInterneTypeArticle, &#13;
RangeItem.DesComClear AS Designation, &#13;
RangeItem.ItemImage AS Photo, &#13;
RangeItem.BarCode AS CodeBarre, &#13;
RangeItem.UnitId AS IDInterneUnite_Vente, &#13;
RangeItem.DefaultQuantity AS QuantitéDéfaut, &#13;
RangeItem.SupplierId AS IDInterneTiers_Fournisseur, &#13;
RangeItem.PurchasePrice AS PrixAchat, &#13;
RangeItem.CostPrice AS PrixRevient, &#13;
RangeItem.SalePriceVatExcluded AS PRixVenteHT, &#13;
RangeItem.VatId AS IDInterne_TVA, &#13;
(SELECT Vat.Rate FROM Vat WHERE  Vat.Id = RangeItem.VatId) AS TauxTVA , &#13;
RangeItem.SalePriceVatIncluded AS PrixVenteTTC, &#13;
RangeItem.ManageStock AS GestionStock, &#13;
RangeItem.Volume AS Volume, &#13;
RangeItem.VolumeUnitId AS IDInterneUnite_Volume, &#13;
RangeItem.Weight AS Poids, &#13;
RangeItem.NetWeight AS PoidsNet, &#13;
RangeItem.WeightUnitId AS IDInterneUnite_Poids, &#13;
RangeItem.NumberOfItemByPackage AS NbArtColis, &#13;
RangeItem.AdvisedSalePriceVATExcluded AS PrixVentePublic,&#13;
RangeItem.Height AS Hauteur, &#13;
RangeItem.Width AS Largeur, &#13;
RangeItem.Length AS Longueur, &#13;
RangeItem.DimensionUnitId AS IDInterneUnite_Taille, &#13;
RangeItem.PriceDecimalNumber AS NbDecimalesPrix, &#13;
RangeItem.RangeTypeId0 AS IDInterne_ElementGamme1, &#13;
RangeItem.RangeTypeId1 AS IDInterne_ElementGamme2, &#13;
RangeItem.RangeTypeId2 AS IDInterne_ElementGamme3, &#13;
RangeItem.RangeTypeId3 AS IDInterne_ElementGamme4, &#13;
RangeItem.RangeTypeId4 AS IDInterne_ElementGamme5, &#13;
&amp;apos;1&amp;apos; AS GéréEnGamme,&#13;
&amp;apos;&amp;apos; AS IDInterne_ArticleGammeParent, &#13;
&amp;apos;&amp;apos; AS Code_ArticleGammeParent,&#13;
RangeItem.EcotaxId AS idinterneEcoTaxe,&#13;
(SELECT TOP 1 ThirdReference.Reference FROM ThirdReference WHERE ThirdReference.ThirdId = RangeItem.SupplierId  AND ThirdReference.ItemId = RangeItem.Id ) AS ReferenceFournisseur&#13;
 &#13;
&#13;
%5&#13;
&#13;
&#13;
FROM RangeItem &#13;
&#13;
WHERE &#13;
RangeItem.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
RangeItem.ActiveState &amp;lt;&amp;gt; 1 and RangeItem.ActiveState &amp;lt;&amp;gt; 2 and   ((RangeItem.FamilyId NOT IN (%8) or RangeItem.FamilyId is Null) and (RangeItem.SubFamilyId NOT IN (%8) or RangeItem.SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLELIE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152507481</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
LinkedItem.sysCreatedDate AS DateCreation , &#13;
LinkedItem.sysModifiedDate AS DateModification , &#13;
LinkedItem.Id AS IDInterne , &#13;
LinkedItem.Id AS Code , &#13;
LinkedItem.ItemId AS IDInterneArticle , &#13;
LinkedItem.LinkedItemId AS IDInterneArticle_Lié , &#13;
LinkedItem.Quantity AS Quantités , &#13;
LinkedItem.IsFree AS Gratuit , &#13;
LinkedItem.LineOrder AS Ordre, &#13;
&#13;
CASE&#13;
WHEN  LinkedItem.OfferForSale = 0 THEN &amp;apos;L&amp;apos;&#13;
WHEN  LinkedItem.OfferForSale = 1 THEN &amp;apos;P&amp;apos;&#13;
END AS TypeLiaison,&#13;
&#13;
1 AS Valoriser, &#13;
LinkedItem.IsProportional  as MultiplierQuantité, &#13;
Item.Id AS CodeArticle_Lié, &#13;
Item.ItemType AS IDInterneArticleLié_Type, &#13;
Item.SalePriceVatExcluded AS PrixVente, &#13;
Item.CostPrice AS PrixAchat, &#13;
Item.Caption AS LibelleArticle_Lié,&#13;
Item.DesComClear AS DesignationArticle_Lié, &#13;
Item.UnitId AS Unite,&#13;
&#13;
CASE &#13;
WHEN LinkedItem.OfferForSale = 0 THEN 1 &#13;
WHEN LinkedItem.OfferForSale  = 1 THEN 0&#13;
ELSE&#13;
0&#13;
END AS NePasRemonterCetteLigne &#13;
&#13;
FROM LinkedItem, Item&#13;
Where  &#13;
LinkedItem.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
&#13;
LinkedItem.LinkedItemId = Item.Id    &#13;
&#13;
&#13;
/*and LinkedItem.OfferForPurchase = 0*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLE_TEXTE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113162111339</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
StandardText.Id AS IDInterne, &#13;
StandardText.Id AS Code, &#13;
StandardText.Caption AS Libelle, &#13;
StandardText.StandardTextClear AS Designation, &#13;
&amp;apos;TXT&amp;apos; AS IDInterneTypeArticle,&#13;
&amp;apos;&amp;apos; AS Photo&#13;
&#13;
&#13;
FROM StandardText&#13;
WHERE &#13;
StandardText.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTAVOIR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082616446</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH DocumentData AS (&#13;
    SELECT &#13;
        SaleDocument.sysCreatedDate AS DateCreation, &#13;
        SaleDocument.sysModifiedDate AS DateModification, &#13;
        SaleDocument.Id AS IDInterne, &#13;
        SaleDocument.DocumentNumber AS Code, &#13;
        &amp;apos;AVOIR&amp;apos; AS TypeDocument, &#13;
        SaleDocument.DocumentDate AS Document_Date, &#13;
        SaleDocument.TotalVolume AS VolumeTotal, &#13;
        SaleDocument.TotalWeight AS PoidsTotal, &#13;
        SaleDocument.AssociatedInvoiceId AS IdInterneDocument_Facture, &#13;
        SaleDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL, &#13;
        SaleDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié, &#13;
        SaleDocument.InvoicingAddress_Address1 AS Facturation_Adresse1,&#13;
        SaleDocument.InvoicingAddress_Address2 AS Facturation_Adresse2, &#13;
        SaleDocument.InvoicingAddress_Address3 AS Facturation_Adresse3, &#13;
        SaleDocument.InvoicingAddress_ZipCode AS Facturation_CP, &#13;
        SaleDocument.InvoicingAddress_City AS Facturation_Ville, &#13;
        SaleDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays, &#13;
        SaleDocument.InvoicingContact_Civility AS Facturation_Contact_Civilite, &#13;
        CASE &#13;
            WHEN SaleDocument.InvoicingAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.InvoicingAddress_ThirdName&#13;
        END AS FacturationNom, &#13;
        CASE &#13;
            WHEN SaleDocument.DeliveryAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.DeliveryAddress_ThirdName&#13;
        END AS LivraisonNom, &#13;
        SaleDocument.InvoicingContact_Name AS Facturation_Contact_Nom, &#13;
        SaleDocument.InvoicingContact_FirstName AS Facturation_Contact_Prenom, &#13;
        SaleDocument.InvoicingContact_Phone AS Facturation_Contact_Tel, &#13;
        SaleDocument.InvoicingContact_Email AS Facturation_Contact_Mail, &#13;
        SaleDocument.DeliveryAddress_Address1 AS Livraison_Adresse1, &#13;
        SaleDocument.DeliveryAddress_Address2 AS Livraison_Adresse2, &#13;
        SaleDocument.DeliveryAddress_Address3 AS Livraison_Adresse3, &#13;
        SaleDocument.DeliveryAddress_ZipCode AS Livraison_CP, &#13;
        SaleDocument.DeliveryAddress_City AS Livraison_Ville, &#13;
        SaleDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays, &#13;
        SaleDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite, &#13;
        SaleDocument.DeliveryContact_Name AS Livraison_Contact_Nom, &#13;
        SaleDocument.DeliveryContact_FirstName AS Livraison_Contact_Prenom, &#13;
        SaleDocument.DeliveryContact_Email AS Livraison_Contact_Mail, &#13;
        SaleDocument.DeliveryContact_Phone AS Livraison_Contact_Tel, &#13;
        SaleDocument.CustomerId AS IDInterneTiers, &#13;
        SaleDocument.CustomerId AS CodeTiers, &#13;
        SaleDocument.CustomerName AS NomTiers, &#13;
        SaleDocument.ColleagueId AS IDInterneCollaborateur, &#13;
        SaleDocument.ValidityDate AS DateValidité, &#13;
        SaleDocument.DeliveryDate AS DateLivraison, &#13;
        SaleDocument.DeliveryState AS EtatLivraison, &#13;
        SaleDocument.OriginDocumentNumber AS NumDocOrigine, &#13;
        SaleDocument.StorehouseId AS IDInterneDepot, &#13;
        SaleDocument.CommitmentsBalanceDue AS SoldeDu, &#13;
        SaleDocument.AmountVatExcluded AS MontantBrutHT, &#13;
        SaleDocument.CostPrice AS PrixRevient, &#13;
        SaleDocument.DiscountRate AS PrcRemisePied, &#13;
        SaleDocument.DiscountAmount AS MontantNetHT, &#13;
        SaleDocument.ShippingAmountVatExcluded AS PortFraisHT, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocument.ShippingVatId) AS PortTauxTva, &#13;
        SaleDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax AS MontantNetNetHT, &#13;
        SaleDocument.EcotaxAmountVatExcluded AS EcoTaxeHT, &#13;
        SaleDocument.DepositAmount AS MontantAcompte, &#13;
        SaleDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC, &#13;
        SaleDocument.AmountVatIncluded AS MontantNetNetTTC, &#13;
        SaleDocument.DealId AS IDInterneAffaire, &#13;
        SaleDocument.NotesClear AS Note, &#13;
        SaleDocument.TotalDueAmount AS NetAPayer,  &#13;
        SaleDocument.NumberOfPackage AS NombreColis, &#13;
        SaleDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
        SaleDocument.FinancialDiscountRate AS PrcEscompte, &#13;
        SaleDocument.Reference AS Libellé, &#13;
        SaleDocument.SettlementModeId AS IDInterneModeReglement, &#13;
        SaleDocument.DiscountAmount AS MontantRemisePied, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays, &#13;
        SaleDocument.InvoicingAddress_Civility AS Facturation_Civilite, &#13;
        SaleDocument.DeliveryAddress_Civility AS Livraison_Civilite, &#13;
        SaleDocument.DealId AS IDInterne_Affaire, &#13;
        SaleDocument.ConstructionSiteId AS IDInterne_Chantier, &#13;
        SaleDocument.InvoicingContact_CellPhone AS Facturation_Contact_GSM, &#13;
        SaleDocument.DeliveryContact_CellPhone AS Livraison_Contact_GSM,&#13;
        -- Calcul du rang pour chaque client (les plus récents ayant rn = 1)&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        -- Calcul de la différence en jours entre Document_Date et aujourd&amp;apos;hui&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
		%5&#13;
    FROM SaleDocument&#13;
    WHERE (DocumentType = 3) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM DocumentData&#13;
WHERE &#13;
    -- Application exclusive de la condition en fonction de %3&#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, Document_Date DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-AVOIR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082655881</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH LineData AS (&#13;
    SELECT &#13;
        SaleDocument.DocumentType, &#13;
        SaleDocument.DocumentDate, &#13;
        &amp;apos;AVOIR&amp;apos; AS TypeDocument, &#13;
        SaleDocumentLine.sysCreatedDate AS DateCreation, &#13;
        SaleDocumentLine.sysModifiedDate AS DateModification, &#13;
        SaleDocumentLine.Id AS Code, &#13;
        SaleDocumentLine.ParentLineId AS RefNiveauPere, &#13;
        SaleDocumentLine.Id AS IDInterne, &#13;
        SaleDocumentLine.DocumentId AS IDInterneDocument, &#13;
        SaleDocumentLine.LineOrder AS NumeroLigne, &#13;
        SaleDocumentLine.ItemId AS CodeArticle, &#13;
        SaleDocumentLine.ItemId AS IDInerneArticle, &#13;
        SaleDocumentLine.Quantity AS Quantité, &#13;
        SaleDocumentLine.DescriptionClear AS Designation, &#13;
        SaleDocumentLine.UnitId AS IDInerneUnite, &#13;
        SaleDocumentLine.TotalVolume AS VolumeTotal, &#13;
        SaleDocumentLine.TotalWeight AS PoidsTotal, &#13;
        SaleDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
        SaleDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
        SaleDocumentLine.PurchasePrice AS PrixAchat, &#13;
        SaleDocumentLine.TrackingNumber AS SerieLotNumero, &#13;
        SaleDocumentLine.LimitDate AS SerieLotDateLimite, &#13;
        SaleDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
        SaleDocumentLine.CostPrice AS PrixRevient, &#13;
        SaleDocumentLine.UnitDiscountRate AS PrcRemise, &#13;
        SaleDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
        SaleDocumentLine.salePriceVatExcluded AS PrixVenteBrutHT, &#13;
        SaleDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatIncluded AS MontantEcoTaxeTTC, &#13;
        SaleDocumentLine.VatAmount AS MontantTva, &#13;
        SaleDocumentLine.OrderedQuantity AS QuantitéCommandée, &#13;
        SaleDocumentLine.DeliveredQuantity AS QuantitéLIvrée, &#13;
        SaleDocumentLine.RemainingQuantityToDeliver AS Reliquat, &#13;
        SaleDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
        SaleDocumentLine.DealId AS IDInterne_Affaire, &#13;
        SaleDocumentLine.VatId AS idinterneTVA, &#13;
        (LEN(Numbering) - LEN(REPLACE(Numbering, &amp;apos;.&amp;apos;, &amp;apos;&amp;apos;)) + 1) AS Niveau, &#13;
        SaleDocumentLine.Id AS RefNiveauHierarchie, &#13;
        &amp;apos;0&amp;apos; AS ValoriserLieCompose, &#13;
        &amp;apos;0&amp;apos; AS QuantifierLieCompose, &#13;
        CASE &#13;
            WHEN SaleDocumentLine.NomenclatureLevel &amp;gt; 0 THEN &amp;apos;1&amp;apos;&#13;
            ELSE &amp;apos;0&amp;apos;&#13;
        END AS Composant, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocumentLine.VatId) AS TauxTVA, &#13;
        SaleDocumentLine.Weight AS PoidsUnitaire,&#13;
        -- Colonnes supplémentaires pour le filtrage :&#13;
        SaleDocument.CustomerId AS IDInterneTiers,&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
        %5&#13;
    FROM SaleDocument&#13;
    INNER JOIN SaleDocumentLine &#13;
        ON SaleDocument.Id = SaleDocumentLine.DocumentId&#13;
    WHERE (DocumentType = 3 ) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM LineData&#13;
WHERE &#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, DocumentDate DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTBL</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082002224</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH DocumentData AS (&#13;
    SELECT &#13;
        SaleDocument.sysCreatedDate AS DateCreation, &#13;
        SaleDocument.sysModifiedDate AS DateModification, &#13;
        SaleDocument.Id AS IDInterne, &#13;
        SaleDocument.DocumentNumber AS Code, &#13;
        &amp;apos;BL&amp;apos; AS TypeDocument, &#13;
        SaleDocument.DocumentDate AS Document_Date, &#13;
        SaleDocument.TotalVolume AS VolumeTotal, &#13;
        SaleDocument.TotalWeight AS PoidsTotal, &#13;
        SaleDocument.AssociatedInvoiceId AS IdInterneDocument_Facture, &#13;
        SaleDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL, &#13;
        SaleDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié, &#13;
        SaleDocument.InvoicingAddress_Address1 AS Facturation_Adresse1,&#13;
        SaleDocument.InvoicingAddress_Address2 AS Facturation_Adresse2, &#13;
        SaleDocument.InvoicingAddress_Address3 AS Facturation_Adresse3, &#13;
        SaleDocument.InvoicingAddress_ZipCode AS Facturation_CP, &#13;
        SaleDocument.InvoicingAddress_City AS Facturation_Ville, &#13;
        SaleDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays, &#13;
        SaleDocument.InvoicingContact_Civility AS Facturation_Contact_Civilite, &#13;
        CASE &#13;
            WHEN SaleDocument.InvoicingAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.InvoicingAddress_ThirdName&#13;
        END AS FacturationNom, &#13;
        CASE &#13;
            WHEN SaleDocument.DeliveryAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.DeliveryAddress_ThirdName&#13;
        END AS LivraisonNom, &#13;
        SaleDocument.InvoicingContact_Name AS Facturation_Contact_Nom, &#13;
        SaleDocument.InvoicingContact_FirstName AS Facturation_Contact_Prenom, &#13;
        SaleDocument.InvoicingContact_Phone AS Facturation_Contact_Tel, &#13;
        SaleDocument.InvoicingContact_Email AS Facturation_Contact_Mail, &#13;
        SaleDocument.DeliveryAddress_Address1 AS Livraison_Adresse1, &#13;
        SaleDocument.DeliveryAddress_Address2 AS Livraison_Adresse2, &#13;
        SaleDocument.DeliveryAddress_Address3 AS Livraison_Adresse3, &#13;
        SaleDocument.DeliveryAddress_ZipCode AS Livraison_CP, &#13;
        SaleDocument.DeliveryAddress_City AS Livraison_Ville, &#13;
        SaleDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays, &#13;
        SaleDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite, &#13;
        SaleDocument.DeliveryContact_Name AS Livraison_Contact_Nom, &#13;
        SaleDocument.DeliveryContact_FirstName AS Livraison_Contact_Prenom, &#13;
        SaleDocument.DeliveryContact_Email AS Livraison_Contact_Mail, &#13;
        SaleDocument.DeliveryContact_Phone AS Livraison_Contact_Tel, &#13;
        SaleDocument.CustomerId AS IDInterneTiers, &#13;
        SaleDocument.CustomerId AS CodeTiers, &#13;
        SaleDocument.CustomerName AS NomTiers, &#13;
        SaleDocument.ColleagueId AS IDInterneCollaborateur, &#13;
        SaleDocument.ValidityDate AS DateValidité, &#13;
        SaleDocument.DeliveryDate AS DateLivraison, &#13;
        SaleDocument.DeliveryState AS EtatLivraison, &#13;
        SaleDocument.OriginDocumentNumber AS NumDocOrigine, &#13;
        SaleDocument.StorehouseId AS IDInterneDepot, &#13;
        SaleDocument.CommitmentsBalanceDue AS SoldeDu, &#13;
        SaleDocument.AmountVatExcluded AS MontantBrutHT, &#13;
        SaleDocument.CostPrice AS PrixRevient, &#13;
        SaleDocument.DiscountRate AS PrcRemisePied, &#13;
        SaleDocument.DiscountAmount AS MontantNetHT, &#13;
        SaleDocument.ShippingAmountVatExcluded AS PortFraisHT, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocument.ShippingVatId) AS PortTauxTva, &#13;
        SaleDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax AS MontantNetNetHT, &#13;
        SaleDocument.EcotaxAmountVatExcluded AS EcoTaxeHT, &#13;
        SaleDocument.DepositAmount AS MontantAcompte, &#13;
        SaleDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC, &#13;
        SaleDocument.AmountVatIncluded AS MontantNetNetTTC, &#13;
        SaleDocument.DealId AS IDInterneAffaire, &#13;
        SaleDocument.NotesClear AS Note, &#13;
        SaleDocument.TotalDueAmount AS NetAPayer,  &#13;
        SaleDocument.NumberOfPackage AS NombreColis, &#13;
        SaleDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
        SaleDocument.FinancialDiscountRate AS PrcEscompte, &#13;
        SaleDocument.Reference AS Libellé, &#13;
        SaleDocument.SettlementModeId AS IDInterneModeReglement, &#13;
        SaleDocument.DiscountAmount AS MontantRemisePied, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays, &#13;
        SaleDocument.InvoicingAddress_Civility AS Facturation_Civilite, &#13;
        SaleDocument.DeliveryAddress_Civility AS Livraison_Civilite, &#13;
        SaleDocument.DealId AS IDInterne_Affaire, &#13;
        SaleDocument.ConstructionSiteId AS IDInterne_Chantier, &#13;
        SaleDocument.InvoicingContact_CellPhone AS Facturation_Contact_GSM, &#13;
        SaleDocument.DeliveryContact_CellPhone AS Livraison_Contact_GSM,&#13;
        -- Calcul du rang pour chaque client (les plus récents ayant rn = 1)&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        -- Calcul de la différence en jours entre Document_Date et aujourd&amp;apos;hui&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
		%5&#13;
    FROM SaleDocument&#13;
    WHERE (DocumentType = 6) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM DocumentData&#13;
WHERE &#13;
    -- Application exclusive de la condition en fonction de %3&#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, Document_Date DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-BL</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082425720</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH LineData AS (&#13;
    SELECT &#13;
        SaleDocument.DocumentType, &#13;
        SaleDocument.DocumentDate, &#13;
        &amp;apos;BL&amp;apos; AS TypeDocument, &#13;
        SaleDocumentLine.sysCreatedDate AS DateCreation, &#13;
        SaleDocumentLine.sysModifiedDate AS DateModification, &#13;
        SaleDocumentLine.Id AS Code, &#13;
        SaleDocumentLine.ParentLineId AS RefNiveauPere, &#13;
        SaleDocumentLine.Id AS IDInterne, &#13;
        SaleDocumentLine.DocumentId AS IDInterneDocument, &#13;
        SaleDocumentLine.LineOrder AS NumeroLigne, &#13;
        SaleDocumentLine.ItemId AS CodeArticle, &#13;
        SaleDocumentLine.ItemId AS IDInerneArticle, &#13;
        SaleDocumentLine.Quantity AS Quantité, &#13;
        SaleDocumentLine.DescriptionClear AS Designation, &#13;
        SaleDocumentLine.UnitId AS IDInerneUnite, &#13;
        SaleDocumentLine.TotalVolume AS VolumeTotal, &#13;
        SaleDocumentLine.TotalWeight AS PoidsTotal, &#13;
        SaleDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
        SaleDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
        SaleDocumentLine.PurchasePrice AS PrixAchat, &#13;
        SaleDocumentLine.TrackingNumber AS SerieLotNumero, &#13;
        SaleDocumentLine.LimitDate AS SerieLotDateLimite, &#13;
        SaleDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
        SaleDocumentLine.CostPrice AS PrixRevient, &#13;
        SaleDocumentLine.UnitDiscountRate AS PrcRemise, &#13;
        SaleDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
        SaleDocumentLine.salePriceVatExcluded AS PrixVenteBrutHT, &#13;
        SaleDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatIncluded AS MontantEcoTaxeTTC, &#13;
        SaleDocumentLine.VatAmount AS MontantTva, &#13;
        SaleDocumentLine.OrderedQuantity AS QuantitéCommandée, &#13;
        SaleDocumentLine.DeliveredQuantity AS QuantitéLIvrée, &#13;
        SaleDocumentLine.RemainingQuantityToDeliver AS Reliquat, &#13;
        SaleDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
        SaleDocumentLine.DealId AS IDInterne_Affaire, &#13;
        SaleDocumentLine.VatId AS idinterneTVA, &#13;
        (LEN(Numbering) - LEN(REPLACE(Numbering, &amp;apos;.&amp;apos;, &amp;apos;&amp;apos;)) + 1) AS Niveau, &#13;
        SaleDocumentLine.Id AS RefNiveauHierarchie, &#13;
        &amp;apos;0&amp;apos; AS ValoriserLieCompose, &#13;
        &amp;apos;0&amp;apos; AS QuantifierLieCompose, &#13;
        CASE &#13;
            WHEN SaleDocumentLine.NomenclatureLevel &amp;gt; 0 THEN &amp;apos;1&amp;apos;&#13;
            ELSE &amp;apos;0&amp;apos;&#13;
        END AS Composant, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocumentLine.VatId) AS TauxTVA, &#13;
        SaleDocumentLine.Weight AS PoidsUnitaire,&#13;
        -- Colonnes supplémentaires pour le filtrage :&#13;
        SaleDocument.CustomerId AS IDInterneTiers,&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
        %5&#13;
    FROM SaleDocument&#13;
    INNER JOIN SaleDocumentLine &#13;
        ON SaleDocument.Id = SaleDocumentLine.DocumentId&#13;
    WHERE (DocumentType = 6 ) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM LineData&#13;
WHERE &#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, DocumentDate DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CHANTIER</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152648897</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ConstructionSite.sysCreatedDate AS DateCreation, &#13;
ConstructionSite.sysModifiedDate AS DateModification, &#13;
ConstructionSite.Id AS Code, &#13;
ConstructionSite.Id AS IDInterne, &#13;
ConstructionSite.Caption AS Libelle,&#13;
ConstructionSite.StartDate AS DateDébut, &#13;
ConstructionSite.EndDate AS DateFin, &#13;
ConstructionSite.ConstructionSiteAddress_Address1 AS Adresse1, &#13;
ConstructionSite.ConstructionSiteAddress_Address2 AS Adresse2, &#13;
ConstructionSite.ConstructionSiteAddress_ZipCode AS CP, &#13;
ConstructionSite.ConstructionSiteAddress_City AS Ville, &#13;
ConstructionSite.ConstructionSiteAddress_CountryIsoCode AS IDInternePays, &#13;
(SELECT Country.Caption FROM Country WHERE Country.IsoCode = ConstructionSite.ConstructionSiteAddress_CountryIsoCode ) AS Pays, &#13;
ConstructionSite.CustomerId AS IDInterne_Tiers, &#13;
ConstructionSite.DealId AS IDInterne_Affaire,&#13;
ConstructionSite.ConstructionSiteAddress_Longitude AS Longitude, &#13;
ConstructionSite.ConstructionSiteAddress_Latitude AS Latitude&#13;
&#13;
&#13;
&#13;
FROM ConstructionSite &#13;
WHERE &#13;
ConstructionSite.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
ConstructionSite.Status &amp;lt;&amp;gt; 0 and ConstructionSite.Status &amp;lt;&amp;gt; 4</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CIVILITE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456568</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Civility.sysCreatedDate AS DateCreation, &#13;
Civility.sysModifiedDate AS DateModification, &#13;
Civility.Caption AS IDInterne, &#13;
Civility.Caption AS Code, &#13;
Civility.Caption AS Libelle, &#13;
&#13;
CASE &#13;
WHEN Civility.NaturalPerson = 0 THEN &amp;apos;Forme_Juridique&amp;apos;&#13;
ELSE&#13;
&amp;apos;Civilité&amp;apos;&#13;
END AS TypeNomenclature&#13;
&#13;
&#13;
&#13;
FROM Civility</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>-TIERS-CLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250205164457632</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Customer.sysCreatedDate AS DateCreation , &#13;
Customer.sysModifiedDate AS DateModification , &#13;
Customer.Id AS IDInterne , &#13;
Customer.Id AS Code , &#13;
&amp;apos;C&amp;apos; AS TypeTiers ,&#13;
Customer.Civility AS Civilité , &#13;
Customer.Name AS Nom, &#13;
Customer.MainDeliveryAddress_Address1 AS Livraison_Adresse1 , &#13;
Customer.MainDeliveryAddress_Address2 AS Livraison_Adresse2 , &#13;
Customer.MainDeliveryAddress_Address3 AS Livraison_Adresse3 , &#13;
Customer.MainDeliveryAddress_ZipCode AS Livraison_CP , &#13;
Customer.MainDeliveryAddress_City AS Livraison_Ville , &#13;
Customer.MainDeliveryAddress_CountryIsoCode AS Livraison_IDInternePays , &#13;
Customer.MainDeliveryAddress_Longitude AS Livraison_Longitude , &#13;
Customer.MainDeliveryAddress_Latitude AS Livraison_Latitude , &#13;
Customer.MainDeliveryContact_Civility AS Livraison_Contact_Civilite , &#13;
Customer.MainDeliveryContact_Name AS Livraison_Contact_Nom , &#13;
Customer.MainDeliveryContact_FirstName AS Livraison_contact_Prenom , &#13;
Customer.MainDeliveryContact_Phone AS Livraison_Contact_Tel , &#13;
Customer.MainDeliveryContact_CellPhone AS Livraison_Contact_GSM , &#13;
Customer.MainDeliveryContact_Fax AS Livraison_Contact_Fax , &#13;
Customer.MainDeliveryContact_Email AS Livraison_Contact_Mail , &#13;
Customer.MainDeliveryContact_Function AS Livraison_Contact_Fonction , &#13;
Customer.MainDeliveryContact_Department AS Livraison_Contact_Service , &#13;
Customer.MainInvoicingAddress_Address1 AS Facturation_Adresse1 , &#13;
Customer.MainInvoicingAddress_Address2 AS Facturation_Adresse2 , &#13;
Customer.MainInvoicingAddress_Address3 AS Facturation_Adresse3 , &#13;
Customer.MainInvoicingAddress_ZipCode AS Facturation_CP , &#13;
Customer.MainInvoicingAddress_City AS Facturation_Ville , &#13;
Customer.MainInvoicingAddress_CountryIsoCode AS Facturation_IDInternePays , &#13;
Customer.MainInvoicingAddress_Longitude AS Facturation_Longitude , &#13;
Customer.MainInvoicingAddress_Latitude AS Facturation_Latitude , &#13;
Customer.MainInvoicingContact_Civility AS Facturation_Contact_Civilite , &#13;
Customer.MainInvoicingContact_Name AS Facturation_Contact_Nom , &#13;
Customer.MainInvoicingContact_FirstName AS Facturation_Contact_Prenom , &#13;
Customer.MainInvoicingContact_Function AS Facturation_Contact_Fonction , &#13;
Customer.MainInvoicingContact_Phone AS Facturation_Contact_Tel , &#13;
Customer.MainInvoicingContact_CellPhone AS Facturation_Contact_GSM , &#13;
Customer.MainInvoicingContact_Fax AS Facturation_Contact_Fax , &#13;
Customer.MainInvoicingContact_Email AS Facturation_Contact_Mail , &#13;
Customer.MainInvoicingContact_Department AS  Facturation_Contact_Service , &#13;
Customer.MainDeliveryAddress_Description AS Livraison_Info, &#13;
Customer.MainInvoicingAddress_Description AS Facturation_Info, &#13;
Customer.FamilyId AS IDInterneFamille , &#13;
Customer.SubFamilyId AS IDInterneSousFamille , &#13;
Customer.DiscountRate AS PrcRemise , &#13;
Customer.NotesClear AS Note ,&#13;
Customer.AllowedAmount AS Encours_Autorise , &#13;
Customer.CurrentAmount AS Solde_Actuel , &#13;
Customer.FinancialDiscountRate AS PrcEscompte , &#13;
Customer.ColleagueId AS IDInterneCollaborateur , &#13;
Customer.SettlementModeId AS IDInterneModeReglement, &#13;
Customer.MainInvoicingAddress_WebSite AS Facturation_Contact_Web, &#13;
Customer.MainDeliveryAddress_WebSite AS Livraison_Contact_Web , &#13;
Customer.Name AS Facturation_Nom, &#13;
Customer.MainDeliveryAddress_ThirdName AS Livraison_Nom , &#13;
Customer.Group1 AS IDInterne_Groupe1, &#13;
Customer.Group2 AS IDInterne_Groupe2, &#13;
Customer.Siren + Customer.Nic AS Siret,&#13;
(select Colleague.GeographicSector from Colleague where Colleague.Id = Customer.ColleagueId) AS IDInterneSecteurGeographique, &#13;
CASE ActiveState&#13;
     WHEN 0 THEN 0&#13;
     WHEN 2 THEN 1&#13;
     ELSE 0&#13;
END AS  Bloqué,&#13;
Customer.MainInvoicingAddress_Civility AS Facturation_Civilite, &#13;
Customer.MainDeliveryAddress_Civility AS Livraison_Civilite, &#13;
/*&#13;
(select TOP 1 SaleDocument.DocumentDate FROM SaleDocument WHERE DocumentType = 2 AND SaleDocument.CustomerId = Customer.Id ORDER BY SaleDocument.DocumentDate DESC ) AS Date_Der_Fact, &#13;
*/&#13;
&#13;
/*&#13;
(SELECT SUM(AmountVatExcludedWithDiscountAndShippingWithoutEcotax) FROM SaleDocument WHERE SaleDocument.CustomerId = Customer.Id AND DocumentType = 2 And DATEDIFF(day,SaleDocument.DocumentDate, GetDate()) &amp;lt;= 365) AS CA, &#13;
*/&#13;
&#13;
PriceListCategoryId AS IDInterneTypeTarif ,&#13;
IntracommunityVATNumber AS TVAIntra,&#13;
TerritorialityId AS IDInterne_RegimeTVA&#13;
&#13;
&#13;
%5 &#13;
FROM Customer &#13;
WHERE &#13;
&#13;
Customer.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Customer.Type = 1 and Customer.ActiveState = 0 and  ((FamilyId NOT IN (%7) or FamilyId is Null) and (SubFamilyId NOT IN (%7) or SubFamilyId is Null))&#13;
&#13;
/*&#13;
/*LIMITE LES CLIENTS AUX CLIENTS QUI ONT DES INTER ENTRE HIER ET + 10J*/&#13;
AND Customer.Id IN (&#13;
SELECT &#13;
ScheduleEvent.CustomerId&#13;
FROM ScheduleEvent&#13;
WHERE &#13;
Customer.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
&#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType) = &amp;apos;1&amp;apos;&#13;
AND ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4&#13;
AND DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;gt; -1 and  DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;lt; 10&#13;
)&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SALARIES</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456644</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Colleague.sysCreatedDate AS DateCreation , &#13;
Colleague.sysModifiedDate AS DateModification , &#13;
Colleague.Id AS IDInterne , &#13;
Colleague.Id AS Code , &#13;
Colleague.Contact_Name AS Nom , &#13;
Colleague.Contact_FirstName AS Prenom , &#13;
Colleague.GeographicSector as IDInerne_SecteurGeo ,&#13;
Colleague.SalePriceVatExcluded AS PrixVente, &#13;
&#13;
Colleague.Contact_ColleagueFunction AS Fonction_Qualif&#13;
&#13;
FROM Colleague &#13;
WHERE &#13;
Colleague.ActiveState = 0 And Colleague.IsSalesperson = 1</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTCOMMANDE_ACHAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155347376</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocument.sysCreatedDate AS DateCreation , &#13;
PurchaseDocument.sysModifiedDate AS DateModification , &#13;
PurchaseDocument.Id AS IDInterne , &#13;
PurchaseDocument.DocumentNumber AS Code , &#13;
&amp;apos;CDEA&amp;apos; AS TypeDocument , &#13;
PurchaseDocument.DocumentDate AS Document_Date, &#13;
PurchaseDocument.TotalVolume AS VolumeTotal , &#13;
PurchaseDocument.TotalWeight AS PoidsTotal , &#13;
PurchaseDocument.AssociatedInvoiceId AS IdInterneDocument_Facture , &#13;
PurchaseDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL , &#13;
PurchaseDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié  , &#13;
PurchaseDocument.InvoicingAddress_Address1 AS Facturation_Adresse1 ,&#13;
PurchaseDocument.InvoicingAddress_Address2 AS Facturation_Adresse2 , &#13;
PurchaseDocument.InvoicingAddress_ZipCode AS Facturation_CP , &#13;
PurchaseDocument.InvoicingAddress_City AS Facturation_Ville , &#13;
PurchaseDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays , &#13;
PurchaseDocument.InvoicingContact_Civility  AS Facturation_Contact_Civilite , &#13;
PurchaseDocument.InvoicingAddress_ThirdName AS FacturationNom  , &#13;
PurchaseDocument.InvoicingContact_Name AS Facturation_Contact_Nom , &#13;
PurchaseDocument.InvoicingContact_FirstName Facturation_Contact_Prenom , &#13;
PurchaseDocument.InvoicingContact_Phone AS Facturation_Contact_Tel , &#13;
PurchaseDocument.InvoicingContact_Email AS Facturation_Contact_Mail , &#13;
PurchaseDocument.DeliveryAddress_ThirdName AS LivraisonNom , &#13;
PurchaseDocument.DeliveryAddress_Address1 AS Livraison_Adresse1 , &#13;
PurchaseDocument.DeliveryAddress_Address2 AS Livraison_Adresse2 , &#13;
PurchaseDocument.DeliveryAddress_ZipCode AS Livraison_CP , &#13;
PurchaseDocument.DeliveryAddress_City AS Livraison_Ville , &#13;
PurchaseDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays , &#13;
PurchaseDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite , &#13;
PurchaseDocument.DeliveryContact_Name AS Livraison_Contact_Nom , &#13;
PurchaseDocument.DeliveryContact_FirstName AS Livraison_contact_Prenom, &#13;
PurchaseDocument.DeliveryContact_Email AS Livraison_Contact_Mail , &#13;
PurchaseDocument.DeliveryContact_Phone AS Livraison_Contact_Tel , &#13;
PurchaseDocument.SupplierId AS IDInerneTiers , &#13;
PurchaseDocument.SupplierId AS CodeTiers ,&#13;
PurchaseDocument.SupplierName AS NomTiers, &#13;
PurchaseDocument.ValidityDate AS DateValidité , &#13;
PurchaseDocument.DeliveryDate AS DateLivraison , &#13;
PurchaseDocument.DeliveryState AS EtatLivraison ,&#13;
PurchaseDocument.StorehouseId AS IDInterneDepot , &#13;
PurchaseDocument.CommitmentsBalanceDue AS SoldeDu , &#13;
PurchaseDocument.AmountVatExcluded AS MontantBrutHT , &#13;
PurchaseDocument.CostPrice AS PrixRevient , &#13;
PurchaseDocument.DiscountRate AS PrcRemisePied , &#13;
PurchaseDocument.DiscountAmount AS MontantNetHT , &#13;
PurchaseDocument.ShippingAmountVatExcluded AS PortFraisHT , &#13;
(Select Vat.Rate FROM Vat Where Vat.Id = PurchaseDocument.ShippingVatId) AS PortTauxTva , &#13;
PurchaseDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax  AS MontantNetNetHT , &#13;
PurchaseDocument.EcotaxAmountVatExcluded AS EcoTaxeHT , &#13;
PurchaseDocument.DepositAmount AS MontantAcompte , &#13;
PurchaseDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC , &#13;
PurchaseDocument.AmountVatIncluded AS MontantNetNetTTC , &#13;
PurchaseDocument.DealId AS IDInterneAffaire, &#13;
PurchaseDocument.NotesClear  AS Note ,&#13;
PurchaseDocument.TotalDueAmount as NetAPayer,  &#13;
PurchaseDocument.NumberOfPackage AS NombreColis, &#13;
PurchaseDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
PurchaseDocument.FinancialDiscountRate AS PrcEscompte, &#13;
PurchaseDocument.Reference AS Libellé, &#13;
PurchaseDocument.SettlementModeId AS IDInterneModeReglement ,&#13;
PurchaseDocument.DetailVatAmount0_DetailVatId AS IDInerneTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailVatRate AS TauxTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailVatAmount AS MontantTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailAmountVatExcluded AS BaseHT1, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatId AS IDInerneTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatRate AS TauxTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatAmount AS MontantTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailAmountVatExcluded AS BaseHT2, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatId AS IDInerneTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatRate AS TauxTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatAmount AS MontantTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailAmountVatExcluded AS BaseHT3, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatId AS IDInerneTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatRate AS TauxTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatAmount AS MontantTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailAmountVatExcluded AS BaseHT4, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatId AS IDInerneTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatRate AS TauxTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatAmount AS MontantTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailAmountVatExcluded AS BaseHT5,  &#13;
PurchaseDocument.ShippingVatId AS IDInterneTVA_Port ,&#13;
PurchaseDocument.DiscountAmount as MontantRemisePied, &#13;
(SELECT Caption From Country Where IsoCode = PurchaseDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
(SELECT Caption From Country Where IsoCode = PurchaseDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays   ,&#13;
PurchaseDocument.DeliveryState  AS Status&#13;
%5 &#13;
FROM PurchaseDocument &#13;
&#13;
WHERE &#13;
&#13;
PurchaseDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DocumentType = 8 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-COMMANDE_ACHAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155404636</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocument.DocumentType, &#13;
PurchaseDocument.DocumentDate, &#13;
&amp;apos;CDEA&amp;apos; AS TypeDocument , &#13;
&#13;
PurchaseDocumentLine.sysCreatedDate AS DateCreation , &#13;
PurchaseDocumentLine.sysModifiedDate AS DateModification , &#13;
PurchaseDocumentLine.Id AS Code , &#13;
PurchaseDocumentLine.ParentLineId AS RefNiveauPere, &#13;
PurchaseDocumentLine.Id AS IDInterne , &#13;
PurchaseDocumentLine.DocumentId AS IDInterneDocument , &#13;
PurchaseDocumentLine.LineOrder AS NumeroLigne , &#13;
PurchaseDocumentLine.ItemId AS CodeArticle , &#13;
PurchaseDocumentLine.ItemId AS IDInerneArticle , &#13;
PurchaseDocumentLine.Quantity AS Quantité , &#13;
PurchaseDocumentLine.DescriptionClear AS Designation , &#13;
PurchaseDocumentLine.UnitId AS IDInerneUnite , &#13;
PurchaseDocumentLine.TotalVolume AS VolumeTotal , &#13;
PurchaseDocumentLine.TotalWeight AS PoidsTotal , &#13;
PurchaseDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
PurchaseDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
PurchaseDocumentLine.PurchasePrice AS PrixAchat , &#13;
PurchaseDocumentLine.TrackingNumber AS SerieLotNumero , &#13;
PurchaseDocumentLine.LimitDate AS SerieLotDateLimite , &#13;
PurchaseDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
PurchaseDocumentLine.CostPrice AS PrixRevient , &#13;
PurchaseDocumentLine.UnitDiscountRate AS PrcRemise , &#13;
PurchaseDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
PurchaseDocumentLine.PriceVatExcluded  AS PrixVenteBrutHT  ,&#13;
PurchaseDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
PurchaseDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT , &#13;
PurchaseDocumentLine.UnitEcotaxAmountVatIncluded  AS MontantEcoTaxeTTC , &#13;
PurchaseDocumentLine.VatAmount AS MontantTva , &#13;
PurchaseDocumentLine.OrderedQuantity AS QuantitéCommandée , &#13;
PurchaseDocumentLine.DeliveredQuantity AS QuantitéLIvrée , &#13;
PurchaseDocumentLine.RemainingQuantityToDeliver AS Reliquat ,&#13;
PurchaseDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
PurchaseDocumentLine.DealId AS IDInterne_Affaire ,&#13;
PurchaseDocumentLine.VatId AS idinterneTVA ,&#13;
PurchaseDocumentLine.Weight AS PoidsUnitaire,   &#13;
Vat.Rate AS TauxTVA &#13;
%5 &#13;
FROM PurchaseDocument INNER JOIN PurchaseDocumentLine &#13;
ON PurchaseDocument.Id  = PurchaseDocumentLine.DocumentId&#13;
LEFT OUTER JOIN Vat&#13;
            ON Vat.Id  = PurchaseDocumentLine.VatId&#13;
WHERE&#13;
PurchaseDocumentLine.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DocumentType = 8 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTCOMMANDE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082509145</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH DocumentData AS (&#13;
    SELECT &#13;
        SaleDocument.sysCreatedDate AS DateCreation, &#13;
        SaleDocument.sysModifiedDate AS DateModification, &#13;
        SaleDocument.Id AS IDInterne, &#13;
        SaleDocument.DocumentNumber AS Code, &#13;
        &amp;apos;CDE&amp;apos; AS TypeDocument, &#13;
        SaleDocument.DocumentDate AS Document_Date, &#13;
        SaleDocument.TotalVolume AS VolumeTotal, &#13;
        SaleDocument.TotalWeight AS PoidsTotal, &#13;
        SaleDocument.AssociatedInvoiceId AS IdInterneDocument_Facture, &#13;
        SaleDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL, &#13;
        SaleDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié, &#13;
        SaleDocument.InvoicingAddress_Address1 AS Facturation_Adresse1,&#13;
        SaleDocument.InvoicingAddress_Address2 AS Facturation_Adresse2, &#13;
        SaleDocument.InvoicingAddress_Address3 AS Facturation_Adresse3, &#13;
        SaleDocument.InvoicingAddress_ZipCode AS Facturation_CP, &#13;
        SaleDocument.InvoicingAddress_City AS Facturation_Ville, &#13;
        SaleDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays, &#13;
        SaleDocument.InvoicingContact_Civility AS Facturation_Contact_Civilite, &#13;
        CASE &#13;
            WHEN SaleDocument.InvoicingAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.InvoicingAddress_ThirdName&#13;
        END AS FacturationNom, &#13;
        CASE &#13;
            WHEN SaleDocument.DeliveryAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.DeliveryAddress_ThirdName&#13;
        END AS LivraisonNom, &#13;
        SaleDocument.InvoicingContact_Name AS Facturation_Contact_Nom, &#13;
        SaleDocument.InvoicingContact_FirstName AS Facturation_Contact_Prenom, &#13;
        SaleDocument.InvoicingContact_Phone AS Facturation_Contact_Tel, &#13;
        SaleDocument.InvoicingContact_Email AS Facturation_Contact_Mail, &#13;
        SaleDocument.DeliveryAddress_Address1 AS Livraison_Adresse1, &#13;
        SaleDocument.DeliveryAddress_Address2 AS Livraison_Adresse2, &#13;
        SaleDocument.DeliveryAddress_Address3 AS Livraison_Adresse3, &#13;
        SaleDocument.DeliveryAddress_ZipCode AS Livraison_CP, &#13;
        SaleDocument.DeliveryAddress_City AS Livraison_Ville, &#13;
        SaleDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays, &#13;
        SaleDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite, &#13;
        SaleDocument.DeliveryContact_Name AS Livraison_Contact_Nom, &#13;
        SaleDocument.DeliveryContact_FirstName AS Livraison_Contact_Prenom, &#13;
        SaleDocument.DeliveryContact_Email AS Livraison_Contact_Mail, &#13;
        SaleDocument.DeliveryContact_Phone AS Livraison_Contact_Tel, &#13;
        SaleDocument.CustomerId AS IDInterneTiers, &#13;
        SaleDocument.CustomerId AS CodeTiers, &#13;
        SaleDocument.CustomerName AS NomTiers, &#13;
        SaleDocument.ColleagueId AS IDInterneCollaborateur, &#13;
        SaleDocument.ValidityDate AS DateValidité, &#13;
        SaleDocument.DeliveryDate AS DateLivraison, &#13;
        SaleDocument.DeliveryState AS EtatLivraison, &#13;
        SaleDocument.OriginDocumentNumber AS NumDocOrigine, &#13;
        SaleDocument.StorehouseId AS IDInterneDepot, &#13;
        SaleDocument.CommitmentsBalanceDue AS SoldeDu, &#13;
        SaleDocument.AmountVatExcluded AS MontantBrutHT, &#13;
        SaleDocument.CostPrice AS PrixRevient, &#13;
        SaleDocument.DiscountRate AS PrcRemisePied, &#13;
        SaleDocument.DiscountAmount AS MontantNetHT, &#13;
        SaleDocument.ShippingAmountVatExcluded AS PortFraisHT, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocument.ShippingVatId) AS PortTauxTva, &#13;
        SaleDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax AS MontantNetNetHT, &#13;
        SaleDocument.EcotaxAmountVatExcluded AS EcoTaxeHT, &#13;
        SaleDocument.DepositAmount AS MontantAcompte, &#13;
        SaleDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC, &#13;
        SaleDocument.AmountVatIncluded AS MontantNetNetTTC, &#13;
        SaleDocument.DealId AS IDInterneAffaire, &#13;
        SaleDocument.NotesClear AS Note, &#13;
        SaleDocument.TotalDueAmount AS NetAPayer,  &#13;
        SaleDocument.NumberOfPackage AS NombreColis, &#13;
        SaleDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
        SaleDocument.FinancialDiscountRate AS PrcEscompte, &#13;
        SaleDocument.Reference AS Libellé, &#13;
        SaleDocument.SettlementModeId AS IDInterneModeReglement, &#13;
        SaleDocument.DiscountAmount AS MontantRemisePied, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays, &#13;
        SaleDocument.InvoicingAddress_Civility AS Facturation_Civilite, &#13;
        SaleDocument.DeliveryAddress_Civility AS Livraison_Civilite, &#13;
        SaleDocument.DealId AS IDInterne_Affaire, &#13;
        SaleDocument.ConstructionSiteId AS IDInterne_Chantier, &#13;
        SaleDocument.InvoicingContact_CellPhone AS Facturation_Contact_GSM, &#13;
        SaleDocument.DeliveryContact_CellPhone AS Livraison_Contact_GSM,&#13;
        -- Calcul du rang pour chaque client (les plus récents ayant rn = 1)&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        -- Calcul de la différence en jours entre Document_Date et aujourd&amp;apos;hui&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
		%5&#13;
    FROM SaleDocument&#13;
    WHERE (DocumentType = 8) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM DocumentData&#13;
WHERE &#13;
    -- Application exclusive de la condition en fonction de %3&#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, Document_Date DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-COMMANDE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082516613</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH LineData AS (&#13;
    SELECT &#13;
        SaleDocument.DocumentType, &#13;
        SaleDocument.DocumentDate, &#13;
        &amp;apos;CDE&amp;apos; AS TypeDocument, &#13;
        SaleDocumentLine.sysCreatedDate AS DateCreation, &#13;
        SaleDocumentLine.sysModifiedDate AS DateModification, &#13;
        SaleDocumentLine.Id AS Code, &#13;
        SaleDocumentLine.ParentLineId AS RefNiveauPere, &#13;
        SaleDocumentLine.Id AS IDInterne, &#13;
        SaleDocumentLine.DocumentId AS IDInterneDocument, &#13;
        SaleDocumentLine.LineOrder AS NumeroLigne, &#13;
        SaleDocumentLine.ItemId AS CodeArticle, &#13;
        SaleDocumentLine.ItemId AS IDInerneArticle, &#13;
        SaleDocumentLine.Quantity AS Quantité, &#13;
        SaleDocumentLine.DescriptionClear AS Designation, &#13;
        SaleDocumentLine.UnitId AS IDInerneUnite, &#13;
        SaleDocumentLine.TotalVolume AS VolumeTotal, &#13;
        SaleDocumentLine.TotalWeight AS PoidsTotal, &#13;
        SaleDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
        SaleDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
        SaleDocumentLine.PurchasePrice AS PrixAchat, &#13;
        SaleDocumentLine.TrackingNumber AS SerieLotNumero, &#13;
        SaleDocumentLine.LimitDate AS SerieLotDateLimite, &#13;
        SaleDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
        SaleDocumentLine.CostPrice AS PrixRevient, &#13;
        SaleDocumentLine.UnitDiscountRate AS PrcRemise, &#13;
        SaleDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
        SaleDocumentLine.salePriceVatExcluded AS PrixVenteBrutHT, &#13;
        SaleDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatIncluded AS MontantEcoTaxeTTC, &#13;
        SaleDocumentLine.VatAmount AS MontantTva, &#13;
        SaleDocumentLine.OrderedQuantity AS QuantitéCommandée, &#13;
        SaleDocumentLine.DeliveredQuantity AS QuantitéLIvrée, &#13;
        SaleDocumentLine.RemainingQuantityToDeliver AS Reliquat, &#13;
        SaleDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
        SaleDocumentLine.DealId AS IDInterne_Affaire, &#13;
        SaleDocumentLine.VatId AS idinterneTVA, &#13;
        (LEN(Numbering) - LEN(REPLACE(Numbering, &amp;apos;.&amp;apos;, &amp;apos;&amp;apos;)) + 1) AS Niveau, &#13;
        SaleDocumentLine.Id AS RefNiveauHierarchie, &#13;
        &amp;apos;0&amp;apos; AS ValoriserLieCompose, &#13;
        &amp;apos;0&amp;apos; AS QuantifierLieCompose, &#13;
        CASE &#13;
            WHEN SaleDocumentLine.NomenclatureLevel &amp;gt; 0 THEN &amp;apos;1&amp;apos;&#13;
            ELSE &amp;apos;0&amp;apos;&#13;
        END AS Composant, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocumentLine.VatId) AS TauxTVA, &#13;
        SaleDocumentLine.Weight AS PoidsUnitaire,&#13;
        -- Colonnes supplémentaires pour le filtrage :&#13;
        SaleDocument.CustomerId AS IDInterneTiers,&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
        %5&#13;
    FROM SaleDocument&#13;
    INNER JOIN SaleDocumentLine &#13;
        ON SaleDocument.Id = SaleDocumentLine.DocumentId&#13;
    WHERE (DocumentType = 8 ) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM LineData&#13;
WHERE &#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, DocumentDate DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>COMPOSANTS-LIES</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152940520</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ItemComponent.sysCreatedDate AS DateCreation, &#13;
ItemComponent.sysModifiedDate AS DateModification, &#13;
&amp;apos;C&amp;apos; AS TypeLiaison, &#13;
&amp;apos;0&amp;apos; AS MultiplierQuantité,&#13;
&amp;apos;0&amp;apos; AS Valoriser,&#13;
&amp;apos;0&amp;apos; AS Gratuit, &#13;
ItemComponent.Id AS IDInterne, &#13;
ItemComponent.Id AS Code, &#13;
ItemComponent.ItemId AS IDInterneArticle_Lié, &#13;
ItemComponent.ItemId AS CodeArticle_Lié, &#13;
Item.DesCom   AS DesignationArticle_Lié, &#13;
Item.Caption  AS LibelleArticle_Lié, &#13;
Item.ItemType  AS IDInterneArticleLié_Type, &#13;
ItemComponent.ParentItemId AS IDInterneArticle,&#13;
ItemComponent.ComponentOrder AS Ordre, &#13;
ItemComponent.Quantity AS Quantités,&#13;
DispatchedPurchasePrice AS PrixAchat, &#13;
SalePriceVatExcludedPercentage AS PrixVente,&#13;
1 AS NePasRemonterCetteLigne &#13;
&#13;
&#13;
&#13;
FROM ItemComponent, Item&#13;
Where&#13;
ItemComponent.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
 Item.Id =ItemComponent.ItemId AND ItemType = 2 &#13;
order by ItemComponent.ParentItemId</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTACT-CLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113153005704</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Contact.sysCreatedDate AS DateCreation , &#13;
Contact.sysModifiedDate AS DateModification , &#13;
Contact.Id AS IDInterne , &#13;
Contact.Id AS Code , &#13;
&amp;apos;C&amp;apos; AS TypeTiers ,&#13;
Contact.AssociatedCustomerId AS IDInterneTiers , &#13;
Contact.ContactFields_Name AS Nom , &#13;
Contact.ContactFields_FirstName AS Prenom , &#13;
Contact.AddressFields_Address1 AS Adresse1 , &#13;
Contact.AddressFields_Address2 AS Adresse2 , &#13;
Contact.AddressFields_Address3 AS Adresse3 , &#13;
Contact.AddressFields_ZipCode AS CP , &#13;
Contact.AddressFields_City AS Ville , &#13;
Contact.ContactFields_Phone AS Tel , &#13;
Contact.ContactFields_CellPhone AS GSM , &#13;
Contact.ContactFields_Civility AS Civilite , &#13;
Contact.ContactFields_Email AS Mail , &#13;
Contact.ContactFields_Fax AS Fax , &#13;
Contact.ContactFields_Function AS ContactFonction , &#13;
Contact.ContactFields_Department AS ContactService , &#13;
Contact.AddressFields_CountryIsoCode AS IDInternePays , &#13;
Contact.AddressFields_Longitude AS Longitude, &#13;
Contact.AddressFields_Latitude AS Latitude, &#13;
Contact.NotesClear AS Note ,&#13;
Customer.ColleagueID AS IDInterneCollaborateur, &#13;
Customer.ID AS CodeTiers, &#13;
Customer.ActiveState ,&#13;
&#13;
CASE &#13;
WHEN Contact.IsMainInvoicing = 1 THEN &amp;apos;F&amp;apos;&#13;
WHEN Contact.IsMainDelivery  = 1 THEN &amp;apos;L&amp;apos;&#13;
ELSE&#13;
&amp;apos;&amp;apos;&#13;
END AS IDInterne_Role,&#13;
Contact.IsMainInvoicing AS Contact_Facturation,&#13;
Contact.IsMainDelivery  AS Contact_Livraison&#13;
&#13;
&#13;
&#13;
%5 &#13;
FROM Customer,  Contact&#13;
WHERE &#13;
Contact.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Customer.Type = 1 and Customer.ActiveState = 0 and Customer.Id   = Contact.AssociatedCustomerId</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTACT-FOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113153040514</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Contact.sysCreatedDate AS DateCreation , &#13;
Contact.sysModifiedDate AS DateModification , &#13;
Contact.Id AS IDInterne , &#13;
Contact.Id AS Code , &#13;
&amp;apos;F&amp;apos; AS TypeTiers ,&#13;
Contact.AssociatedSupplierId AS IDInterneTiers , &#13;
Contact.ContactFields_Name AS Nom , &#13;
Contact.ContactFields_FirstName AS Prenom , &#13;
Contact.AddressFields_Address1 AS Adresse1 , &#13;
Contact.AddressFields_Address2 AS Adresse2 , &#13;
Contact.AddressFields_Address3 AS Adresse3 , &#13;
Contact.AddressFields_ZipCode AS CP , &#13;
Contact.AddressFields_City AS Ville , &#13;
Contact.ContactFields_Phone AS Tel , &#13;
Contact.ContactFields_CellPhone AS GSM , &#13;
Contact.ContactFields_Civility AS Civilite , &#13;
Contact.ContactFields_Email AS Mail , &#13;
Contact.ContactFields_Fax AS Fax , &#13;
Contact.ContactFields_Function AS ContactFonction , &#13;
Contact.ContactFields_Department AS ContactService , &#13;
Contact.AddressFields_CountryIsoCode AS IDInternePays , &#13;
Contact.AddressFields_Longitude AS Longitude, &#13;
Contact.AddressFields_Latitude AS Latitude, &#13;
Contact.NotesClear AS Note ,&#13;
Supplier.ColleagueID AS IDInterneCollaborateur, &#13;
Supplier.ID AS CodeTiers, &#13;
Supplier.ActiveState ,&#13;
CASE &#13;
WHEN Contact.IsMainInvoicing = 1 THEN &amp;apos;F&amp;apos;&#13;
WHEN Contact.IsMainDelivery  = 1 THEN &amp;apos;L&amp;apos;&#13;
ELSE&#13;
&amp;apos;&amp;apos;&#13;
END AS IDInterne_Role,&#13;
Contact.IsMainInvoicing AS Contact_Facturation,&#13;
Contact.IsMainDelivery  AS Contact_Livraison&#13;
&#13;
%5 &#13;
FROM Supplier,  Contact&#13;
WHERE &#13;
Contact.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Supplier.ActiveState = 0 and Supplier.Id   = Contact.AssociatedSupplierId</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTACT-PROSPECT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113153056030</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Contact.sysCreatedDate AS DateCreation , &#13;
Contact.sysModifiedDate AS DateModification , &#13;
Contact.Id AS IDInterne , &#13;
Contact.Id AS Code , &#13;
&amp;apos;P&amp;apos; AS TypeTiers ,&#13;
Contact.AssociatedCustomerId AS IDInterneTiers , &#13;
Contact.ContactFields_Name AS Nom , &#13;
Contact.ContactFields_FirstName AS Prenom , &#13;
Contact.AddressFields_Address1 AS Adresse1 , &#13;
Contact.AddressFields_Address2 AS Adresse2 , &#13;
Contact.AddressFields_Address3 AS Adresse3 , &#13;
Contact.AddressFields_ZipCode AS CP , &#13;
Contact.AddressFields_City AS Ville , &#13;
Contact.ContactFields_Phone AS Tel , &#13;
Contact.ContactFields_CellPhone AS GSM , &#13;
Contact.ContactFields_Civility AS Civilite , &#13;
Contact.ContactFields_Email AS Mail , &#13;
Contact.ContactFields_Fax AS Fax , &#13;
Contact.ContactFields_Function AS ContactFonction , &#13;
Contact.ContactFields_Department AS ContactService , &#13;
Contact.AddressFields_CountryIsoCode AS IDInternePays , &#13;
Contact.AddressFields_Longitude AS Longitude, &#13;
Contact.AddressFields_Latitude AS Latitude, &#13;
Contact.NotesClear AS Note ,&#13;
Customer.ColleagueID AS IDInterneCollaborateur, &#13;
Customer.ID AS CodeTiers, &#13;
Customer.ActiveState ,&#13;
CASE &#13;
WHEN Contact.IsMainInvoicing = 1 THEN &amp;apos;F&amp;apos;&#13;
WHEN Contact.IsMainDelivery  = 1 THEN &amp;apos;L&amp;apos;&#13;
ELSE&#13;
&amp;apos;&amp;apos;&#13;
END AS IDInterne_Role,&#13;
Contact.IsMainInvoicing AS Contact_Facturation,&#13;
Contact.IsMainDelivery  AS Contact_Livraison&#13;
&#13;
%5 &#13;
FROM Customer,  Contact&#13;
WHERE &#13;
Contact.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Customer.Type = 0 and Customer.ActiveState = 0 and Customer.Id   = Contact.AssociatedCustomerId</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTDEMANDEPRIX_ACHAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155510352</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocument.sysCreatedDate AS DateCreation , &#13;
PurchaseDocument.sysModifiedDate AS DateModification , &#13;
PurchaseDocument.Id AS IDInterne , &#13;
PurchaseDocument.DocumentNumber AS Code , &#13;
&amp;apos;DEMPA&amp;apos; AS TypeDocument , &#13;
PurchaseDocument.DocumentDate AS Document_Date, &#13;
PurchaseDocument.TotalVolume AS VolumeTotal , &#13;
PurchaseDocument.TotalWeight AS PoidsTotal , &#13;
PurchaseDocument.AssociatedInvoiceId AS IdInterneDocument_Facture , &#13;
PurchaseDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL , &#13;
PurchaseDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié  , &#13;
PurchaseDocument.InvoicingAddress_Address1 AS Facturation_Adresse1 ,&#13;
PurchaseDocument.InvoicingAddress_Address2 AS Facturation_Adresse2 , &#13;
PurchaseDocument.InvoicingAddress_ZipCode AS Facturation_CP , &#13;
PurchaseDocument.InvoicingAddress_City AS Facturation_Ville , &#13;
PurchaseDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays , &#13;
PurchaseDocument.InvoicingContact_Civility  AS Facturation_Contact_Civilite , &#13;
PurchaseDocument.InvoicingAddress_ThirdName AS FacturationNom  , &#13;
PurchaseDocument.InvoicingContact_Name AS Facturation_Contact_Nom , &#13;
PurchaseDocument.InvoicingContact_FirstName Facturation_Contact_Prenom , &#13;
PurchaseDocument.InvoicingContact_Phone AS Facturation_Contact_Tel , &#13;
PurchaseDocument.InvoicingContact_Email AS Facturation_Contact_Mail , &#13;
PurchaseDocument.DeliveryAddress_ThirdName AS LivraisonNom , &#13;
PurchaseDocument.DeliveryAddress_Address1 AS Livraison_Adresse1 , &#13;
PurchaseDocument.DeliveryAddress_Address2 AS Livraison_Adresse2 , &#13;
PurchaseDocument.DeliveryAddress_ZipCode AS Livraison_CP , &#13;
PurchaseDocument.DeliveryAddress_City AS Livraison_Ville , &#13;
PurchaseDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays , &#13;
PurchaseDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite , &#13;
PurchaseDocument.DeliveryContact_Name AS Livraison_Contact_Nom , &#13;
PurchaseDocument.DeliveryContact_FirstName AS Livraison_contact_Prenom, &#13;
PurchaseDocument.DeliveryContact_Email AS Livraison_Contact_Mail , &#13;
PurchaseDocument.DeliveryContact_Phone AS Livraison_Contact_Tel , &#13;
PurchaseDocument.SupplierId AS IDInerneTiers , &#13;
PurchaseDocument.SupplierId AS CodeTiers ,&#13;
PurchaseDocument.SupplierName AS NomTiers, &#13;
PurchaseDocument.ValidityDate AS DateValidité , &#13;
PurchaseDocument.DeliveryDate AS DateLivraison , &#13;
PurchaseDocument.DeliveryState AS EtatLivraison ,&#13;
PurchaseDocument.StorehouseId AS IDInterneDepot , &#13;
PurchaseDocument.CommitmentsBalanceDue AS SoldeDu , &#13;
PurchaseDocument.AmountVatExcluded AS MontantBrutHT , &#13;
PurchaseDocument.CostPrice AS PrixRevient , &#13;
PurchaseDocument.DiscountRate AS PrcRemisePied , &#13;
PurchaseDocument.DiscountAmount AS MontantNetHT , &#13;
PurchaseDocument.ShippingAmountVatExcluded AS PortFraisHT , &#13;
(Select Vat.Rate FROM Vat Where Vat.Id = PurchaseDocument.ShippingVatId) AS PortTauxTva , &#13;
PurchaseDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax  AS MontantNetNetHT , &#13;
PurchaseDocument.EcotaxAmountVatExcluded AS EcoTaxeHT , &#13;
PurchaseDocument.DepositAmount AS MontantAcompte , &#13;
PurchaseDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC , &#13;
PurchaseDocument.AmountVatIncluded AS MontantNetNetTTC , &#13;
PurchaseDocument.DealId AS IDInterneAffaire, &#13;
PurchaseDocument.NotesClear  AS Note ,&#13;
PurchaseDocument.TotalDueAmount as NetAPayer,  &#13;
PurchaseDocument.NumberOfPackage AS NombreColis, &#13;
PurchaseDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
PurchaseDocument.FinancialDiscountRate AS PrcEscompte, &#13;
PurchaseDocument.Reference AS Libellé, &#13;
PurchaseDocument.SettlementModeId AS IDInterneModeReglement ,&#13;
PurchaseDocument.DetailVatAmount0_DetailVatId AS IDInerneTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailVatRate AS TauxTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailVatAmount AS MontantTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailAmountVatExcluded AS BaseHT1, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatId AS IDInerneTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatRate AS TauxTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatAmount AS MontantTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailAmountVatExcluded AS BaseHT2, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatId AS IDInerneTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatRate AS TauxTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatAmount AS MontantTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailAmountVatExcluded AS BaseHT3, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatId AS IDInerneTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatRate AS TauxTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatAmount AS MontantTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailAmountVatExcluded AS BaseHT4, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatId AS IDInerneTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatRate AS TauxTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatAmount AS MontantTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailAmountVatExcluded AS BaseHT5,  &#13;
PurchaseDocument.ShippingVatId AS IDInterneTVA_Port ,&#13;
PurchaseDocument.DiscountAmount as MontantRemisePied, &#13;
(SELECT Caption From Country Where IsoCode = PurchaseDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
(SELECT Caption From Country Where IsoCode = PurchaseDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays   &#13;
%5 &#13;
FROM PurchaseDocument &#13;
&#13;
WHERE &#13;
PurchaseDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DocumentType = 1 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-DEMANDEPRIX_ACHAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155526179</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocument.DocumentType, &#13;
PurchaseDocument.DocumentDate, &#13;
&amp;apos;DEMPA&amp;apos; AS TypeDocument , &#13;
&#13;
PurchaseDocumentLine.sysCreatedDate AS DateCreation , &#13;
PurchaseDocumentLine.sysModifiedDate AS DateModification , &#13;
PurchaseDocumentLine.Id AS Code , &#13;
PurchaseDocumentLine.ParentLineId AS RefNiveauPere, &#13;
PurchaseDocumentLine.Id AS IDInterne , &#13;
PurchaseDocumentLine.DocumentId AS IDInterneDocument , &#13;
PurchaseDocumentLine.LineOrder AS NumeroLigne , &#13;
PurchaseDocumentLine.ItemId AS CodeArticle , &#13;
PurchaseDocumentLine.ItemId AS IDInerneArticle , &#13;
PurchaseDocumentLine.Quantity AS Quantité , &#13;
PurchaseDocumentLine.DescriptionClear AS Designation , &#13;
PurchaseDocumentLine.UnitId AS IDInerneUnite , &#13;
PurchaseDocumentLine.TotalVolume AS VolumeTotal , &#13;
PurchaseDocumentLine.TotalWeight AS PoidsTotal , &#13;
PurchaseDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
PurchaseDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
PurchaseDocumentLine.PurchasePrice AS PrixAchat , &#13;
PurchaseDocumentLine.TrackingNumber AS SerieLotNumero , &#13;
PurchaseDocumentLine.LimitDate AS SerieLotDateLimite , &#13;
PurchaseDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
PurchaseDocumentLine.CostPrice AS PrixRevient , &#13;
PurchaseDocumentLine.UnitDiscountRate AS PrcRemise , &#13;
PurchaseDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
PurchaseDocumentLine.NetPriceVatExcluded  AS PrixVenteBrutHT  ,&#13;
PurchaseDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
PurchaseDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT , &#13;
PurchaseDocumentLine.UnitEcotaxAmountVatIncluded  AS MontantEcoTaxeTTC , &#13;
PurchaseDocumentLine.VatAmount AS MontantTva , &#13;
PurchaseDocumentLine.OrderedQuantity AS QuantitéCommandée , &#13;
PurchaseDocumentLine.DeliveredQuantity AS QuantitéLIvrée , &#13;
PurchaseDocumentLine.RemainingQuantityToDeliver AS Reliquat ,&#13;
PurchaseDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
PurchaseDocumentLine.DealId AS IDInterne_Affaire ,&#13;
PurchaseDocumentLine.VatId AS idinterneTVA ,&#13;
PurchaseDocumentLine.Weight AS PoidsUnitaire,   &#13;
Vat.Rate AS TauxTVA &#13;
%5 &#13;
FROM PurchaseDocument INNER JOIN PurchaseDocumentLine &#13;
ON PurchaseDocument.Id  = PurchaseDocumentLine.DocumentId&#13;
LEFT OUTER JOIN Vat&#13;
            ON Vat.Id  = PurchaseDocumentLine.VatId&#13;
WHERE&#13;
PurchaseDocumentLine.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DocumentType = 1 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTDEVIS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082719432</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH DocumentData AS (&#13;
    SELECT &#13;
        SaleDocument.sysCreatedDate AS DateCreation, &#13;
        SaleDocument.sysModifiedDate AS DateModification, &#13;
        SaleDocument.Id AS IDInterne, &#13;
        SaleDocument.DocumentNumber AS Code, &#13;
        &amp;apos;DEVIS&amp;apos; AS TypeDocument, &#13;
        SaleDocument.DocumentDate AS Document_Date, &#13;
        SaleDocument.TotalVolume AS VolumeTotal, &#13;
        SaleDocument.TotalWeight AS PoidsTotal, &#13;
        SaleDocument.AssociatedInvoiceId AS IdInterneDocument_Facture, &#13;
        SaleDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL, &#13;
        SaleDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié, &#13;
        SaleDocument.InvoicingAddress_Address1 AS Facturation_Adresse1,&#13;
        SaleDocument.InvoicingAddress_Address2 AS Facturation_Adresse2, &#13;
        SaleDocument.InvoicingAddress_Address3 AS Facturation_Adresse3, &#13;
        SaleDocument.InvoicingAddress_ZipCode AS Facturation_CP, &#13;
        SaleDocument.InvoicingAddress_City AS Facturation_Ville, &#13;
        SaleDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays, &#13;
        SaleDocument.InvoicingContact_Civility AS Facturation_Contact_Civilite, &#13;
        CASE &#13;
            WHEN SaleDocument.InvoicingAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.InvoicingAddress_ThirdName&#13;
        END AS FacturationNom, &#13;
        CASE &#13;
            WHEN SaleDocument.DeliveryAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.DeliveryAddress_ThirdName&#13;
        END AS LivraisonNom, &#13;
        SaleDocument.InvoicingContact_Name AS Facturation_Contact_Nom, &#13;
        SaleDocument.InvoicingContact_FirstName AS Facturation_Contact_Prenom, &#13;
        SaleDocument.InvoicingContact_Phone AS Facturation_Contact_Tel, &#13;
        SaleDocument.InvoicingContact_Email AS Facturation_Contact_Mail, &#13;
        SaleDocument.DeliveryAddress_Address1 AS Livraison_Adresse1, &#13;
        SaleDocument.DeliveryAddress_Address2 AS Livraison_Adresse2, &#13;
        SaleDocument.DeliveryAddress_Address3 AS Livraison_Adresse3, &#13;
        SaleDocument.DeliveryAddress_ZipCode AS Livraison_CP, &#13;
        SaleDocument.DeliveryAddress_City AS Livraison_Ville, &#13;
        SaleDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays, &#13;
        SaleDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite, &#13;
        SaleDocument.DeliveryContact_Name AS Livraison_Contact_Nom, &#13;
        SaleDocument.DeliveryContact_FirstName AS Livraison_Contact_Prenom, &#13;
        SaleDocument.DeliveryContact_Email AS Livraison_Contact_Mail, &#13;
        SaleDocument.DeliveryContact_Phone AS Livraison_Contact_Tel, &#13;
        SaleDocument.CustomerId AS IDInterneTiers, &#13;
        SaleDocument.CustomerId AS CodeTiers, &#13;
        SaleDocument.CustomerName AS NomTiers, &#13;
        SaleDocument.ColleagueId AS IDInterneCollaborateur, &#13;
        SaleDocument.ValidityDate AS DateValidité, &#13;
        SaleDocument.DeliveryDate AS DateLivraison, &#13;
        SaleDocument.DeliveryState AS EtatLivraison, &#13;
        SaleDocument.OriginDocumentNumber AS NumDocOrigine, &#13;
        SaleDocument.StorehouseId AS IDInterneDepot, &#13;
        SaleDocument.CommitmentsBalanceDue AS SoldeDu, &#13;
        SaleDocument.AmountVatExcluded AS MontantBrutHT, &#13;
        SaleDocument.CostPrice AS PrixRevient, &#13;
        SaleDocument.DiscountRate AS PrcRemisePied, &#13;
        SaleDocument.DiscountAmount AS MontantNetHT, &#13;
        SaleDocument.ShippingAmountVatExcluded AS PortFraisHT, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocument.ShippingVatId) AS PortTauxTva, &#13;
        SaleDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax AS MontantNetNetHT, &#13;
        SaleDocument.EcotaxAmountVatExcluded AS EcoTaxeHT, &#13;
        SaleDocument.DepositAmount AS MontantAcompte, &#13;
        SaleDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC, &#13;
        SaleDocument.AmountVatIncluded AS MontantNetNetTTC, &#13;
        SaleDocument.DealId AS IDInterneAffaire, &#13;
        SaleDocument.NotesClear AS Note, &#13;
        SaleDocument.TotalDueAmount AS NetAPayer,  &#13;
        SaleDocument.NumberOfPackage AS NombreColis, &#13;
        SaleDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
        SaleDocument.FinancialDiscountRate AS PrcEscompte, &#13;
        SaleDocument.Reference AS Libellé, &#13;
        SaleDocument.SettlementModeId AS IDInterneModeReglement, &#13;
        SaleDocument.DiscountAmount AS MontantRemisePied, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays, &#13;
        SaleDocument.InvoicingAddress_Civility AS Facturation_Civilite, &#13;
        SaleDocument.DeliveryAddress_Civility AS Livraison_Civilite, &#13;
        SaleDocument.DealId AS IDInterne_Affaire, &#13;
        SaleDocument.ConstructionSiteId AS IDInterne_Chantier, &#13;
        SaleDocument.InvoicingContact_CellPhone AS Facturation_Contact_GSM, &#13;
        SaleDocument.DeliveryContact_CellPhone AS Livraison_Contact_GSM,&#13;
        -- Calcul du rang pour chaque client (les plus récents ayant rn = 1)&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        -- Calcul de la différence en jours entre Document_Date et aujourd&amp;apos;hui&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
		%5&#13;
    FROM SaleDocument&#13;
    WHERE DocumentType = 1 AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM DocumentData&#13;
WHERE &#13;
    -- Application exclusive de la condition en fonction de %3&#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, Document_Date DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-DEVIS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082726221</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH LineData AS (&#13;
    SELECT &#13;
        SaleDocument.DocumentType, &#13;
        SaleDocument.DocumentDate, &#13;
        &amp;apos;DEVIS&amp;apos; AS TypeDocument, &#13;
        SaleDocumentLine.sysCreatedDate AS DateCreation, &#13;
        SaleDocumentLine.sysModifiedDate AS DateModification, &#13;
        SaleDocumentLine.Id AS Code, &#13;
        SaleDocumentLine.ParentLineId AS RefNiveauPere, &#13;
        SaleDocumentLine.Id AS IDInterne, &#13;
        SaleDocumentLine.DocumentId AS IDInterneDocument, &#13;
        SaleDocumentLine.LineOrder AS NumeroLigne, &#13;
        SaleDocumentLine.ItemId AS CodeArticle, &#13;
        SaleDocumentLine.ItemId AS IDInerneArticle, &#13;
        SaleDocumentLine.Quantity AS Quantité, &#13;
        SaleDocumentLine.DescriptionClear AS Designation, &#13;
        SaleDocumentLine.UnitId AS IDInerneUnite, &#13;
        SaleDocumentLine.TotalVolume AS VolumeTotal, &#13;
        SaleDocumentLine.TotalWeight AS PoidsTotal, &#13;
        SaleDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
        SaleDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
        SaleDocumentLine.PurchasePrice AS PrixAchat, &#13;
        SaleDocumentLine.TrackingNumber AS SerieLotNumero, &#13;
        SaleDocumentLine.LimitDate AS SerieLotDateLimite, &#13;
        SaleDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
        SaleDocumentLine.CostPrice AS PrixRevient, &#13;
        SaleDocumentLine.UnitDiscountRate AS PrcRemise, &#13;
        SaleDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
        SaleDocumentLine.salePriceVatExcluded AS PrixVenteBrutHT, &#13;
        SaleDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatIncluded AS MontantEcoTaxeTTC, &#13;
        SaleDocumentLine.VatAmount AS MontantTva, &#13;
        SaleDocumentLine.OrderedQuantity AS QuantitéCommandée, &#13;
        SaleDocumentLine.DeliveredQuantity AS QuantitéLIvrée, &#13;
        SaleDocumentLine.RemainingQuantityToDeliver AS Reliquat, &#13;
        SaleDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
        SaleDocumentLine.DealId AS IDInterne_Affaire, &#13;
        SaleDocumentLine.VatId AS idinterneTVA, &#13;
        (LEN(Numbering) - LEN(REPLACE(Numbering, &amp;apos;.&amp;apos;, &amp;apos;&amp;apos;)) + 1) AS Niveau, &#13;
        SaleDocumentLine.Id AS RefNiveauHierarchie, &#13;
        &amp;apos;0&amp;apos; AS ValoriserLieCompose, &#13;
        &amp;apos;0&amp;apos; AS QuantifierLieCompose, &#13;
        CASE &#13;
            WHEN SaleDocumentLine.NomenclatureLevel &amp;gt; 0 THEN &amp;apos;1&amp;apos;&#13;
            ELSE &amp;apos;0&amp;apos;&#13;
        END AS Composant, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocumentLine.VatId) AS TauxTVA, &#13;
        SaleDocumentLine.Weight AS PoidsUnitaire,&#13;
        -- Colonnes supplémentaires pour le filtrage :&#13;
        SaleDocument.CustomerId AS IDInterneTiers,&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
        %5&#13;
    FROM SaleDocument&#13;
    INNER JOIN SaleDocumentLine &#13;
        ON SaleDocument.Id = SaleDocumentLine.DocumentId&#13;
    WHERE DocumentType = 1 AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM LineData&#13;
WHERE &#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, DocumentDate DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TAXE-ECO</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456651</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Ecotax.Id AS IDInterne, &#13;
Ecotax.Id AS Code, &#13;
Ecotax.sysCreatedDate AS DateCreation, &#13;
Ecotax.sysModifiedDate AS DateModification, &#13;
Ecotax.NotesClear  AS Libelle, &#13;
Ecotax.AmountVatExcluded AS MontantHT, &#13;
Ecotax.AmountVatInclued AS MontantTTC, &#13;
CASE &#13;
WHEN AmountVatExcluded =AmountVatInclued THEN &amp;apos;0&amp;apos;&#13;
ELSE&#13;
&amp;apos;1&amp;apos; &#13;
END AS SoumisTVA, &#13;
&amp;apos;4&amp;apos; AS TypeCalcul  /* 1 = Montant fixe    4= Montant * quantité */&#13;
FROM Ecotax</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ETAPEDOC</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714190410093</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)   &#13;
&#13;
&#13;
MaReq est une chaîne&#13;
&#13;
//Devis&#13;
POUR j = 2 À 2&#13;
	&#13;
	POUR i = 0 À 9&#13;
		HRAZ(TableA2)&#13;
si j = 1 alors&#13;
   TableA2.Code = &amp;quot;DEVIS&amp;quot; + i&#13;
sinon si j = 2 alors&#13;
   TableA2.Code =  i&#13;
fin		&#13;
		TableA2.IDInterne = TableA2.Code&#13;
		SI j = 1 ALORS&#13;
			TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_AV&amp;quot;&#13;
		SINON SI j = 2 ALORS&#13;
			TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_DEVIS&amp;quot;&#13;
		FIN&#13;
		MaReq = &amp;quot;SELECT OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName = &amp;apos;SaleDocumentOptions.QuoteOptions.State&amp;quot; + (i +1)+&amp;quot;&amp;apos;&amp;quot;&#13;
		SELON i&#13;
			CAS 0&#13;
				TableA2.Libelle = &amp;quot;Devis En Cours&amp;quot;&#13;
			CAS 1&#13;
				TableA2.Libelle = &amp;quot;Devis Terminé&amp;quot;&#13;
			CAS 2&#13;
				TableA2.Libelle = &amp;quot;Devis A réviser&amp;quot;&#13;
			CAS 3&#13;
				TableA2.Libelle = &amp;quot;Devis Accepté&amp;quot;&#13;
			CAS 4&#13;
				TableA2.Libelle = &amp;quot;Devis Refusé&amp;quot;&#13;
			CAS 5&#13;
				TableA2.Libelle = &amp;quot;Devis Appel d&amp;apos;offre&amp;quot;&#13;
			CAS 6&#13;
				TableA2.Libelle = &amp;quot;Devis Envoyé&amp;quot;&#13;
			CAS 7&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 8&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 9&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			AUTRE CAS&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
		FIN&#13;
		SI HExécuteRequêteSQL(TableM,CnxM,hRequêteSansCorrection,MaReq) ALORS&#13;
			HLitPremier(TableM)&#13;
			SI PAS HEnDehors(TableM) ALORS TableA2.Libelle = &amp;quot;Devis &amp;quot; + TableM.OptionValue&#13;
		FIN&#13;
		SI TableA2.Libelle &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS HAjoute(TableA2)&#13;
	FIN&#13;
FIN&#13;
&#13;
//BL&#13;
POUR j = 2 À 2&#13;
	POUR i = 0 À 9&#13;
		HRAZ(TableA2)&#13;
		TableA2.Code =  i&#13;
		TableA2.IDInterne = TableA2.Code&#13;
		SI j = 1 ALORS&#13;
			TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_AV&amp;quot;&#13;
		SINON SI j = 2 ALORS&#13;
			TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_BL&amp;quot;&#13;
		FIN&#13;
		MaReq = &amp;quot;SELECT OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName = &amp;apos;SaleDeliveryReturnOrder.DeliveryOrderState&amp;quot; + i +&amp;quot;&amp;apos;&amp;quot;&#13;
		SELON i&#13;
			CAS 0&#13;
				TableA2.Libelle = &amp;quot;BL À préparer&amp;quot;&#13;
			CAS 1&#13;
				TableA2.Libelle = &amp;quot;BL En préparation&amp;quot;&#13;
			CAS 2&#13;
				TableA2.Libelle = &amp;quot;BL Préparé&amp;quot;&#13;
			CAS 3&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 4&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 5&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 6&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 7&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 8&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
			CAS 9&#13;
				TableA2.Libelle = &amp;quot;BL Expédié&amp;quot;&#13;
			AUTRE CAS&#13;
				TableA2.Libelle = &amp;quot;&amp;quot;&#13;
				&#13;
		FIN&#13;
		SI HExécuteRequêteSQL(TableM,CnxM,hRequêteSansCorrection,MaReq) ALORS&#13;
			HLitPremier(TableM)&#13;
			SI PAS HEnDehors(TableM) ALORS TableA2.Libelle = &amp;quot;BL &amp;quot; +  TableM.OptionValue&#13;
		FIN&#13;
		SI TableA2.Libelle &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS HAjoute(TableA2)&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
//CDE&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;0&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;0&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Cde Non livrée&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_CDE&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;1&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;1&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Cde Livrée partiellement&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_CDE&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;2&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;2&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Cde Livrée totalement&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_CDE&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
&#13;
//Facture&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;0&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;0&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Fact Provisoire&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_FACT&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;1&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;1&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Fact Validée&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_FACT&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;2&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;2&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Fact Envoyée en comptabilité&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_FACT&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;3&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;3&amp;quot;&#13;
TableA2.Libelle =&amp;quot;Fact Transférée en comptabilité&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;EtapeDoc_FACT&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTFACTURE_ACHAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155624737</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocument.sysCreatedDate AS DateCreation , &#13;
PurchaseDocument.sysModifiedDate AS DateModification , &#13;
PurchaseDocument.Id AS IDInterne , &#13;
PurchaseDocument.DocumentNumber AS Code , &#13;
&amp;apos;FACTA&amp;apos; AS TypeDocument , &#13;
PurchaseDocument.DocumentDate AS Document_Date, &#13;
PurchaseDocument.TotalVolume AS VolumeTotal , &#13;
PurchaseDocument.TotalWeight AS PoidsTotal , &#13;
PurchaseDocument.AssociatedInvoiceId AS IdInterneDocument_Facture , &#13;
PurchaseDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL , &#13;
PurchaseDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié  , &#13;
PurchaseDocument.InvoicingAddress_Address1 AS Facturation_Adresse1 ,&#13;
PurchaseDocument.InvoicingAddress_Address2 AS Facturation_Adresse2 , &#13;
PurchaseDocument.InvoicingAddress_ZipCode AS Facturation_CP , &#13;
PurchaseDocument.InvoicingAddress_City AS Facturation_Ville , &#13;
PurchaseDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays , &#13;
PurchaseDocument.InvoicingContact_Civility  AS Facturation_Contact_Civilite , &#13;
PurchaseDocument.InvoicingAddress_ThirdName AS FacturationNom  , &#13;
PurchaseDocument.InvoicingContact_Name AS Facturation_Contact_Nom , &#13;
PurchaseDocument.InvoicingContact_FirstName Facturation_Contact_Prenom , &#13;
PurchaseDocument.InvoicingContact_Phone AS Facturation_Contact_Tel , &#13;
PurchaseDocument.InvoicingContact_Email AS Facturation_Contact_Mail , &#13;
PurchaseDocument.DeliveryAddress_ThirdName AS LivraisonNom , &#13;
PurchaseDocument.DeliveryAddress_Address1 AS Livraison_Adresse1 , &#13;
PurchaseDocument.DeliveryAddress_Address2 AS Livraison_Adresse2 , &#13;
PurchaseDocument.DeliveryAddress_ZipCode AS Livraison_CP , &#13;
PurchaseDocument.DeliveryAddress_City AS Livraison_Ville , &#13;
PurchaseDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays , &#13;
PurchaseDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite , &#13;
PurchaseDocument.DeliveryContact_Name AS Livraison_Contact_Nom , &#13;
PurchaseDocument.DeliveryContact_FirstName AS Livraison_contact_Prenom, &#13;
PurchaseDocument.DeliveryContact_Email AS Livraison_Contact_Mail , &#13;
PurchaseDocument.DeliveryContact_Phone AS Livraison_Contact_Tel , &#13;
PurchaseDocument.SupplierId AS IDInerneTiers , &#13;
PurchaseDocument.SupplierId AS CodeTiers ,&#13;
PurchaseDocument.SupplierName AS NomTiers, &#13;
PurchaseDocument.ValidityDate AS DateValidité , &#13;
PurchaseDocument.DeliveryDate AS DateLivraison , &#13;
PurchaseDocument.DeliveryState AS EtatLivraison ,&#13;
PurchaseDocument.StorehouseId AS IDInterneDepot , &#13;
PurchaseDocument.CommitmentsBalanceDue AS SoldeDu , &#13;
PurchaseDocument.AmountVatExcluded AS MontantBrutHT , &#13;
PurchaseDocument.CostPrice AS PrixRevient , &#13;
PurchaseDocument.DiscountRate AS PrcRemisePied , &#13;
PurchaseDocument.DiscountAmount AS MontantNetHT , &#13;
PurchaseDocument.ShippingAmountVatExcluded AS PortFraisHT , &#13;
(Select Vat.Rate FROM Vat Where Vat.Id = PurchaseDocument.ShippingVatId) AS PortTauxTva , &#13;
PurchaseDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax  AS MontantNetNetHT , &#13;
PurchaseDocument.EcotaxAmountVatExcluded AS EcoTaxeHT , &#13;
PurchaseDocument.DepositAmount AS MontantAcompte , &#13;
PurchaseDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC , &#13;
PurchaseDocument.AmountVatIncluded AS MontantNetNetTTC , &#13;
PurchaseDocument.DealId AS IDInterneAffaire, &#13;
PurchaseDocument.NotesClear  AS Note ,&#13;
PurchaseDocument.TotalDueAmount as NetAPayer,  &#13;
PurchaseDocument.NumberOfPackage AS NombreColis, &#13;
PurchaseDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
PurchaseDocument.FinancialDiscountRate AS PrcEscompte, &#13;
PurchaseDocument.Reference AS Libellé, &#13;
PurchaseDocument.SettlementModeId AS IDInterneModeReglement ,&#13;
PurchaseDocument.DetailVatAmount0_DetailVatId AS IDInerneTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailVatRate AS TauxTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailVatAmount AS MontantTVA1, &#13;
PurchaseDocument.DetailVatAmount0_DetailAmountVatExcluded AS BaseHT1, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatId AS IDInerneTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatRate AS TauxTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailVatAmount AS MontantTVA2, &#13;
PurchaseDocument.DetailVatAmount1_DetailAmountVatExcluded AS BaseHT2, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatId AS IDInerneTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatRate AS TauxTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailVatAmount AS MontantTVA3, &#13;
PurchaseDocument.DetailVatAmount2_DetailAmountVatExcluded AS BaseHT3, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatId AS IDInerneTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatRate AS TauxTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailVatAmount AS MontantTVA4, &#13;
PurchaseDocument.DetailVatAmount3_DetailAmountVatExcluded AS BaseHT4, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatId AS IDInerneTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatRate AS TauxTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailVatAmount AS MontantTVA5, &#13;
PurchaseDocument.DetailVatAmount4_DetailAmountVatExcluded AS BaseHT5,  &#13;
PurchaseDocument.ShippingVatId AS IDInterneTVA_Port  ,&#13;
PurchaseDocument.DiscountAmount as MontantRemisePied, &#13;
(SELECT Caption From Country Where IsoCode =PurchaseDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
(SELECT Caption From Country Where IsoCode = PurchaseDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays ,&#13;
PurchaseDocument.ValidationState  AS Status&#13;
%5 &#13;
FROM PurchaseDocument &#13;
&#13;
WHERE &#13;
PurchaseDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DocumentType = 2 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-FACTURE_ACHAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155638027</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocument.DocumentType, &#13;
PurchaseDocument.DocumentDate, &#13;
&amp;apos;FACTA&amp;apos; AS TypeDocument , &#13;
&#13;
PurchaseDocumentLine.sysCreatedDate AS DateCreation , &#13;
PurchaseDocumentLine.sysModifiedDate AS DateModification , &#13;
PurchaseDocumentLine.Id AS Code , &#13;
PurchaseDocumentLine.ParentLineId AS RefNiveauPere, &#13;
PurchaseDocumentLine.Id AS IDInterne , &#13;
PurchaseDocumentLine.DocumentId AS IDInterneDocument , &#13;
PurchaseDocumentLine.LineOrder AS NumeroLigne , &#13;
PurchaseDocumentLine.ItemId AS CodeArticle , &#13;
PurchaseDocumentLine.ItemId AS IDInerneArticle , &#13;
PurchaseDocumentLine.Quantity AS Quantité , &#13;
PurchaseDocumentLine.DescriptionClear AS Designation , &#13;
PurchaseDocumentLine.UnitId AS IDInerneUnite , &#13;
PurchaseDocumentLine.TotalVolume AS VolumeTotal , &#13;
PurchaseDocumentLine.TotalWeight AS PoidsTotal , &#13;
PurchaseDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
PurchaseDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
PurchaseDocumentLine.PurchasePrice AS PrixAchat , &#13;
PurchaseDocumentLine.TrackingNumber AS SerieLotNumero , &#13;
PurchaseDocumentLine.LimitDate AS SerieLotDateLimite , &#13;
PurchaseDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
PurchaseDocumentLine.CostPrice AS PrixRevient , &#13;
PurchaseDocumentLine.UnitDiscountRate AS PrcRemise , &#13;
PurchaseDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
PurchaseDocumentLine.NetPriceVatExcluded  AS PrixVenteBrutHT  ,&#13;
PurchaseDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
PurchaseDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT , &#13;
PurchaseDocumentLine.UnitEcotaxAmountVatIncluded  AS MontantEcoTaxeTTC , &#13;
PurchaseDocumentLine.VatAmount AS MontantTva , &#13;
PurchaseDocumentLine.OrderedQuantity AS QuantitéCommandée , &#13;
PurchaseDocumentLine.DeliveredQuantity AS QuantitéLIvrée , &#13;
PurchaseDocumentLine.RemainingQuantityToDeliver AS Reliquat ,&#13;
PurchaseDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
PurchaseDocumentLine.DealId AS IDInterne_Affaire ,&#13;
PurchaseDocumentLine.VatId AS idinterneTVA ,&#13;
PurchaseDocumentLine.Weight AS PoidsUnitaire,   &#13;
Vat.Rate AS TauxTVA &#13;
%5 &#13;
FROM PurchaseDocument INNER JOIN PurchaseDocumentLine &#13;
ON PurchaseDocument.Id  = PurchaseDocumentLine.DocumentId&#13;
LEFT OUTER JOIN Vat&#13;
            ON Vat.Id  = PurchaseDocumentLine.VatId&#13;
WHERE &#13;
PurchaseDocumentLine.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DocumentType = 2 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTFACTURE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082803893</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH DocumentData AS (&#13;
    SELECT &#13;
        SaleDocument.sysCreatedDate AS DateCreation, &#13;
        SaleDocument.sysModifiedDate AS DateModification, &#13;
        SaleDocument.Id AS IDInterne, &#13;
        SaleDocument.DocumentNumber AS Code, &#13;
        &amp;apos;FACT&amp;apos; AS TypeDocument, &#13;
        SaleDocument.DocumentDate AS Document_Date, &#13;
        SaleDocument.TotalVolume AS VolumeTotal, &#13;
        SaleDocument.TotalWeight AS PoidsTotal, &#13;
        SaleDocument.AssociatedInvoiceId AS IdInterneDocument_Facture, &#13;
        SaleDocument.AssociatedDeliveryOrderId AS IdInterneDocument_BL, &#13;
        SaleDocument.AssociatedOrderId AS IdInterneDocument_CommandeLié, &#13;
        SaleDocument.InvoicingAddress_Address1 AS Facturation_Adresse1,&#13;
        SaleDocument.InvoicingAddress_Address2 AS Facturation_Adresse2, &#13;
        SaleDocument.InvoicingAddress_Address3 AS Facturation_Adresse3, &#13;
        SaleDocument.InvoicingAddress_ZipCode AS Facturation_CP, &#13;
        SaleDocument.InvoicingAddress_City AS Facturation_Ville, &#13;
        SaleDocument.InvoicingAddress_CountryIsoCode AS Facturation_IDInternePays, &#13;
        SaleDocument.InvoicingContact_Civility AS Facturation_Contact_Civilite, &#13;
        CASE &#13;
            WHEN SaleDocument.InvoicingAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.InvoicingAddress_ThirdName&#13;
        END AS FacturationNom, &#13;
        CASE &#13;
            WHEN SaleDocument.DeliveryAddress_ThirdName = &amp;apos;&amp;apos; THEN SaleDocument.CustomerName&#13;
            ELSE SaleDocument.DeliveryAddress_ThirdName&#13;
        END AS LivraisonNom, &#13;
        SaleDocument.InvoicingContact_Name AS Facturation_Contact_Nom, &#13;
        SaleDocument.InvoicingContact_FirstName AS Facturation_Contact_Prenom, &#13;
        SaleDocument.InvoicingContact_Phone AS Facturation_Contact_Tel, &#13;
        SaleDocument.InvoicingContact_Email AS Facturation_Contact_Mail, &#13;
        SaleDocument.DeliveryAddress_Address1 AS Livraison_Adresse1, &#13;
        SaleDocument.DeliveryAddress_Address2 AS Livraison_Adresse2, &#13;
        SaleDocument.DeliveryAddress_Address3 AS Livraison_Adresse3, &#13;
        SaleDocument.DeliveryAddress_ZipCode AS Livraison_CP, &#13;
        SaleDocument.DeliveryAddress_City AS Livraison_Ville, &#13;
        SaleDocument.DeliveryAddress_CountryIsoCode AS Livraison_IDInternePays, &#13;
        SaleDocument.DeliveryContact_Civility AS Livraison_Contact_Civilite, &#13;
        SaleDocument.DeliveryContact_Name AS Livraison_Contact_Nom, &#13;
        SaleDocument.DeliveryContact_FirstName AS Livraison_Contact_Prenom, &#13;
        SaleDocument.DeliveryContact_Email AS Livraison_Contact_Mail, &#13;
        SaleDocument.DeliveryContact_Phone AS Livraison_Contact_Tel, &#13;
        SaleDocument.CustomerId AS IDInterneTiers, &#13;
        SaleDocument.CustomerId AS CodeTiers, &#13;
        SaleDocument.CustomerName AS NomTiers, &#13;
        SaleDocument.ColleagueId AS IDInterneCollaborateur, &#13;
        SaleDocument.ValidityDate AS DateValidité, &#13;
        SaleDocument.DeliveryDate AS DateLivraison, &#13;
        SaleDocument.DeliveryState AS EtatLivraison, &#13;
        SaleDocument.OriginDocumentNumber AS NumDocOrigine, &#13;
        SaleDocument.StorehouseId AS IDInterneDepot, &#13;
        SaleDocument.CommitmentsBalanceDue AS SoldeDu, &#13;
        SaleDocument.AmountVatExcluded AS MontantBrutHT, &#13;
        SaleDocument.CostPrice AS PrixRevient, &#13;
        SaleDocument.DiscountRate AS PrcRemisePied, &#13;
        SaleDocument.DiscountAmount AS MontantNetHT, &#13;
        SaleDocument.ShippingAmountVatExcluded AS PortFraisHT, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocument.ShippingVatId) AS PortTauxTva, &#13;
        SaleDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax AS MontantNetNetHT, &#13;
        SaleDocument.EcotaxAmountVatExcluded AS EcoTaxeHT, &#13;
        SaleDocument.DepositAmount AS MontantAcompte, &#13;
        SaleDocument.EcotaxAmountVatIncluded AS EcoTaxeTTC, &#13;
        SaleDocument.AmountVatIncluded AS MontantNetNetTTC, &#13;
        SaleDocument.DealId AS IDInterneAffaire, &#13;
        SaleDocument.NotesClear AS Note, &#13;
        SaleDocument.TotalDueAmount AS NetAPayer,  &#13;
        SaleDocument.NumberOfPackage AS NombreColis, &#13;
        SaleDocument.FinancialDiscountAmount AS MontantEscompte, &#13;
        SaleDocument.FinancialDiscountRate AS PrcEscompte, &#13;
        SaleDocument.Reference AS Libellé, &#13;
        SaleDocument.SettlementModeId AS IDInterneModeReglement, &#13;
        SaleDocument.DiscountAmount AS MontantRemisePied, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.InvoicingAddress_CountryIsoCode) AS Facturation_Pays, &#13;
        (SELECT Caption FROM Country WHERE IsoCode = SaleDocument.DeliveryAddress_CountryIsoCode) AS Livraison_Pays, &#13;
        SaleDocument.InvoicingAddress_Civility AS Facturation_Civilite, &#13;
        SaleDocument.DeliveryAddress_Civility AS Livraison_Civilite, &#13;
        SaleDocument.DealId AS IDInterne_Affaire, &#13;
        SaleDocument.ConstructionSiteId AS IDInterne_Chantier, &#13;
        SaleDocument.InvoicingContact_CellPhone AS Facturation_Contact_GSM, &#13;
        SaleDocument.DeliveryContact_CellPhone AS Livraison_Contact_GSM,&#13;
        -- Calcul du rang pour chaque client (les plus récents ayant rn = 1)&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        -- Calcul de la différence en jours entre Document_Date et aujourd&amp;apos;hui&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
		%5&#13;
    FROM SaleDocument&#13;
    WHERE (DocumentType = 2 OR DocumentType = 4) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM DocumentData&#13;
WHERE &#13;
    -- Application exclusive de la condition en fonction de %3&#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, Document_Date DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-FACTURE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250305082738633</Version>
      <CnxSource>1</CnxSource>
      <Requete>WITH LineData AS (&#13;
    SELECT &#13;
        SaleDocument.DocumentType, &#13;
        SaleDocument.DocumentDate, &#13;
        &amp;apos;FACT&amp;apos; AS TypeDocument, &#13;
        SaleDocumentLine.sysCreatedDate AS DateCreation, &#13;
        SaleDocumentLine.sysModifiedDate AS DateModification, &#13;
        SaleDocumentLine.Id AS Code, &#13;
        SaleDocumentLine.ParentLineId AS RefNiveauPere, &#13;
        SaleDocumentLine.Id AS IDInterne, &#13;
        SaleDocumentLine.DocumentId AS IDInterneDocument, &#13;
        SaleDocumentLine.LineOrder AS NumeroLigne, &#13;
        SaleDocumentLine.ItemId AS CodeArticle, &#13;
        SaleDocumentLine.ItemId AS IDInerneArticle, &#13;
        SaleDocumentLine.Quantity AS Quantité, &#13;
        SaleDocumentLine.DescriptionClear AS Designation, &#13;
        SaleDocumentLine.UnitId AS IDInerneUnite, &#13;
        SaleDocumentLine.TotalVolume AS VolumeTotal, &#13;
        SaleDocumentLine.TotalWeight AS PoidsTotal, &#13;
        SaleDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
        SaleDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
        SaleDocumentLine.PurchasePrice AS PrixAchat, &#13;
        SaleDocumentLine.TrackingNumber AS SerieLotNumero, &#13;
        SaleDocumentLine.LimitDate AS SerieLotDateLimite, &#13;
        SaleDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
        SaleDocumentLine.CostPrice AS PrixRevient, &#13;
        SaleDocumentLine.UnitDiscountRate AS PrcRemise, &#13;
        SaleDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
        SaleDocumentLine.salePriceVatExcluded AS PrixVenteBrutHT, &#13;
        SaleDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT, &#13;
        SaleDocumentLine.UnitEcotaxAmountVatIncluded AS MontantEcoTaxeTTC, &#13;
        SaleDocumentLine.VatAmount AS MontantTva, &#13;
        SaleDocumentLine.OrderedQuantity AS QuantitéCommandée, &#13;
        SaleDocumentLine.DeliveredQuantity AS QuantitéLIvrée, &#13;
        SaleDocumentLine.RemainingQuantityToDeliver AS Reliquat, &#13;
        SaleDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
        SaleDocumentLine.DealId AS IDInterne_Affaire, &#13;
        SaleDocumentLine.VatId AS idinterneTVA, &#13;
        (LEN(Numbering) - LEN(REPLACE(Numbering, &amp;apos;.&amp;apos;, &amp;apos;&amp;apos;)) + 1) AS Niveau, &#13;
        SaleDocumentLine.Id AS RefNiveauHierarchie, &#13;
        &amp;apos;0&amp;apos; AS ValoriserLieCompose, &#13;
        &amp;apos;0&amp;apos; AS QuantifierLieCompose, &#13;
        CASE &#13;
            WHEN SaleDocumentLine.NomenclatureLevel &amp;gt; 0 THEN &amp;apos;1&amp;apos;&#13;
            ELSE &amp;apos;0&amp;apos;&#13;
        END AS Composant, &#13;
        (SELECT Vat.Rate FROM Vat WHERE Vat.Id = SaleDocumentLine.VatId) AS TauxTVA, &#13;
        SaleDocumentLine.Weight AS PoidsUnitaire,&#13;
        -- Colonnes supplémentaires pour le filtrage :&#13;
        SaleDocument.CustomerId AS IDInterneTiers,&#13;
        ROW_NUMBER() OVER (PARTITION BY SaleDocument.CustomerId ORDER BY SaleDocument.DocumentDate DESC) AS rn,&#13;
        DATEDIFF(day, SaleDocument.DocumentDate, GETDATE()) AS diffDays&#13;
        %5&#13;
    FROM SaleDocument&#13;
    INNER JOIN SaleDocumentLine &#13;
        ON SaleDocument.Id = SaleDocumentLine.DocumentId&#13;
    WHERE (DocumentType = 2 OR DocumentType = 4) AND SaleDocument.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;)&#13;
)&#13;
SELECT *&#13;
FROM LineData&#13;
WHERE &#13;
    CASE &#13;
         WHEN %2 &amp;lt;= 10 THEN CASE WHEN rn &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
         ELSE CASE WHEN diffDays &amp;lt;= %2 THEN 1 ELSE 0 END&#13;
    END = 1&#13;
ORDER BY IDInterneTiers, DocumentDate DESC;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>FAMILLE_ARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456585</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ItemFamily.sysCreatedDate AS DateCreation , &#13;
ItemFamily.sysModifiedDate AS DateModification , &#13;
ItemFamily.Id AS IDInterne , &#13;
ItemFamily.Id AS Code , &#13;
ItemFamily.Caption AS Libelle , &#13;
&amp;apos;A&amp;apos; AS TypeFamille &#13;
FROM ItemFamily &#13;
&#13;
WHERE &#13;
ItemFamily.Id NOT IN (%8)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CMB_FAMILLEARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20230714180730331</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ItemSubFamily.sysCreatedDate AS DateCreation , &#13;
ItemSubFamily.sysModifiedDate AS DateModification , &#13;
ItemSubFamily.Id AS IDInterne , &#13;
ItemSubFamily.Id AS Code , &#13;
ItemSubFamily.Caption AS Libelle , &#13;
ItemFamily.Id AS IDFamille , &#13;
&amp;apos;A&amp;apos; AS Type , &#13;
ItemFamily.Caption AS LibelleFamille &#13;
FROM   ItemFamily &#13;
       LEFT OUTER JOIN ItemSubFamily&#13;
            ON ItemFamily.Id = ItemSubFamily.ItemFamilyId &#13;
</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CMB_FAMILLECLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20230714180742607</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
CustomerSubFamily.sysCreatedDate AS DateCreation , &#13;
CustomerSubFamily.sysModifiedDate AS DateModification , &#13;
CustomerSubFamily.Id AS IDInterne , &#13;
CustomerSubFamily.Id AS Code , &#13;
CustomerSubFamily.Caption AS Libelle , &#13;
CustomerFamily.Id AS IDFamille , &#13;
&amp;apos;C&amp;apos; AS Type , &#13;
CustomerFamily.Caption AS LibelleFamille &#13;
FROM   CustomerFamily &#13;
       LEFT OUTER JOIN CustomerSubFamily&#13;
            ON CustomerFamily.Id = CustomerSubFamily.CustomerFamilyId &#13;
</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>FAMILLE_CLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456585</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
CustomerFamily.sysCreatedDate AS DateCreation , &#13;
CustomerFamily.sysModifiedDate AS DateModification , &#13;
CustomerFamily.Id AS IDInterne , &#13;
CustomerFamily.Id AS Code , &#13;
CustomerFamily.Caption AS Libelle , &#13;
&amp;apos;C&amp;apos; AS TypeFamille &#13;
&#13;
FROM CustomerFamily &#13;
WHERE &#13;
CustomerFamily.Id NOT IN (%7)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>FAMILLE_FOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456585</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SupplierFamily.sysCreatedDate AS DateCreation , &#13;
SupplierFamily.sysModifiedDate AS DateModification , &#13;
SupplierFamily.Id AS IDInterne , &#13;
SupplierFamily.Id AS Code , &#13;
SupplierFamily.Caption AS Libelle , &#13;
&amp;apos;F&amp;apos; AS TypeFamille &#13;
&#13;
&#13;
FROM SupplierFamily &#13;
WHERE &#13;
SupplierFamily.Id  NOT IN (%9)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CMB_FAMILLEFOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20230714180817979</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SupplierSubFamily.sysCreatedDate AS DateCreation , &#13;
SupplierSubFamily.sysModifiedDate AS DateModification , &#13;
SupplierSubFamily.Id AS IDInterne , &#13;
SupplierSubFamily.Id AS Code , &#13;
SupplierSubFamily.Caption AS Libelle , &#13;
SupplierFamily.Id AS IDFamille , &#13;
&amp;apos;F&amp;apos; AS Type , &#13;
SupplierFamily.Caption AS LibelleFamille &#13;
&#13;
FROM   SupplierFamily &#13;
       LEFT OUTER JOIN SupplierSubFamily&#13;
            ON SupplierFamily.Id = SupplierSubFamily.SupplierFamilyId &#13;
</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>-TIERS-FOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155758540</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Supplier.sysCreatedDate AS DateCreation , &#13;
Supplier.sysModifiedDate AS DateModification , &#13;
Supplier.Id AS IDInterne , &#13;
Supplier.Id AS Code , &#13;
Supplier.Civility AS Civilité , &#13;
Supplier.Name AS Nom , &#13;
Supplier.MainDeliveryAddress_Address1 AS Livraison_Adresse1 , &#13;
Supplier.MainDeliveryAddress_Address2 AS Livraison_Adresse2 , &#13;
Supplier.MainDeliveryAddress_Address3 AS Livraison_Adresse3 , &#13;
Supplier.MainDeliveryAddress_ZipCode AS Livraison_CP , &#13;
Supplier.MainDeliveryAddress_City AS Livraison_Ville , &#13;
Supplier.MainDeliveryAddress_CountryIsoCode AS Livraison_IDInternePays , &#13;
Supplier.MainDeliveryAddress_Longitude AS Livraison_Longitude , &#13;
Supplier.MainDeliveryAddress_Latitude AS Livraison_Latitude , &#13;
Supplier.MainDeliveryContact_Civility AS Livraison_Contact_Civilite , &#13;
Supplier.MainDeliveryContact_Name AS Livraison_Contact_Nom , &#13;
Supplier.MainDeliveryContact_Phone AS Livraison_Contact_Tel , &#13;
Supplier.MainDeliveryContact_CellPhone AS Livraison_Contact_GSM , &#13;
Supplier.MainDeliveryContact_Email AS Livraison_Contact_Mail , &#13;
Supplier.MainDeliveryContact_Fax AS Livraison_Contact_Fax , &#13;
Supplier.MainDeliveryContact_Function AS Livraison_Contact_Fonction , &#13;
Supplier.MainDeliveryContact_FirstName AS Livraison_contact_Prenom , &#13;
Supplier.MainInvoicingAddress_Address1 AS Facturation_Adresse1 , &#13;
Supplier.MainInvoicingAddress_Address2 AS Facturation_Adresse2 , &#13;
Supplier.MainInvoicingAddress_Address3 AS Facturation_Adresse3 , &#13;
Supplier.MainInvoicingAddress_City AS Facturation_Ville , &#13;
Supplier.MainInvoicingAddress_ZipCode AS Facturation_CP , &#13;
Supplier.MainInvoicingAddress_CountryIsoCode AS Facturation_IDInternePays , &#13;
Supplier.MainInvoicingAddress_Longitude AS Facturation_Longitude , &#13;
Supplier.MainInvoicingAddress_Latitude AS Facturation_Latitude , &#13;
Supplier.MainInvoicingContact_Civility AS Facturation_Contact_Civilite , &#13;
Supplier.MainInvoicingContact_Name AS Facturation_Contact_Nom , &#13;
Supplier.MainInvoicingContact_FirstName AS Facturation_Contact_Prenom , &#13;
Supplier.MainInvoicingContact_Function AS Facturation_Contact_Fonction , &#13;
Supplier.MainInvoicingContact_Phone AS Facturation_Contact_Tel , &#13;
Supplier.MainInvoicingContact_CellPhone AS Facturation_Contact_GSM , &#13;
Supplier.MainInvoicingContact_Email AS Facturation_Contact_Mail , &#13;
Supplier.MainInvoicingContact_Fax AS Facturation_Contact_Fax , &#13;
Supplier.MainDeliveryAddress_Description AS Livraison_Info, &#13;
Supplier.MainInvoicingAddress_Description AS Facturation_Info, &#13;
Supplier.FamilyId AS IDInterneFamille , &#13;
Supplier.SubFamilyId AS IDInterneSousFamille , &#13;
Supplier.PaymentDate AS PrcRemise , &#13;
Supplier.AllowedAmount AS Encours_Autorise , &#13;
Supplier.CurrentAmount AS Solde_Actuel , &#13;
&amp;apos;F&amp;apos; AS TypeTiers , &#13;
Supplier.FinancialDiscountRate AS PrcEscompte , &#13;
Supplier.MainDeliveryContact_Department AS Livraison_Contact_Service, &#13;
Supplier.MainInvoicingContact_Department AS Facturation_Contact_Service, &#13;
Supplier.NotesClear AS Note ,&#13;
Supplier.colleagueID AS IDInterneCollaborateur ,&#13;
Supplier.MainInvoicingAddress_WebSite AS Facturation_Contact_Web, &#13;
Supplier.MainDeliveryAddress_WebSite AS Livraison_Contact_Web ,&#13;
Supplier.MainInvoicingAddress_ThirdName AS Facturation_Nom, &#13;
Supplier.Group1 AS IDInterne_Groupe1, &#13;
Supplier.Group2 AS IDInterne_Groupe2, &#13;
Supplier.MainDeliveryAddress_Civility AS Livraison_Civilite, &#13;
Supplier.MainInvoicingAddress_Civility AS Facturation_Civilite, &#13;
&#13;
Supplier.IntracommunityVATNumber  AS TVAIntra, &#13;
&#13;
&#13;
Supplier.MainDeliveryAddress_ThirdName  AS Livraison_Nom  &#13;
&#13;
/*&#13;
(SELECT SUM(PurchaseDocument.AmountVatExcludedWithDiscountAndShippingWithoutEcotax) FROM PurchaseDocument WHERE PurchaseDocument.SupplierId = Supplier.Id AND DocumentType = 2 And DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= 365) AS CA&#13;
*/&#13;
%5&#13;
FROM Supplier &#13;
WHERE &#13;
Supplier.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
ActiveState = 0 And  ((Supplier.FamilyId NOT IN (%9) or Supplier.FamilyId is Null) and (Supplier.SubFamilyId NOT IN(%9) or Supplier.SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GAMME</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456588</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
RangeType.Id AS IDInterne, &#13;
RangeType.Id AS Code, &#13;
RangeType.Caption AS Libelle, &#13;
&amp;apos;GAMME&amp;apos; AS TypeNomenclature&#13;
&#13;
FROM RangeType</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GAMME_ELEMENTS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456588</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
RangeTypeElement.Id AS IDInterne, &#13;
RangeTypeElement.Code AS Code, &#13;
RangeTypeElement.Caption AS Libelle, &#13;
RangeTypeElement.RangeTypeId AS IdInterne_Parent, &#13;
&amp;apos;GAMME-ELEMENT&amp;apos; AS TypeNomenclature&#13;
FROM RangeTypeElement</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_ARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155926704</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ItemAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
ItemAssociatedFiles.sysModifiedDate AS DateModification, &#13;
ItemAssociatedFiles.Id AS IDInterne, &#13;
ItemAssociatedFiles.Id AS Code, &#13;
ItemAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
ItemAssociatedFiles.Name AS NomDocument, &#13;
ItemAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
ItemAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Article&amp;apos; as Table_Externe&#13;
&#13;
FROM ItemAssociatedFiles&#13;
&#13;
&#13;
WHERE &#13;
ItemAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
ItemAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_CLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155939538</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
CustomerAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
CustomerAssociatedFiles.sysModifiedDate AS DateModification, &#13;
CustomerAssociatedFiles.Id AS IDInterne, &#13;
CustomerAssociatedFiles.Id AS Code, &#13;
CustomerAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
CustomerAssociatedFiles.Name AS NomDocument, &#13;
CustomerAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
CustomerAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Tiers_CP&amp;apos; as Table_Externe&#13;
&#13;
FROM CustomerAssociatedFiles&#13;
&#13;
&#13;
WHERE &#13;
CustomerAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
CustomerAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_CONTRAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155957921</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
MaintenanceContractAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
MaintenanceContractAssociatedFiles.sysModifiedDate AS DateModification, &#13;
MaintenanceContractAssociatedFiles.Id AS IDInterne, &#13;
MaintenanceContractAssociatedFiles.Id AS Code, &#13;
MaintenanceContractAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
MaintenanceContractAssociatedFiles.Name AS NomDocument, &#13;
MaintenanceContractAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
MaintenanceContractAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Contrat&amp;apos; as Table_Externe&#13;
&#13;
FROM MaintenanceContractAssociatedFiles, MaintenanceContract&#13;
&#13;
&#13;
WHERE &#13;
MaintenanceContractAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
MaintenanceContract.ID = MaintenanceContractAssociatedFiles.ParentId AND&#13;
MaintenanceContractAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos; AND&#13;
MaintenanceContract.Status = 2 AND &#13;
(MaintenanceContract.EndDate &amp;gt;= GETDATE()  OR &#13;
DATEDIFF(day,MaintenanceContract.EndDate , GetDate()) &amp;lt;= %2)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_DOC_A</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160014134</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PurchaseDocumentAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
PurchaseDocumentAssociatedFiles.sysModifiedDate AS DateModification, &#13;
PurchaseDocumentAssociatedFiles.Id AS IDInterne, &#13;
PurchaseDocumentAssociatedFiles.Id AS Code, &#13;
PurchaseDocumentAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
PurchaseDocumentAssociatedFiles.Name AS NomDocument, &#13;
PurchaseDocumentAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
PurchaseDocumentAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Document&amp;apos; as Table_Externe&#13;
&#13;
FROM PurchaseDocumentAssociatedFiles,  PurchaseDocument&#13;
&#13;
&#13;
WHERE &#13;
PurchaseDocumentAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
PurchaseDocumentAssociatedFiles.ParentId = PurchaseDocument.Id AND &#13;
PurchaseDocumentAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos; AND &#13;
DATEDIFF(day,PurchaseDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_DOC_V</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160039070</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SaleDocumentAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
SaleDocumentAssociatedFiles.sysModifiedDate AS DateModification, &#13;
SaleDocumentAssociatedFiles.Id AS IDInterne, &#13;
SaleDocumentAssociatedFiles.Id AS Code, &#13;
SaleDocumentAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
SaleDocumentAssociatedFiles.Name AS NomDocument, &#13;
SaleDocumentAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
SaleDocumentAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Document&amp;apos; as Table_Externe&#13;
&#13;
FROM SaleDocumentAssociatedFiles,  SaleDocument&#13;
&#13;
&#13;
WHERE &#13;
SaleDocumentAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
SaleDocumentAssociatedFiles.ParentId = SaleDocument.Id AND &#13;
SaleDocumentAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos; AND &#13;
DATEDIFF(day,SaleDocument.DocumentDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_FOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160053691</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SupplierAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
SupplierAssociatedFiles.sysModifiedDate AS DateModification, &#13;
SupplierAssociatedFiles.Id AS IDInterne, &#13;
SupplierAssociatedFiles.Id AS Code, &#13;
SupplierAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
SupplierAssociatedFiles.Name AS NomDocument, &#13;
SupplierAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
SupplierAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Tiers_F&amp;apos; as Table_Externe&#13;
&#13;
FROM SupplierAssociatedFiles&#13;
&#13;
&#13;
WHERE &#13;
SupplierAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
SupplierAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_INTER</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160106772</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ScheduleEventAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
ScheduleEventAssociatedFiles.sysModifiedDate AS DateModification, &#13;
ScheduleEventAssociatedFiles.Id AS IDInterne, &#13;
ScheduleEventAssociatedFiles.Id AS Code, &#13;
ScheduleEventAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
ScheduleEventAssociatedFiles.Name AS NomDocument, &#13;
ScheduleEventAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
ScheduleEventAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Intervention&amp;apos; as Table_Externe&#13;
&#13;
FROM ScheduleEventAssociatedFiles ,  ScheduleEvent &#13;
&#13;
&#13;
WHERE &#13;
ScheduleEventAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
ScheduleEventAssociatedFiles.ParentId = ScheduleEvent.Id AND &#13;
ScheduleEventAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos; AND &#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType) = &amp;apos;1&amp;apos; AND&#13;
DATEDIFF(day,ScheduleEvent.EndDateTime , GetDate()) &amp;lt;= %2 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GPS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714185637589</Version>
      <CnxSource>1</CnxSource>
      <Requete>&#13;
PROCÉDURE MoiMême(TableA2 est Source de Données, NbjHisto est un entier = 0)&#13;
&#13;
&#13;
//---------GEOCODAGE GRATUIT + Ggl 30/06/2022 14:25&#13;
sUrlGeoGouv				est une chaîne	= &amp;quot;https://api-adresse.data.gouv.fr/search/?q=&amp;quot;&#13;
GeoGouv					est un JSON	//, description  = &amp;apos;GeoGouv&amp;apos;&#13;
sAdresse				est une chaîne &#13;
sAdresseGeoGouv			est une chaîne&#13;
Localisation			est une géoPosition&#13;
nNbLimiteADRparSync		est un entier&#13;
nNbMaxAdrParSync		est un entier	= 2500&#13;
NbAdr					est un entier&#13;
bNbAdr					est un booléen&#13;
bAttendre				est un booléen&#13;
sUrlgglMaps				est une chaîne&#13;
xmlGgl					est un xmlDocument&#13;
sAPIKey					est une chaîne&#13;
//&amp;quot;TableNB&amp;quot;					est une Source de Données&#13;
sMaReq					est une chaîne&#13;
sdReqTemp					est une Source de Données&#13;
&#13;
//HPasse(GéoCodage,&amp;quot;MAXGREQUE&amp;quot;)&#13;
//HChangeRep(GéoCodage,gsRepTempBackup)&#13;
//HCréationSiInexistant(GéoCodage)&#13;
&#13;
SI XMLVersTexte(gConfigXML.Connexion.Complement.APIKey_Google) = &amp;quot;api.gouv.fr&amp;quot; ALORS &#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)  &#13;
	SI HDéclareExterne(gsRepTemp + [fSep] +  &amp;quot;tiers.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Facturation_Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; ou Livraison_Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot;SUR &amp;quot;IDTiers&amp;quot;&#13;
			SI {&amp;quot;TableA.Facturation_Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Facturation_CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Facturation_Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse		= Remplace({&amp;quot;TableA.Facturation_Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Facturation_Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Facturation_CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Facturation_Ville&amp;quot;,indRubrique} &#13;
				sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				SI {&amp;quot;TableA.Facturation_Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Facturation_Pays&amp;quot;,indRubrique}&#13;
				//Methode Api Gouv&#13;
				VariableRAZ(Localisation)&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_ sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//			(Localisation) = Géocode(sAdresse,Faux)&#13;
				&#13;
				{&amp;quot;TableA.Facturation_Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Facturation_Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.Facturation_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				&#13;
				SI {&amp;quot;TableA.Facturation_Adresse1&amp;quot;,indRubrique} = {&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique} ET {&amp;quot;TableA.Facturation_Adresse2&amp;quot;,indRubrique} = {&amp;quot;TableA.Livraison_Adresse2&amp;quot;,indRubrique} ET {&amp;quot;TableA.Facturation_CP&amp;quot;,indRubrique} = {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} ALORS&#13;
					{&amp;quot;TableA.Livraison_Latitude&amp;quot;,indRubrique}			= Localisation.Latitude&#13;
					{&amp;quot;TableA.Livraison_Longitude&amp;quot;,indRubrique}			= Localisation.Longitude&#13;
					{&amp;quot;TableA.livraison_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				SINON&#13;
					SI {&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
						&#13;
						sAdresse		= Remplace({&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Livraison_Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique}&#13;
						sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
						sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
						sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
						SI {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique}&#13;
						VariableRAZ(Localisation)&#13;
						//Methode Api Gouv&#13;
						VariableRAZ(Localisation)&#13;
						SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
							Localisation.Longitude	= GéoCodage.Longitude&#13;
							Localisation.Latitude	= GéoCodage.Latitude&#13;
							Localisation.DateMesure	= GéoCodage.DateMaj&#13;
							Localisation.Précision	= GéoCodage.Précision&#13;
						SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_ sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
							NbAdr++&#13;
							GeoGouv =  HTTPDonneRésultat()&#13;
							SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
								Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
								Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
								Localisation.DateMesure	= DateSys()&#13;
								Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
								HRAZ(GéoCodage)&#13;
								GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
								GéoCodage.Latitude	= Localisation.Latitude&#13;
								GéoCodage.Longitude	= Localisation.Longitude&#13;
								GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
								GéoCodage.Précision	= Localisation.Précision&#13;
								HAjoute(GéoCodage)&#13;
								NbEnregSynchronisé++&#13;
							FIN&#13;
						FIN&#13;
						//Fin ApiGouv&#13;
						//						(Localisation) = Géocode(sAdresse,Faux)&#13;
						&#13;
						{&amp;quot;TableA.Livraison_Latitude&amp;quot;,indRubrique}			= Localisation.Latitude&#13;
						{&amp;quot;TableA.Livraison_Longitude&amp;quot;,indRubrique}			= Localisation.Longitude&#13;
						{&amp;quot;TableA.livraison_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					FIN&#13;
				FIN&#13;
				SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
			SINON&#13;
				SI {&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
					sAdresse		= Remplace({&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Livraison_Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &#13;
					sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
					sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
					sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
					SI {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique}&#13;
					VariableRAZ(Localisation)&#13;
					//Methode Api Gouv&#13;
					VariableRAZ(Localisation)&#13;
					SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
						Localisation.Longitude	= GéoCodage.Longitude&#13;
						Localisation.Latitude	= GéoCodage.Latitude&#13;
						Localisation.DateMesure	= GéoCodage.DateMaj&#13;
						Localisation.Précision	= GéoCodage.Précision&#13;
					SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_ sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
						NbAdr++&#13;
						GeoGouv =  HTTPDonneRésultat()&#13;
						SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
							Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
							Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
							Localisation.DateMesure	= DateSys()&#13;
							Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
							HRAZ(GéoCodage)&#13;
							GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
							GéoCodage.Latitude	= Localisation.Latitude&#13;
							GéoCodage.Longitude	= Localisation.Longitude&#13;
							GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
							GéoCodage.Précision	= Localisation.Précision&#13;
							HAjoute(GéoCodage)&#13;
							NbEnregSynchronisé++&#13;
						FIN&#13;
					FIN&#13;
					//Fin ApiGouv&#13;
					//					(Localisation) = Géocode(sAdresse,Faux)&#13;
					&#13;
					{&amp;quot;TableA.Livraison_Latitude&amp;quot;,indRubrique}			= Localisation.Latitude&#13;
					{&amp;quot;TableA.Livraison_Longitude&amp;quot;,indRubrique}			= Localisation.Longitude&#13;
					{&amp;quot;TableA.livraison_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
				FIN&#13;
				&#13;
			FIN&#13;
			&#13;
			&#13;
		FIN&#13;
	FIN&#13;
	//trace(heuresys())&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep] + &amp;quot;contact.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDContact&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse		= Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				&#13;
				&#13;
				VariableRAZ(Localisation)&#13;
				//Methode Api Gouv&#13;
				VariableRAZ(Localisation)&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_ sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//				(Localisation) = Géocode(sAdresse,Faux)&#13;
				&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;intervention.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDIntervention&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse		= Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				//Methode Api Gouv&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_ sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//				(Localisation) = Géocode(sAdresse,Faux)&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;leads.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDLeads&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse		= Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				//Methode Api Gouv&#13;
				VariableRAZ(Localisation)&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_  sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//				(Localisation) = Géocode(sAdresse,Faux)&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}	= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;Chantier.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDChantier&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse		= Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				sAdresseGeoGouv	= Remplace(SansAccent(Majuscule(sAdresse)),[&amp;quot; &amp;quot;,&amp;quot;,&amp;quot;],&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				sAdresseGeoGouv	= Remplace(sAdresseGeoGouv,&amp;quot;++&amp;quot;,&amp;quot;+&amp;quot;)&#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				&#13;
				VariableRAZ(Localisation)&#13;
				//Methode Api Gouv&#13;
				VariableRAZ(Localisation)&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_  sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//					(Localisation) = Géocode(sAdresse,Faux)&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	&#13;
	//Géocodage NuxiDev Bureau&#13;
	&#13;
	SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; ALORS&#13;
		&#13;
		HAnnuleDéclaration(&amp;quot;TableNB&amp;quot;) &#13;
		//VariableRAZ(&amp;quot;TableNB&amp;quot;)&#13;
		SI HDéclareExterne(&amp;quot;adresses_nuxi.fic&amp;quot;,&amp;quot;TableNB&amp;quot;,CnxBDDSrc[3]) ALORS&#13;
			POUR TOUT &amp;quot;TableNB&amp;quot; AVEC &amp;quot; Longitude = 0 et Latitude = 0 et Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDadresses_nuxi&amp;quot;&#13;
				sAdresse = Remplace({&amp;quot;TableNB.Adresse_1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableNB.Adresse_2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableNB.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableNB.Ville&amp;quot;,indRubrique} &#13;
				//				SI {&amp;quot;&amp;quot;TableNB&amp;quot;.Pays &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;&amp;quot;TableNB&amp;quot;.Pays&#13;
				VariableRAZ(Localisation)&#13;
				//Methode Api Gouv&#13;
				VariableRAZ(Localisation)&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_ sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr ++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((Arrondi((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//					(Localisation) = Géocode(sAdresse,Faux)&#13;
				SI Localisation.Latitude &amp;lt;&amp;gt; 0 ET Localisation.Longitude &amp;lt;&amp;gt; 0 ALORS&#13;
					{&amp;quot;TableNB.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
					{&amp;quot;TableNB.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
					{&amp;quot;TableNB.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					HModifie(&amp;quot;TableNB&amp;quot;)&#13;
				FIN&#13;
				&#13;
			FIN&#13;
			HFerme(&amp;quot;TableNB&amp;quot;)&#13;
		FIN&#13;
		&#13;
		HAnnuleDéclaration(&amp;quot;TableNB&amp;quot;) &#13;
		//VariableRAZ(&amp;quot;TableNB&amp;quot;)&#13;
		SI HDéclareExterne(&amp;quot;interventions_details_nuxi.fic&amp;quot;,&amp;quot;TableNB&amp;quot;,CnxBDDSrc[3]) ALORS&#13;
			&#13;
			POUR TOUT &amp;quot;TableNB&amp;quot; AVEC &amp;quot; Longitude = 0 et Latitude = 0 et Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDInterne&amp;quot;&#13;
				sAdresse = Remplace({&amp;quot;TableNB.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableNB.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableNB.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableNB.Ville&amp;quot;,indRubrique} &#13;
				SI {&amp;quot;TableNB.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableNB.Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				//Methode Api Gouv&#13;
				VariableRAZ(Localisation)&#13;
				SI sAdresse &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HLitRecherche(GéoCodage,&amp;quot;Adresse&amp;quot;,Majuscule(sAdresse),hIdentique) ALORS&#13;
					Localisation.Longitude	= GéoCodage.Longitude&#13;
					Localisation.Latitude	= GéoCodage.Latitude&#13;
					Localisation.DateMesure	= GéoCodage.DateMaj&#13;
					Localisation.Précision	= GéoCodage.Précision&#13;
				SINON SI NbAdr &amp;lt; nNbMaxAdrParSync _ET_  sAdresseGeoGouv &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HTTPRequête(sUrlGeoGouv + URLEncode(sAdresseGeoGouv) + &amp;quot;&amp;amp;limit=1&amp;quot; ) = Vrai ALORS&#13;
					NbAdr++&#13;
					GeoGouv =  HTTPDonneRésultat()&#13;
					SI GeoGouv.features..Occurrence &amp;gt; 0 _ET_ GeoGouv.features[1].geometry.coordinates..Occurrence = 2 ALORS&#13;
						Localisation.Longitude	= GeoGouv.features[1].geometry.coordinates[1]&#13;
						Localisation.Latitude	= GeoGouv.features[1].geometry.coordinates[2]&#13;
						Localisation.DateMesure	= DateSys()&#13;
						Localisation.Précision	= ArrondiInférieur((ArrondiInférieur((GeoGouv.features[1].properties.score * 100),0) / 20),0)&#13;
						HRAZ(GéoCodage)&#13;
						GéoCodage.Adresse	= Majuscule(sAdresse)&#13;
						GéoCodage.Latitude	= Localisation.Latitude&#13;
						GéoCodage.Longitude	= Localisation.Longitude&#13;
						GéoCodage.DateMaj	= Localisation.DateMesure..PartieDate &#13;
						GéoCodage.Précision	= Localisation.Précision&#13;
						HAjoute(GéoCodage)&#13;
						NbEnregSynchronisé++&#13;
					FIN&#13;
				FIN&#13;
				//Fin ApiGouv&#13;
				//					(Localisation) = Géocode(sAdresse,Faux)&#13;
				SI Localisation.Latitude &amp;lt;&amp;gt; 0 ET Localisation.Longitude &amp;lt;&amp;gt; 0 ALORS&#13;
					{&amp;quot;TableNB.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
					{&amp;quot;TableNB.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
					{&amp;quot;TableNB.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					HModifie(&amp;quot;TableNB&amp;quot;)&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
		&#13;
		&#13;
		&#13;
	FIN&#13;
SINON&#13;
	//Méthode via Google //---------GEOCODAGE 10/11/2020 10:56&#13;
	//	sAdresse			est une chaîne &#13;
	//	Localisation		est une géoPosition&#13;
	//	nNbLimiteADRparSync	est un entier&#13;
	//	nNbMaxAdrParSync	est un entier	= 2500&#13;
	//	bAttendre			est un booléen&#13;
	//	sUrlgglMaps			est une chaîne&#13;
	//	xmlGgl				est un xmlDocument&#13;
	//	sAPIKey				est une chaîne&#13;
	//	CnxBDDSrc[3]				est une Connexion&#13;
	//	&amp;quot;TableNB&amp;quot;				est une Source de Données&#13;
	&#13;
	&#13;
	gsAPI_Key_Serial= XMLVersTexte(gConfigXML.Connexion.Complement.APIKey_Google)&#13;
	&#13;
	&#13;
	API_Key_AffectationKey()&#13;
	&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	//trace(heuresys())&#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;tiers.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Facturation_Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; ou Livraison_Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot;SUR &amp;quot;IDTiers&amp;quot;&#13;
			//trace(&amp;quot;Tiers&amp;quot;  + {&amp;quot;TableA.IDTiers)&#13;
			SI {&amp;quot;TableA.Facturation_Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Facturation_CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Facturation_Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse = Remplace({&amp;quot;TableA.Facturation_Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Facturation_Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Facturation_CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Facturation_Ville&amp;quot;,indRubrique} &#13;
				SI {&amp;quot;TableA.Facturation_Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Facturation_Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				&#13;
				{&amp;quot;TableA.Facturation_Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Facturation_Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.Facturation_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				SI {&amp;quot;TableA.Facturation_Adresse1&amp;quot;,indRubrique} = {&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique} ET {&amp;quot;TableA.Facturation_Adresse2&amp;quot;,indRubrique} = {&amp;quot;TableA.Livraison_Adresse2&amp;quot;,indRubrique} ET {&amp;quot;TableA.Facturation_CP&amp;quot;,indRubrique} = {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} ALORS&#13;
					{&amp;quot;TableA.Livraison_Latitude&amp;quot;,indRubrique}			= Localisation.Latitude&#13;
					{&amp;quot;TableA.Livraison_Longitude&amp;quot;,indRubrique}			= Localisation.Longitude&#13;
					{&amp;quot;TableA.livraison_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				SINON&#13;
					SI {&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
						sAdresse = Remplace({&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Livraison_Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &#13;
						SI {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique}&#13;
						VariableRAZ(Localisation)&#13;
						(Localisation) = Géocode(sAdresse,Faux)&#13;
						&#13;
						{&amp;quot;TableA.Livraison_Latitude&amp;quot;,indRubrique}			= Localisation.Latitude&#13;
						{&amp;quot;TableA.Livraison_Longitude&amp;quot;,indRubrique}			= Localisation.Longitude&#13;
						{&amp;quot;TableA.livraison_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					FIN&#13;
				FIN&#13;
				SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
			SINON&#13;
				SI {&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
					sAdresse = Remplace({&amp;quot;TableA.Livraison_Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Livraison_Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Livraison_Ville&amp;quot;,indRubrique} &#13;
					SI {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Livraison_Pays&amp;quot;,indRubrique}&#13;
					VariableRAZ(Localisation)&#13;
					(Localisation) = Géocode(sAdresse,Faux)&#13;
					&#13;
					{&amp;quot;TableA.Livraison_Latitude&amp;quot;,indRubrique}			= Localisation.Latitude&#13;
					{&amp;quot;TableA.Livraison_Longitude&amp;quot;,indRubrique}			= Localisation.Longitude&#13;
					{&amp;quot;TableA.livraison_LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
				FIN&#13;
				&#13;
			FIN&#13;
			&#13;
			&#13;
		FIN&#13;
	FIN&#13;
	//trace(heuresys())&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;contact.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDContact&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse = Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				&#13;
				&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;intervention.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDIntervention&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse = Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique}&#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;leads.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDLeads&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse = Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	HAnnuleDéclaration(&amp;quot;TableA&amp;quot;)   &#13;
	SI HDéclareExterne(gsRepTemp + [fSep]  + &amp;quot;Chantier.fic&amp;quot;,&amp;quot;TableA&amp;quot;) ALORS&#13;
		//info(&amp;quot;declare&amp;quot;)&#13;
		POUR TOUT &amp;quot;TableA&amp;quot; AVEC &amp;quot; Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDChantier&amp;quot;&#13;
			//trace(&amp;quot;Contact&amp;quot;  + {&amp;quot;TableA.IDContact)&#13;
			SI {&amp;quot;TableA.Adresse1&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.CP&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				sAdresse = Remplace({&amp;quot;TableA.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableA.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableA.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableA.Ville&amp;quot;,indRubrique} &#13;
				SI {&amp;quot;TableA.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableA.Pays&amp;quot;,indRubrique}&#13;
				&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
				//	trace({&amp;quot;TableA.Latitude + &amp;quot; &amp;quot;+ {&amp;quot;TableA.Longitude +  &amp;quot; &amp;quot; + sadresse)&#13;
			SINON&#13;
				{&amp;quot;TableA.Latitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.Longitude&amp;quot;,indRubrique}		= 0&#13;
				{&amp;quot;TableA.LngLatPrécision&amp;quot;,indRubrique}	= 0&#13;
			FIN&#13;
			SI DateValide(Localisation.DateMesure..PartieDate) ALORS HModifie(&amp;quot;TableA&amp;quot;)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	&#13;
	//Géocodage NuxiDev Bureau&#13;
	&#13;
	SI CnxBDDSrc[3]..Libellé &amp;lt;&amp;gt; &amp;quot;0&amp;quot; ALORS&#13;
		HAnnuleDéclaration(&amp;quot;TableNB&amp;quot;) &#13;
		//VariableRAZ(&amp;quot;TableNB&amp;quot;)&#13;
		SI HDéclareExterne(&amp;quot;adresses_nuxi.fic&amp;quot;,&amp;quot;TableNB&amp;quot;,CnxBDDSrc[3]) ALORS&#13;
			POUR TOUT &amp;quot;TableNB&amp;quot; AVEC &amp;quot; Longitude = 0 et Latitude = 0 et Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDadresses_nuxi&amp;quot;&#13;
				sAdresse = Remplace({&amp;quot;TableNB.Adresse_1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableNB.Adresse_2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableNB.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableNB.Ville&amp;quot;,indRubrique}&#13;
				//				SI {&amp;quot;&amp;quot;TableNB&amp;quot;.Pays &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;&amp;quot;TableNB&amp;quot;.Pays&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				SI Localisation.Latitude &amp;lt;&amp;gt; 0 ET Localisation.Longitude &amp;lt;&amp;gt; 0 ALORS&#13;
					{&amp;quot;TableNB.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
					{&amp;quot;TableNB.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
					{&amp;quot;TableNB.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					HModifie(&amp;quot;TableNB&amp;quot;)&#13;
				FIN&#13;
				&#13;
			FIN&#13;
			HFerme(&amp;quot;TableNB&amp;quot;)&#13;
		FIN&#13;
		&#13;
		HAnnuleDéclaration(&amp;quot;TableNB&amp;quot;) &#13;
		//VariableRAZ(&amp;quot;TableNB&amp;quot;)&#13;
		SI HDéclareExterne(&amp;quot;interventions_details_nuxi.fic&amp;quot;,&amp;quot;TableNB&amp;quot;,CnxBDDSrc[3]) ALORS&#13;
			&#13;
			POUR TOUT &amp;quot;TableNB&amp;quot; AVEC &amp;quot; Longitude = 0 et Latitude = 0 et Ville &amp;lt;&amp;gt; &amp;apos;&amp;apos; &amp;quot; SUR &amp;quot;IDInterne&amp;quot;&#13;
				sAdresse = Remplace({&amp;quot;TableNB.Adresse1&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; &amp;quot; + Remplace({&amp;quot;TableNB.Adresse2&amp;quot;,indRubrique},&amp;quot;,&amp;quot;,&amp;quot; &amp;quot;) + &amp;quot; , &amp;quot; + {&amp;quot;TableNB.CP&amp;quot;,indRubrique} + &amp;quot; &amp;quot; + {&amp;quot;TableNB.Ville&amp;quot;,indRubrique} &#13;
				SI {&amp;quot;TableNB.Pays&amp;quot;,indRubrique} &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sAdresse = sAdresse + &amp;quot; , &amp;quot; + {&amp;quot;TableNB.Pays&amp;quot;,indRubrique}&#13;
				VariableRAZ(Localisation)&#13;
				(Localisation) = Géocode(sAdresse,Faux)&#13;
				SI Localisation.Latitude &amp;lt;&amp;gt; 0 ET Localisation.Longitude &amp;lt;&amp;gt; 0 ALORS&#13;
					{&amp;quot;TableNB.Latitude&amp;quot;,indRubrique}		= Localisation.Latitude&#13;
					{&amp;quot;TableNB.Longitude&amp;quot;,indRubrique}		= Localisation.Longitude&#13;
					{&amp;quot;TableNB.LngLatPrécision&amp;quot;,indRubrique}	= Localisation.Précision&#13;
					HModifie(&amp;quot;TableNB&amp;quot;)&#13;
				FIN&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
&#13;
Renvoyer(NULL)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GROUPE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456596</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ClassificationGroup.sysCreatedDate AS DateCreation, &#13;
ClassificationGroup.sysModifiedDate AS DateModification, &#13;
ClassificationGroup.Id AS IDInterne, &#13;
ClassificationGroup.Id AS Code, &#13;
ClassificationGroup.Caption AS Libelle, &#13;
&#13;
CASE ClassificationGroup.GroupType &#13;
     WHEN 0 THEN   &amp;apos;GroupeCP&amp;apos; &#13;
     WHEN 1 THEN   &amp;apos;GroupeF&amp;apos; &#13;
     WHEN 2 THEN   &amp;apos;GroupeA&amp;apos; &#13;
ELSE&#13;
     &amp;apos;Groupe&amp;apos; &#13;
END  AS  TypeNomenclature &#13;
&#13;
FROM ClassificationGroup &#13;
WHERE &#13;
ClassificationGroup.GroupType in (0,1,2)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_APPAREILS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250206160026898</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
CustomerProduct.sysCreatedDate AS DateCreation, &#13;
CustomerProduct.sysModifiedDate AS DateModification, &#13;
CustomerProduct.Id AS IDInterne, &#13;
CustomerProduct.Id AS Code, &#13;
CustomerProduct.ItemId AS IDInterne_article, &#13;
CustomerProduct.ItemId AS CodeArticle, &#13;
CustomerProduct.TrackingNumber AS NumSerie, &#13;
&#13;
CustomerProduct.CustomerId AS IDInterne_Tiers, &#13;
CustomerProduct.CustomerId AS CodeTiers, &#13;
CustomerProduct.Caption AS Libelle, &#13;
CustomerProduct.LabourStartDate AS GtieMODébut, &#13;
CustomerProduct.LabourEndDate AS GtieMOFin, &#13;
CustomerProduct.PartsStartDate AS GtiePieceDébut, &#13;
CustomerProduct.PartsEndDate AS GtiePieceFin, &#13;
CustomerProduct.TravelStartDate AS GtieDeplDébut, &#13;
CustomerProduct.TravelEndDate AS GtieDeplFin, &#13;
CustomerProduct.CustomerName AS Nom_Client,&#13;
DeliveryAddress_Address1 AS Adresse1,&#13;
DeliveryAddress_Address2 AS Adresse2,&#13;
DeliveryAddress_ZipCode AS CP,&#13;
DeliveryAddress_City AS Ville,&#13;
&#13;
&#13;
CustomerProduct.DescriptionClear AS Description &#13;
%5&#13;
&#13;
FROM CustomerProduct , Customer&#13;
WHERE &#13;
CustomerProduct.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
CustomerProduct.ActiveState = 0 AND Customer.Id  = CustomerProduct.CustomerId AND Customer.ActiveState = 0 and  ((FamilyId NOT IN (%7) or FamilyId is Null) and (SubFamilyId NOT IN (%7) or SubFamilyId is Null))&#13;
&#13;
&#13;
/*LIMITE LES APPAREILS AUX CLIENTS QUI ONT DES INTER ENTRE HIER ET + 10J*/&#13;
/*&#13;
AND CustomerProduct.CustomerId IN (&#13;
SELECT &#13;
ScheduleEvent.CustomerId&#13;
FROM ScheduleEvent&#13;
WHERE &#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType) = &amp;apos;1&amp;apos;&#13;
AND ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4&#13;
AND DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;gt; -1 and  DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;lt; 10 )&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160155996</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ScheduleEvent.Id IDInterne, &#13;
ScheduleEvent.Id AS IDInterne_BI, &#13;
ScheduleEvent.ScheduleEventNumber AS Code, &#13;
ScheduleEvent.ScheduleEventNumber AS Code_BI, &#13;
ScheduleEvent.StartDateTime AS DateDoc, &#13;
&#13;
&#13;
&amp;apos;BI&amp;apos; AS TypeDocument, &#13;
ScheduleEvent.NotesClear AS Note, &#13;
ScheduleEvent.StartDateTime AS DebutLe, &#13;
ScheduleEvent.EndDateTime FinLe, &#13;
ScheduleEvent.Caption AS Libelle, &#13;
(SELECT Caption FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType ) AS Categorie_Libelle, &#13;
ScheduleEvent.EventType AS IDInterne_Categorie, &#13;
&#13;
ScheduleEvent.EventState AS IDInterne_Etat,&#13;
CASE ScheduleEvent.EventState&#13;
     WHEN 0 THEN &amp;apos;A faire&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;En cours&amp;apos;&#13;
     WHEN 2  THEN &amp;apos;Terminé&amp;apos;&#13;
     WHEN 3  THEN &amp;apos;Annulé&amp;apos;&#13;
END  AS Etat_Libelle, &#13;
&#13;
&#13;
ScheduleEvent.ColleagueId, &#13;
ScheduleEvent.Contact_Name  AS Interlocuteur, &#13;
&#13;
&#13;
&#13;
CASE ScheduleEvent.EventState&#13;
        WHEN 0 THEN ScheduleEvent.WorkingDuration_DurationInHours &#13;
       WHEN 1 THEN ScheduleEvent.WorkingDuration_DurationInHours &#13;
        WHEN 2  THEN ScheduleEvent.Quantity&#13;
&#13;
       ELSE &#13;
       ScheduleEvent.ExpectedDuration_DurationInHours&#13;
END AS DuréeInterv,&#13;
&#13;
&#13;
ScheduleEvent.Address_Address1 AS Adresse1, &#13;
ScheduleEvent.Address_Address2 AS Adresse2, &#13;
ScheduleEvent.Address_ZipCode AS CP, &#13;
ScheduleEvent.Address_City AS Ville, &#13;
ScheduleEvent.Address_CountryIsoCode AS IDInterne_Pays, &#13;
&#13;
Customer.MainInvoicingContact_Name AS Facturation_Nom, &#13;
Customer.MainInvoicingAddress_Address1  AS Facturation_Adresse1, &#13;
Customer.MainInvoicingAddress_Address2   AS Facturation_Adresse2, &#13;
Customer.MainInvoicingAddress_ZipCode AS Facturation_CP, &#13;
Customer.MainInvoicingAddress_City   AS Facturation_Ville, &#13;
Customer.MainInvoicingContact_Phone AS facturation_tel, &#13;
Customer.MainInvoicingContact_Email  AS Facturation_Mail, &#13;
Customer.MainInvoicingContact_Name  AS Facturation_Interloc, &#13;
Customer.MainInvoicingContact_CellPhone  AS Facturation_GSM, &#13;
Customer.MainInvoicingAddress_CountryIsoCode  AS Facturation_IDInternePays, &#13;
Customer.Name AS Nom, &#13;
&#13;
(SELECT Country.Caption FROM Country WHERE Country.IsoCode = (SELECT Customer.MainInvoicingAddress_CountryIsoCode   FROM Customer WHERE Customer.Id =ScheduleEvent.CustomerId)  ) AS Facturation_Pays, &#13;
&#13;
&#13;
&#13;
ScheduleEvent.Address_Longitude AS Longitude, &#13;
ScheduleEvent.Address_Latitude AS Latitude, &#13;
&#13;
ScheduleEvent.Contact_Phone AS Tel, &#13;
ScheduleEvent.Contact_CellPhone GSM, &#13;
ScheduleEvent.Contact_Email AS Mail, &#13;
ScheduleEvent.CreatorColleagueId AS iDInterne_Opérateur, &#13;
ScheduleEvent.CustomerId AS IDInterne_Tiers, &#13;
ScheduleEvent.CustomerId AS Code_Tiers, &#13;
&#13;
ScheduleEvent.Maintenance_TravelExpenseId AS IDInterne_Zone, &#13;
(SELECT TravelExpense.AmountVatExcluded FROM TravelExpense WHERE TravelExpense.Id = ScheduleEvent.Maintenance_TravelExpenseId ) AS MontantFrais, &#13;
(SELECT TravelExpense.VatId  FROM TravelExpense WHERE TravelExpense.Id = ScheduleEvent.Maintenance_TravelExpenseId ) AS IDInterneTVA_Frais, &#13;
(SELECT TravelExpense.AmountVatIncluded   FROM TravelExpense WHERE TravelExpense.Id = ScheduleEvent.Maintenance_TravelExpenseId ) AS MontantFraisTTC, &#13;
(SELECT Vat.Rate FROM Vat WHERE Vat.Id = (SELECT TravelExpense.VatId  FROM TravelExpense WHERE TravelExpense.Id = ScheduleEvent.Maintenance_TravelExpenseId ) ) AS TauxTVAFrais, &#13;
&#13;
ScheduleEvent.Maintenance_TravelDuration AS DuréeDeplacement, &#13;
ScheduleEvent.Maintenance_InterventionDescriptionClear AS Symptome, &#13;
ScheduleEvent.Maintenance_InterventionReportClear AS Description, &#13;
ScheduleEvent.Maintenance_ContractId AS Code_Contrat, &#13;
ScheduleEvent.Maintenance_ContractId AS iDInterne_Contrat, &#13;
ScheduleEvent.Maintenance_TravelExpenseId AS IDInterne_Déplacement, &#13;
&#13;
ScheduleEvent.Maintenance_IncidentId AS IDInterne_Incident, &#13;
ScheduleEvent.Maintenance_IncidentId AS Code_Incident, &#13;
ScheduleEvent.DealId AS IDInterne_Affaire, &#13;
ScheduleEvent.DealId AS Code_Affaire, &#13;
&#13;
ScheduleEvent.SaleDocumentId AS IDInterne_DocumentVte&#13;
&#13;
 %5&#13;
&#13;
&#13;
FROM ScheduleEvent , Customer&#13;
&#13;
WHERE &#13;
ScheduleEvent.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType) = &amp;apos;1&amp;apos;&#13;
AND &#13;
Customer.Id =ScheduleEvent.CustomerId &#13;
AND ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4&#13;
&#13;
AND DATEDIFF(day,ScheduleEvent.EndDateTime , GetDate()) &amp;lt;= %2 &#13;
/*&#13;
/*LIMITE LES INTER AUX CLIENTS QUI ONT DES INTER ENTRE HIER ET + 10J*/&#13;
AND DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;gt; -1 and  DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;lt; 10&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_A</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160220605</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ScheduleEventCustomerProduct.Id AS Code, &#13;
ScheduleEventCustomerProduct.Id AS IDInterne, &#13;
ScheduleEventCustomerProduct.ScheduleEventId  AS idinterne_Intervention, &#13;
ScheduleEventCustomerProduct.CustomerProductId AS Code_Ressource, &#13;
ScheduleEventCustomerProduct.CustomerProductId AS IDInterne_Ressource, &#13;
ScheduleEventCustomerProduct.TrackingNumber AS NumSerie, &#13;
ScheduleEventCustomerProduct.PartsCoverType AS PriseEnChargePiece, &#13;
ScheduleEventCustomerProduct.LabourCoverType AS PriseEnChargeMO, &#13;
ScheduleEventCustomerProduct.TravelCoverType AS PriseEnchargeDepl,&#13;
&amp;apos;A&amp;apos; AS TypeLigne ,&#13;
(SELECT CustomerProduct.Caption FROM CustomerProduct WHERE CustomerProduct.Id =ScheduleEventCustomerProduct.CustomerProductId ) AS Designation &#13;
&#13;
&#13;
&#13;
FROM  ScheduleEventCustomerProduct   &#13;
LEFT OUTER JOIN ScheduleEvent&#13;
ON ScheduleEvent.Id  = ScheduleEventCustomerProduct.ScheduleEventId &#13;
&#13;
WHERE&#13;
ScheduleEventCustomerProduct.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType) = &amp;apos;1&amp;apos; &#13;
AND ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4&#13;
&#13;
AND DATEDIFF(day,ScheduleEvent.EndDateTime , GetDate()) &amp;lt;= %2 &#13;
/*&#13;
/*LIMITE LES APPAREILS AUX CLIENTS QUI ONT DES INTER ENTRE HIER ET + 10J*/&#13;
AND DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;gt; -1 and  DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;lt; 10&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_C</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20241125073456360</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données, NbjHisto est un entier = 0)&#13;
&#13;
&#13;
//24/04/2015 06:39&#13;
&#13;
sMaReq est une chaîne&#13;
sdReqTemp est une Source de Données&#13;
	//Synchro OK&#13;
	&#13;
	&#13;
	&#13;
	sMaReq = [&#13;
		SELECT &#13;
		ScheduleEvent.Id AS IDInterne, &#13;
		ScheduleEvent.Id AS Code, &#13;
		ScheduleEvent.Id AS idinterne_Intervention, &#13;
		&#13;
		ScheduleEvent.ItemId AS Code_Ressource, &#13;
		ScheduleEvent.ItemId AS IDInterne_Ressource, &#13;
		&#13;
		(SELECT Item.Caption FROM Item WHERE Item.Id = ScheduleEvent.ItemId ) AS Designation, &#13;
		ScheduleEvent.Quantity AS Quantité, &#13;
		ScheduleEvent.SalePriceVatExcluded AS PrixVUHT, &#13;
		ScheduleEvent.SalePriceVatExcluded AS MontantNetHT ,&#13;
		ScheduleEvent.SalePriceVatExcluded * (1 + ((SELECT Vat.Rate FROM Vat WHERE Vat.Id  =  (SELECT Item.VatId  FROM Item WHERE Item.Id = ScheduleEvent.ItemId )) / 100)) AS MontantNetTTC, &#13;
		&#13;
		(SELECT Item.CostPrice  FROM Item WHERE Item.Id = ScheduleEvent.ItemId ) AS PRixRUHT, &#13;
		(SELECT Vat.Rate FROM Vat WHERE Vat.Id  =  (SELECT Item.VatId  FROM Item WHERE Item.Id = ScheduleEvent.ItemId )) AS TauxTVA, &#13;
		(SELECT Item.VatId  FROM Item WHERE Item.Id = ScheduleEvent.ItemId ) AS IDInterne_TVA, &#13;
		&#13;
		&#13;
		ScheduleEvent.Maintenance_IncidentId AS IDInterne_Incident, &#13;
		ScheduleEvent.Maintenance_IncidentId AS Code_Incident, &#13;
		ScheduleEvent.DealId AS IDInterne_Affaire, &#13;
		ScheduleEvent.DealId AS Code_Affaire, &#13;
		ScheduleEvent.SaleDocumentId AS IDInterne_DocumentVte, &#13;
		&#13;
		&amp;apos;F&amp;apos; AS Situation, &#13;
		&amp;apos;C&amp;apos; AS TypeLigne &#13;
		&#13;
		FROM ScheduleEvent &#13;
		WHERE &#13;
ScheduleEvent.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
(SELECT ScheduleEventType.MaintenanceDisplay  FROM ScheduleEventType WHERE  Id = ScheduleEvent.EventType) = &amp;apos;1&amp;apos;&#13;
		AND &#13;
		DATEDIFF(day,ScheduleEvent.EndDateTime , GetDate()) &amp;lt;= %2 &#13;
		&#13;
	]&#13;
	&#13;
	sMaReq = ChaîneConstruit(sMaReq,&amp;quot;&amp;quot;,NbjHisto)&#13;
	&#13;
	&#13;
	SI HExécuteRequêteSQL(sdReqTemp,CnxM,hRequêteSansCorrection,sMaReq) ALORS&#13;
 		POUR TOUT sdReqTemp &#13;
			SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableA2, &amp;quot;IDInterne&amp;quot;,sdReqTemp.IDInterne,hIdentique ) ALORS&#13;
				HRAZ(TableA2)&#13;
			FIN&#13;
 			HCopieEnreg(TableA2,sdReqTemp)&#13;
 			SI TableA2..NouvelEnregistrement ALORS&#13;
				HAjoute(TableA2)&#13;
			SINON&#13;
				HModifie(TableA2)&#13;
			FIN&#13;
 			NbEnregSynchronisé ++&#13;
 		FIN&#13;
 	FIN&#13;
 	&#13;
 	&#13;
 	&#13;
	&#13;
	sMaReq = [&#13;
		SELECT &#13;
		StockDocumentLine.Id AS IDInterne, &#13;
		StockDocumentLine.Id AS Code, &#13;
		&amp;apos;C&amp;apos; AS TypeLigne, &#13;
		StockDocument.ScheduleEventId AS idinterne_Intervention, &#13;
		StockDocumentLine.DescriptionClear AS Designation, &#13;
		StockDocumentLine.ItemId AS Code_Ressource, &#13;
		StockDocumentLine.ItemId IDInterne_Ressource, &#13;
		StockDocumentLine.Id AS IDInterne_StockBS, &#13;
		StockDocumentLine.Quantity AS Quantité&#13;
		&#13;
		FROM StockDocument	INNER JOIN StockDocumentLine&#13;
		ON StockDocument.Id   = StockDocumentLine.DocumentId &#13;
		WHERE&#13;
		StockDocumentLine.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
		StockDocument.ScheduleEventId is not null AND&#13;
		DATEDIFF(day,StockDocument.DocumentDate  , GetDate()) &amp;lt;= %2&#13;
		&#13;
	]&#13;
	sMaReq = ChaîneConstruit(sMaReq,&amp;quot;&amp;quot;,NbjHisto)&#13;
	&#13;
	&#13;
	SI HExécuteRequêteSQL(sdReqTemp,CnxM,hRequêteSansCorrection,sMaReq) ALORS&#13;
		POUR TOUT sdReqTemp &#13;
			SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableA2, &amp;quot;IDInterne&amp;quot;,sdReqTemp.IDInterne,hIdentique ) ALORS&#13;
				HRAZ(TableA2)&#13;
			FIN&#13;
			HCopieEnreg(TableA2,sdReqTemp)&#13;
			&#13;
			SI TableA2..NouvelEnregistrement ALORS&#13;
				HAjoute(TableA2)&#13;
			SINON&#13;
				HModifie(TableA2)&#13;
			FIN&#13;
			NbEnregSynchronisé ++&#13;
		FIN&#13;
	FIN&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_R</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160447789</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
&amp;apos;R&amp;apos; AS TypeLigne, &#13;
&amp;apos;M&amp;apos; AS SousTypeLigne, &#13;
ScheduleEvent.Id AS IDInterne,&#13;
ScheduleEvent.ScheduleEventNumber AS Code, &#13;
ScheduleEvent.LineOrder AS NumLigne, &#13;
ScheduleEvent.ParentEventId AS idinterne_Intervention, &#13;
ScheduleEvent.EquipmentId AS IDInterne_Ressource ,&#13;
ScheduleEvent.EquipmentId AS Code_Ressource, &#13;
ScheduleEvent.Caption AS Designation, &#13;
CASE ScheduleEvent.EventState&#13;
        WHEN 0 THEN ScheduleEvent.ExpectedDuration_DurationInHours &#13;
       WHEN 1 THEN ScheduleEvent.ExpectedDuration_DurationInHours &#13;
        WHEN 2  THEN ScheduleEvent.Quantity&#13;
&#13;
       ELSE &#13;
       ScheduleEvent.ExpectedDuration_DurationInHours&#13;
END AS Quantité, &#13;
&#13;
CASE ScheduleEvent.EventState&#13;
        WHEN 0 THEN ScheduleEvent.ExpectedDuration_DurationInHours * ScheduleEvent.SalePriceVatExcluded&#13;
       WHEN 1 THEN ScheduleEvent.ExpectedDuration_DurationInHours  * ScheduleEvent.SalePriceVatExcluded&#13;
        WHEN 2  THEN ScheduleEvent.Quantity * ScheduleEvent.SalePriceVatExcluded&#13;
&#13;
       ELSE &#13;
       ScheduleEvent.ExpectedDuration_DurationInHours  * ScheduleEvent.SalePriceVatExcluded&#13;
END AS MontantNetHT,&#13;
&#13;
ScheduleEvent.SalePriceVatExcluded AS PrixVUHT, &#13;
&#13;
&#13;
CASE ScheduleEvent.EquipmentId &#13;
     WHEN &amp;apos;&amp;apos; THEN &amp;apos;0&amp;apos;&#13;
ELSE&#13;
     (SELECT TOP 1 Vat.Rate FROM Vat WHERE  Vat.Id = (SELECT TOP 1 Item.VatId FROM Item Where Item.ID =  (SELECT top 1 Equipment.ReferenceItemId FROM Equipment WHERE Equipment.Id  = ScheduleEvent.EquipmentId)) ) &#13;
END AS TauxTVA,&#13;
&#13;
CASE ScheduleEvent.EquipmentId &#13;
     WHEN &amp;apos;&amp;apos; THEN &amp;apos;&amp;apos;&#13;
ELSE&#13;
     (SELECT TOP 1  Item.VatId FROM Item Where Item.ID =  (SELECT top 1 Equipment.ReferenceItemId FROM Equipment WHERE Equipment.Id  = ScheduleEvent.EquipmentId))&#13;
END AS IDInterne_TVA, &#13;
&#13;
CASE ScheduleEvent.EquipmentId &#13;
     WHEN &amp;apos;&amp;apos; THEN ScheduleEvent.NetAmountVatExcluded&#13;
ELSE&#13;
   (ScheduleEvent.NetAmountVatExcluded * (1 + ((SELECT TOP 1 Vat.Rate FROM Vat WHERE  Vat.Id = (SELECT TOP 1 Item.VatId FROM Item Where Item.ID = (SELECT top 1 Equipment.ReferenceItemId FROM Equipment WHERE Equipment.Id  = ScheduleEvent.EquipmentId)) ) /100)))&#13;
END AS MontantNetTTC, &#13;
&#13;
&#13;
&#13;
&#13;
CASE ScheduleEvent.InvoiceEquipments &#13;
     WHEN 0 THEN &amp;apos;1&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;0&amp;apos;&#13;
END  AS NePasFacturer ,&#13;
ScheduleEvent.Maintenance_IncidentId ,&#13;
ScheduleEvent.Maintenance_IncidentId AS Code_Incident, &#13;
ScheduleEvent.DealId AS IDInterne_Affaire, &#13;
ScheduleEvent.DealId AS Code_Affaire, &#13;
ScheduleEvent.SaleDocumentId AS IDInterne_DocumentVte &#13;
&#13;
&#13;
&#13;
FROM ScheduleEvent &#13;
&#13;
&#13;
WHERE &#13;
ScheduleEvent.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
LEN(ScheduleEvent.ParentEventId) &amp;gt; 0 And &#13;
ScheduleEvent.EquipmentId &amp;lt;&amp;gt; &amp;apos;&amp;apos; And &#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = (select xx.EventType from ScheduleEvent as xx where xx.Id = ScheduleEvent.ParentEventId ) ) = &amp;apos;1&amp;apos; &#13;
AND ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4&#13;
AND DATEDIFF(day,ScheduleEvent.EndDateTime , GetDate()) &amp;lt;= %2 &#13;
/*&#13;
/*LIMITE LES ressources  AUX CLIENTS QUI ONT DES INTER ENTRE HIER ET + 10J*/&#13;
AND DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;gt; -1 and  DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;lt; 10&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_RH</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160517474</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
&amp;apos;R&amp;apos; AS TypeLigne, &#13;
&amp;apos;H&amp;apos; AS SousTypeLigne, &#13;
ScheduleEvent.Id AS IDInterne,&#13;
ScheduleEvent.ScheduleEventNumber AS Code, &#13;
ScheduleEvent.LineOrder AS NumLigne, &#13;
ScheduleEvent.ParentEventId AS idinterne_Intervention, &#13;
ScheduleEvent.ColleagueId  AS IDInterne_Ressource ,&#13;
ScheduleEvent.ColleagueId  AS Code_Ressource, &#13;
ScheduleEvent.Caption AS Designation, &#13;
ScheduleShowTimeLine,&#13;
CASE ScheduleEvent.EventState&#13;
        WHEN 0 THEN ScheduleEvent.ExpectedDuration_DurationInHours &#13;
       WHEN 1 THEN ScheduleEvent.ExpectedDuration_DurationInHours &#13;
        WHEN 2  THEN ScheduleEvent.Quantity&#13;
&#13;
       ELSE &#13;
       ScheduleEvent.ExpectedDuration_DurationInHours&#13;
END AS Quantité, &#13;
&#13;
&#13;
&#13;
ScheduleEvent.SalePriceVatExcluded AS PrixVUHT, &#13;
ScheduleEvent.NetAmountVatExcluded AS MontantNetHT ,&#13;
ScheduleEvent.NetAmountVatExcluded AS MontantNetTTC, &#13;
&amp;apos;0&amp;apos; AS TauxTVA,&#13;
&amp;apos;&amp;apos; AS IDInterne_TVA, &#13;
&#13;
&#13;
CASE ScheduleEvent.InvoiceInterveners &#13;
     WHEN 0 THEN &amp;apos;1&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;0&amp;apos;&#13;
END  AS NePasFacturer ,&#13;
ScheduleEvent.Maintenance_IncidentId ,&#13;
ScheduleEvent.Maintenance_IncidentId AS Code_Incident, &#13;
ScheduleEvent.DealId AS IDInterne_Affaire, &#13;
ScheduleEvent.DealId AS Code_Affaire, &#13;
ScheduleEvent.SaleDocumentId AS IDInterne_DocumentVte ,&#13;
ScheduleEvent.StartDateTime AS DateHeureDébut, &#13;
ScheduleEvent.EndDateTime AS DateHeureFin&#13;
&#13;
&#13;
&#13;
&#13;
FROM ScheduleEvent &#13;
&#13;
WHERE &#13;
ScheduleEvent.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
(SELECT ScheduleEventType.DisplayType   FROM ScheduleEventType WHERE  Id = (select xx.EventType from ScheduleEvent as xx where xx.Id = ScheduleEvent.ParentEventId ) ) = &amp;apos;1&amp;apos; AND&#13;
LEN(ScheduleEvent.ParentEventId) &amp;gt; 0 And &#13;
ScheduleEvent.ColleagueId   &amp;lt;&amp;gt; &amp;apos;&amp;apos; &#13;
AND ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4&#13;
&#13;
AND DATEDIFF(day,ScheduleEvent.EndDateTime , GetDate()) &amp;lt;= %2 &#13;
/*&#13;
/*LIMITE LES CLIENTS AUX CLIENTS QUI ONT DES INTER ENTRE HIER ET + 10J*/&#13;
AND DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;gt; -1 and  DATEDIFF(day,GetDate(),ScheduleEvent.StartDateTime  ) &amp;lt; 10&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_CATEGORIE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456604</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ScheduleEventType.Id IDInterne, &#13;
ScheduleEventType.Id Code, &#13;
ScheduleEventType.Caption AS Libelle, &#13;
 &amp;apos;CatInterv&amp;apos; AS TypeNomenclature &#13;
&#13;
FROM ScheduleEventType &#13;
WHERE&#13;
ScheduleEventType.DisplayType = &amp;apos;1&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_ETAT_BI</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714190044002</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;0&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;0&amp;quot;&#13;
TableA2.Libelle = &amp;quot;A faire&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;1&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;1&amp;quot;&#13;
TableA2.Libelle = &amp;quot;En cours&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;2&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;2&amp;quot;&#13;
TableA2.Libelle = &amp;quot;Terminé&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;3&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;3&amp;quot;&#13;
TableA2.Libelle = &amp;quot;Annulé&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_FRAISDEPL</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456614</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
TravelExpense.Id AS IDInterne, &#13;
TravelExpense.Id AS Code, &#13;
TravelExpense.Caption AS Libelle, &#13;
&amp;apos;FraisDepl&amp;apos; AS  TypeNomenclature,&#13;
TravelExpense.AmountVatExcluded AS PrixVente, &#13;
TravelExpense.VatId IDInterne_TVA , &#13;
TravelExpense.AmountVatIncluded , &#13;
TravelExpense.ReferenceItemId &#13;
&#13;
FROM TravelExpense</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_RESSOURCE_H</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456615</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Colleague.Id  AS IDInterne, &#13;
Colleague.Id AS Code, &#13;
ISNULL(Colleague.Contact_Name , &amp;apos;&amp;apos;) + &amp;apos; &amp;apos; + ISNULL(Colleague.Contact_FirstName, &amp;apos;&amp;apos;)  AS NomLibelle,  &#13;
&amp;apos;H&amp;apos; AS TypeRessource ,&#13;
Colleague.SalePriceVatExcluded AS PrixVente, &#13;
Colleague.HourlyCostPrice AS PrixRevient, &#13;
/*&#13;
(SELECT Vat.Rate FROM Vat WHERE Vat.Id = (SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.VatInformations.DefaultVatId&amp;apos;)) AS TauxTVA, &#13;
(SELECT Vat.ID FROM Vat WHERE Vat.Id = (SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.VatInformations.DefaultVatId&amp;apos;)) AS IDInterne_TVA, &#13;
*/&#13;
Colleague.Contact_ColleagueFunction AS Fonction_Qualif&#13;
&#13;
&#13;
FROM Colleague &#13;
WHERE &#13;
Colleague.ActiveState = 0 And Colleague.IsSalesperson = 0</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_RESSOURCE_M</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456615</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Equipment.Id AS Code, &#13;
Equipment.Id AS IDInterne, &#13;
Equipment.Caption AS NomLibelle, &#13;
&amp;apos;M&amp;apos; AS TypeRessource, &#13;
Equipment.SalePriceVatExcluded AS PrixVente, &#13;
Equipment.ReferenceItemId AS IDInterne_article, &#13;
Equipment.ReferenceItemId AS Code_Article, &#13;
&#13;
(SELECT Item.VatId FROM Item WHERE Item.Id = Equipment.ReferenceItemId  ) AS IDInterne_TVA, &#13;
(SELECT Item.CostPrice FROM Item WHERE Item.Id =Equipment.ReferenceItemId) AS  PrixRevient, &#13;
(SELECT Item.PurchasePrice FROM Item WHERE Item.Id = Equipment.ReferenceItemId) AS PrixAchat, &#13;
(SELECT Vat.Rate FROM Vat WHERE Vat.Id =(SELECT Item.VatId FROM Item WHERE Item.Id = Equipment.ReferenceItemId  ) ) AS TauxTVA  &#13;
&#13;
FROM Equipment</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_ZONEDEPL</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456618</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
TravelExpense.Id AS  IDInterne, &#13;
TravelExpense.Id AS Code, &#13;
TravelExpense.Caption AS Libelle, &#13;
TravelExpense.AmountVatExcluded AS PrixVente, &#13;
TravelExpense.VatId AS IDInterne_TVA, &#13;
(SELECT Vat.Rate FROM Vat WHERE Vat.Id = TravelExpense.VatId) AS TauxTVA, &#13;
&#13;
&amp;apos;ZoneInterv&amp;apos; AS TypeNomenclature &#13;
&#13;
FROM TravelExpense</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DEPOT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456649</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Storehouse.sysCreatedDate AS DateCreation , &#13;
Storehouse.sysModifiedDate AS DateModification , &#13;
Storehouse.Id AS IDInterne, &#13;
Storehouse.Id AS Code , &#13;
Storehouse.Caption AS Libelle, &#13;
&amp;apos;Depot&amp;apos; AS TypeNomenclature&#13;
 &#13;
FROM Storehouse</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>LISTETARIF</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456622</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PriceList.sysCreatedDate AS DateCreation, &#13;
PriceList.sysModifiedDate AS DateModification, &#13;
PriceList.Id AS IDInterne, &#13;
PriceList.Id AS Code, &#13;
PriceList.Description AS Libelle, &#13;
&amp;apos;TypeTarif&amp;apos; AS TypeNomenclature &#13;
FROM PriceList &#13;
WHERE&#13;
PriceList.EndValidityDate &amp;gt;= GETDATE() or PriceList.EndValidityDate IS NULL</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>MODEREGLEMENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456635</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SettlementMode.sysCreatedDate AS DateCreation, &#13;
SettlementMode.sysModifiedDate AS DateModification , &#13;
SettlementMode.Id AS IDInterne , &#13;
SettlementMode.Id AS Code , &#13;
SettlementMode.Caption AS Libelle , &#13;
&amp;apos;ModeReglement&amp;apos; As TypeNomenclature&#13;
&#13;
FROM SettlementMode</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>MOYENPAIEMENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456635</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PaymentType.Id AS IDInterne, &#13;
PaymentType.Id AS Code, &#13;
PaymentType.Caption AS Libelle, &#13;
&amp;apos;MoyenPaiement&amp;apos; AS TypeNomenclature &#13;
&#13;
FROM PaymentType</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>PAYS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456637</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Country.sysCreatedDate AS DateCreation , &#13;
Country.sysModifiedDate AS DateModification , &#13;
Country.IsoCode AS IDInterne , &#13;
Country.IsoCode AS Code , &#13;
Country.Caption AS Libelle ,&#13;
&amp;apos;Pays&amp;apos; AS TypeNomenclature &#13;
&#13;
FROM Country &#13;
WHERE Country.Inactive = 0</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>PHOTO_ARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714185944574</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
//Utilisé pour exclure les photos de la copie d&amp;apos;enregistrement&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>-TIERS-PROSPECT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250205164520349</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Customer.sysCreatedDate AS DateCreation , &#13;
Customer.sysModifiedDate AS DateModification , &#13;
Customer.Id AS IDInterne , &#13;
Customer.Id AS Code , &#13;
&amp;apos;P&amp;apos; AS TypeTiers ,&#13;
Customer.Civility AS Civilité , &#13;
Customer.Name AS Nom, &#13;
Customer.MainDeliveryAddress_Address1 AS Livraison_Adresse1 , &#13;
Customer.MainDeliveryAddress_Address2 AS Livraison_Adresse2 , &#13;
Customer.MainDeliveryAddress_ZipCode AS Livraison_CP , &#13;
Customer.MainDeliveryAddress_City AS Livraison_Ville , &#13;
Customer.MainDeliveryAddress_CountryIsoCode AS Livraison_IDInternePays , &#13;
Customer.MainDeliveryAddress_Longitude AS Livraison_Longitude , &#13;
Customer.MainDeliveryAddress_Latitude AS Livraison_Latitude , &#13;
Customer.MainDeliveryContact_Civility AS Livraison_Contact_Civilite , &#13;
Customer.MainDeliveryContact_Name AS Livraison_Contact_Nom , &#13;
Customer.MainDeliveryContact_FirstName AS Livraison_contact_Prenom , &#13;
Customer.MainDeliveryContact_Phone AS Livraison_Contact_Tel , &#13;
Customer.MainDeliveryContact_CellPhone AS Livraison_Contact_GSM , &#13;
Customer.MainDeliveryContact_Fax AS Livraison_Contact_Fax , &#13;
Customer.MainDeliveryContact_Email AS Livraison_Contact_Mail , &#13;
Customer.MainDeliveryContact_Function AS Livraison_Contact_Fonction , &#13;
Customer.MainDeliveryContact_Department AS Livraison_Contact_Service , &#13;
Customer.MainInvoicingAddress_Address1 AS Facturation_Adresse1 , &#13;
Customer.MainInvoicingAddress_Address2 AS Facturation_Adresse2 , &#13;
Customer.MainInvoicingAddress_ZipCode AS Facturation_CP , &#13;
Customer.MainInvoicingAddress_City AS Facturation_Ville , &#13;
Customer.MainInvoicingAddress_CountryIsoCode AS Facturation_IDInternePays , &#13;
Customer.MainInvoicingAddress_Longitude AS Facturation_Longitude , &#13;
Customer.MainInvoicingAddress_Latitude AS Facturation_Latitude , &#13;
Customer.MainInvoicingContact_Civility AS Facturation_Contact_Civilite , &#13;
Customer.MainInvoicingContact_Name AS Facturation_Contact_Nom , &#13;
Customer.MainInvoicingContact_FirstName AS Facturation_Contact_Prenom , &#13;
Customer.MainInvoicingContact_Function AS Facturation_Contact_Fonction , &#13;
Customer.MainInvoicingContact_Phone AS Facturation_Contact_Tel , &#13;
Customer.MainInvoicingContact_CellPhone AS Facturation_Contact_GSM , &#13;
Customer.MainInvoicingContact_Fax AS Facturation_Contact_Fax , &#13;
Customer.MainInvoicingContact_Email AS Facturation_Contact_Mail , &#13;
Customer.MainInvoicingContact_Department AS  Facturation_Contact_Service , &#13;
Customer.MainDeliveryAddress_Description AS Livraison_Info, &#13;
Customer.MainInvoicingAddress_Description AS Facturation_Info, &#13;
Customer.FamilyId AS IDInterneFamille , &#13;
Customer.SubFamilyId AS IDInterneSousFamille , &#13;
Customer.DiscountRate AS PrcRemise , &#13;
Customer.NotesClear AS Note ,&#13;
Customer.AllowedAmount AS Encours_Autorise , &#13;
Customer.CurrentAmount AS Solde_Actuel , &#13;
Customer.FinancialDiscountRate AS PrcEscompte , &#13;
Customer.ColleagueId AS IDInterneCollaborateur , &#13;
Customer.SettlementModeId AS IDInterneModeReglement, &#13;
Customer.MainInvoicingAddress_WebSite AS Facturation_Contact_Web, &#13;
Customer.MainDeliveryAddress_WebSite AS Livraison_Contact_Web ,&#13;
Customer.MainInvoicingAddress_ThirdName AS Facturation_Nom, &#13;
Customer.Group1 AS IDInterne_Groupe1, &#13;
Customer.Group2 AS IDInterne_Groupe2, &#13;
Customer.Siren + Customer.Nic AS Siret,&#13;
Customer.MainDeliveryAddress_ThirdName AS Livraison_Nom &#13;
%5 &#13;
FROM Customer &#13;
WHERE &#13;
Customer.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Customer.Type = 0 and Customer.ActiveState = 0 and  ((FamilyId NOT IN (%7) or FamilyId is Null) and (SubFamilyId NOT IN (%7) or SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ROLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714185456114</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;&amp;quot;&#13;
TableA2.Code = &amp;quot;&amp;quot;&#13;
TableA2.Libelle = &amp;quot;&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;Role_Contact&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;F&amp;quot;&#13;
TableA2.Code = &amp;quot;F&amp;quot;&#13;
TableA2.Libelle = &amp;quot;Contact Facturation&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;Role_Contact&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;L&amp;quot;&#13;
TableA2.Code = &amp;quot;L&amp;quot;&#13;
TableA2.Libelle = &amp;quot;Contact Livraison&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;Role_Contact&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTRAT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160536438</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
MaintenanceContract.sysCreatedDate AS DateCreation, &#13;
MaintenanceContract.sysModifiedDate AS DateModification, &#13;
MaintenanceContract.Id AS IDInterne, &#13;
MaintenanceContract.Id AS Code, &#13;
&#13;
Customer.Name AS NomTiers, &#13;
Customer.Name  AS Nom, &#13;
&#13;
Customer.MainDeliveryAddress_Address1  AS Adresse1, &#13;
Customer.MainDeliveryAddress_Address2 AS Adresse2, &#13;
Customer.MainDeliveryAddress_ZipCode AS CP, &#13;
Customer.MainDeliveryAddress_City AS Ville, &#13;
Customer.MainDeliveryAddress_CountryIsoCode  AS IDInterne_Pays, &#13;
Customer.MainDeliveryContact_Phone AS Tel, &#13;
Customer.MainDeliveryContact_CellPhone   AS GSM, &#13;
Customer.MainDeliveryContact_Email  AS Mail, &#13;
(SELECT Country.Caption FROM Country WHERE Country.IsoCode = Customer.MainDeliveryAddress_CountryIsoCode  ) AS Pays, &#13;
MaintenanceContract.NotesClear AS Note, &#13;
MaintenanceContract.Caption AS Libelle, &#13;
&#13;
&#13;
IIF(MaintenanceContract.PartsDuration &amp;lt;&amp;gt; 0, MaintenanceContract.StartDate ,&amp;apos;&amp;apos;) AS GtiePieceDébut, &#13;
IIF(MaintenanceContract.LabourDuration &amp;lt;&amp;gt; 0, MaintenanceContract.StartDate ,&amp;apos;&amp;apos;) AS GtieMODébut, &#13;
IIF(MaintenanceContract.TravelDuration &amp;lt;&amp;gt; 0, MaintenanceContract.StartDate ,&amp;apos;&amp;apos;) AS GtieDeplDébut, &#13;
&#13;
IIF(MaintenanceContract.PartsDuration &amp;lt;&amp;gt; 0, DATEADD(month,MaintenanceContract.PartsDuration,MaintenanceContract.StartDate ),&amp;apos;&amp;apos;) AS GtiePieceFin,   &#13;
IIF(MaintenanceContract.LabourDuration &amp;lt;&amp;gt; 0, DATEADD(month,MaintenanceContract.LabourDuration ,MaintenanceContract.StartDate ),&amp;apos;&amp;apos;) AS GtieMOFin, &#13;
IIF(MaintenanceContract.TravelDuration &amp;lt;&amp;gt; 0, DATEADD(month,MaintenanceContract.TravelDuration ,MaintenanceContract.StartDate ) ,&amp;apos;&amp;apos;) AS GtieDeplFin, &#13;
&#13;
MaintenanceContract.DescriptionClear AS Description, &#13;
MaintenanceContract.CustomerId AS Code_Tiers, &#13;
MaintenanceContract.CustomerId AS IDInterne_Tiers, &#13;
MaintenanceContract.StartDate AS DateDébut, &#13;
MaintenanceContract.EndDate AS DateFin, &#13;
MaintenanceContract.ColleagueId AS IDInterne_Collaborateur &#13;
%5 &#13;
FROM MaintenanceContract ,  Customer&#13;
WHERE &#13;
MaintenanceContract.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
 Customer.Id  = MaintenanceContract.CustomerId  AND&#13;
MaintenanceContract.Status = 2 AND &#13;
(MaintenanceContract.EndDate &amp;gt;= GETDATE()  OR &#13;
DATEDIFF(day,MaintenanceContract.EndDate , GetDate()) &amp;lt;= %2)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTRATAPPAREIL</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160554628</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
MaintenanceContractCustomerProduct.sysCreatedDate AS DateCreation, &#13;
MaintenanceContractCustomerProduct.sysModifiedDate AS DateModification, &#13;
MaintenanceContractCustomerProduct.Id AS IDInterne, &#13;
MaintenanceContractCustomerProduct.Id AS Code, &#13;
MaintenanceContractCustomerProduct.ContractId AS iDInterne_Contrat, &#13;
MaintenanceContractCustomerProduct.CustomerProductId AS IDinterne_Appareil, &#13;
MaintenanceContractCustomerProduct.ItemId AS IDInterne_article, &#13;
MaintenanceContractCustomerProduct.Caption AS Libelle, &#13;
MaintenanceContractCustomerProduct.TrackingNumber AS NumSerie ,&#13;
MaintenanceContract.StartDate AS GtieDeplDébut, &#13;
MaintenanceContract.StartDate AS GtieMODébut, &#13;
MaintenanceContract.StartDate AS GtiePieceDébut, &#13;
(DATEADD(month,MaintenanceContractCustomerProduct.PartsDuration ,MaintenanceContract.StartDate)) AS GtiePieceFin,   &#13;
(DATEADD(month,MaintenanceContractCustomerProduct.LabourDuration  ,MaintenanceContract.StartDate))  AS GtieMOFin, &#13;
(DATEADD(month,MaintenanceContractCustomerProduct.TravelDuration  ,MaintenanceContract.StartDate))  AS GtieDeplFin  &#13;
&#13;
FROM MaintenanceContract	INNER JOIN MaintenanceContractCustomerProduct  &#13;
ON MaintenanceContract.Id = MaintenanceContractCustomerProduct.ContractId&#13;
WHERE &#13;
MaintenanceContract.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
MaintenanceContract.Status = 2 AND &#13;
(MaintenanceContract.EndDate &amp;gt;= GETDATE()  OR &#13;
DATEDIFF(day,MaintenanceContract.EndDate , GetDate()) &amp;lt;= %2)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INCIDENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113160647743</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Incident.sysCreatedDate AS DateCreation, &#13;
Incident.sysModifiedDate AS DateModification, &#13;
Incident.NotesClear AS Note, &#13;
Incident.Id AS IDInterne, &#13;
Incident.Id AS Code, &#13;
Incident.Caption AS Libelle, &#13;
Incident.StartDate AS DateDébut, &#13;
Incident.EndDate AS DateFin, &#13;
Incident.CustomerId AS IDInterne_Tiers, &#13;
Incident.CustomerId AS Code_Tiers, &#13;
Incident.CustomerName AS NomTiers, &#13;
Incident.DescriptionClear AS Description, &#13;
Incident.Status AS Etat, &#13;
Incident.Address_Address1 AS Adresse1, &#13;
Incident.Address_Address2 AS Adresse2, &#13;
Incident.Address_ZipCode AS CP, &#13;
Incident.Address_City AS Ville, &#13;
Incident.Address_CountryIsoCode , &#13;
Incident.Contact_Name AS Contact_Nom, &#13;
Incident.Contact_FirstName AS Contact_Prenom, &#13;
Incident.Contact_Phone AS Tel, &#13;
Incident.Contact_CellPhone AS GSM, &#13;
Incident.Contact_Email AS Mail, &#13;
Incident.Contact_Function AS ContactFonction, &#13;
Incident.ContractId AS iDInterne_Contrat,&#13;
Incident.DealId AS IDInterne_Affaire &#13;
 &#13;
&#13;
FROM Incident &#13;
WHERE &#13;
Incident.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DATEDIFF(day,Incident.StartDate, GetDate()) &amp;lt;= %2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SECTEURGEOGRAPHIQUE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456644</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
GeographicSector.sysCreatedDate AS DateCreation , &#13;
GeographicSector.sysModifiedDate AS DateModification , &#13;
GeographicSector.Code AS IDInterne , &#13;
GeographicSector.Code AS Code , &#13;
GeographicSector.Name AS Libelle, &#13;
&amp;apos;SecteurGéo&amp;apos; AS TypeNomenclature  &#13;
&#13;
FROM GeographicSector</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SOCIETE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456645</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT TOP 1&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Name&amp;apos;) AS Nom ,&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Address.Address1&amp;apos;) AS Adresse1, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Address.Address2&amp;apos;) AS Adresse2, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Address.ZipCode&amp;apos;) AS CP, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Address.City&amp;apos;) AS Ville, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.AdministrativesInformations.NafApeCode&amp;apos;) AS APE, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.AdministrativesInformations.Siret&amp;apos;) AS Siret, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.VatInformations.IntraCommunityVatNumber&amp;apos;) AS TVAIntra, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionBlobValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Logo&amp;apos;) AS Logo,&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Phone&amp;apos;) AS Tel ,&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Fax&amp;apos;) AS Fax ,&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.WebSite&amp;apos;) AS Web ,&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.Email&amp;apos;) AS Mail, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.AdministrativesInformations.RcsNumberId&amp;apos;) AS RCS,&#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.AdministrativesInformations.Capital&amp;apos;) AS Capital, &#13;
(SELECT  TOP 1 EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;CompanyInformationsOptions.Coordinates.LegalForm&amp;apos;) AS FormeJuridique, &#13;
&#13;
(SELECT isnull(Caption,&amp;apos;&amp;apos;)+&amp;apos; - &amp;apos;+ isnull(Address_Address1,&amp;apos;&amp;apos;)+&amp;apos; - &amp;apos;+isnull(Address_ZipCode,&amp;apos;&amp;apos;) +&amp;apos; &amp;apos;+isnull(Address_City,&amp;apos;&amp;apos;) +&amp;apos; - IBAN: &amp;apos;+isnull(AccountDetail_InternationalBankAccountNumber,&amp;apos;&amp;apos;) +&amp;apos; - BIC: &amp;apos;+ISNULL(AccountDetail_BankIdentifierCode,&amp;apos;&amp;apos;) from Bank&#13;
WHERE Id= (Select EbpSysOptions.OptionValue FROM EbpSysOptions WHERE EbpSysOptions.OptionName =&amp;apos;SettlementOptions.Defaultbank&amp;apos;)&#13;
) AS RIB,&#13;
&#13;
&#13;
&amp;apos;2&amp;apos; As NbDécimalesQté, &#13;
&amp;apos;2&amp;apos; AS NbDécimalesPrix, &#13;
&amp;apos;3&amp;apos; AS NbDécumalesPoids, &#13;
 &amp;apos;1&amp;apos; AS ProtectionDoc,&#13;
&#13;
&amp;apos;3&amp;apos; AS NbDécimalesVolume&#13;
&#13;
&#13;
FROM EbpSysOptions</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SOUS_FAMILLE_ARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456646</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
ItemSubFamily.sysCreatedDate AS DateCreation , &#13;
ItemSubFamily.sysModifiedDate AS DateModification , &#13;
ItemSubFamily.Id AS IDInterne , &#13;
ItemSubFamily.Id AS Code , &#13;
ItemSubFamily.Caption AS Libelle , &#13;
ItemFamily.Id AS IDFamille , &#13;
&amp;apos;A&amp;apos; AS Type , &#13;
ItemFamily.Caption AS LibelleFamille &#13;
FROM   ItemFamily &#13;
       LEFT OUTER JOIN ItemSubFamily&#13;
            ON ItemFamily.Id = ItemSubFamily.ItemFamilyId &#13;
WHERE &#13;
&#13;
 ((ItemFamily.Id NOT IN (%8) or ItemFamily.Id is Null) and (ItemSubFamily.Id NOT IN (%8) or ItemSubFamily.Id is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SOUS_FAMILLE_CLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456647</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
CustomerSubFamily.sysCreatedDate AS DateCreation , &#13;
CustomerSubFamily.sysModifiedDate AS DateModification , &#13;
CustomerSubFamily.Id AS IDInterne , &#13;
CustomerSubFamily.Id AS Code , &#13;
CustomerSubFamily.Caption AS Libelle , &#13;
CustomerFamily.Id AS IDFamille , &#13;
&amp;apos;C&amp;apos; AS Type , &#13;
CustomerFamily.Caption AS LibelleFamille &#13;
FROM   CustomerFamily &#13;
       LEFT OUTER JOIN CustomerSubFamily&#13;
            ON CustomerFamily.Id = CustomerSubFamily.CustomerFamilyId &#13;
WHERE &#13;
 ((CustomerFamily.Id NOT IN (%7) or CustomerFamily.Id is Null) and (CustomerSubFamily.Id NOT IN (%7) or CustomerSubFamily.Id is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SOUS_FAMILLE_FOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456648</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SupplierSubFamily.sysCreatedDate AS DateCreation , &#13;
SupplierSubFamily.sysModifiedDate AS DateModification , &#13;
SupplierSubFamily.Id AS IDInterne , &#13;
SupplierSubFamily.Id AS Code , &#13;
SupplierSubFamily.Caption AS Libelle , &#13;
SupplierFamily.Id AS IDFamille , &#13;
&amp;apos;F&amp;apos; AS Type , &#13;
SupplierFamily.Caption AS LibelleFamille &#13;
&#13;
FROM   SupplierFamily &#13;
       LEFT OUTER JOIN SupplierSubFamily&#13;
            ON SupplierFamily.Id = SupplierSubFamily.SupplierFamilyId &#13;
WHERE &#13;
 ((SupplierFamily.Id NOT IN (%9) or SupplierFamily.Id is Null) and (SupplierSubFamily.Id NOT IN (%9) or SupplierSubFamily.Id is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ARTICLESTOCK</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113161645624</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
StockItem.sysCreatedDate AS DateCreation , &#13;
StockItem.sysModifiedDate AS DateModification , &#13;
&#13;
StockItem.ItemId AS IDInterneArticle , &#13;
StockItem.StorehouseId AS IDInterneDepot , &#13;
StockItem.RealStock AS StockReel , &#13;
StockItem.VirtualStock AS StockVirtuel ,&#13;
( Select TOP 1 Location.Caption FROM Location WHERE Location.Id  = LocationId AND StockItem.StorehouseId = Location.StorehouseId ) AS  Emplacement, &#13;
&#13;
Item.Id&#13;
&#13;
&#13;
&#13;
FROM StockItem , Item&#13;
&#13;
WHERE &#13;
StockItem.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Item.Id = StockItem.ItemId And StorageEnable=1 AND&#13;
Item.ActiveState =0 and  ((FamilyId NOT IN (%8) or FamilyId is Null) and (SubFamilyId NOT IN (%8) or SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TECHNICIEN</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456652</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Colleague.Id  AS IDInterne, &#13;
Colleague.Id AS Code, &#13;
CAST(Colleague.Contact_Name AS VARCHAR) AS Nom, &#13;
CAST(Colleague.Contact_FirstName AS VARCHAR) AS Prenom, &#13;
&amp;apos;T&amp;apos; AS Type, &#13;
Colleague.GeographicSector AS IDInerne_SecteurGeo ,&#13;
Colleague.SalePriceVatExcluded AS PrixVente, &#13;
&#13;
Colleague.Contact_ColleagueFunction AS Fonction_Qualif&#13;
&#13;
&#13;
&#13;
&#13;
FROM Colleague &#13;
WHERE &#13;
Colleague.ActiveState = 0 And Colleague.IsSalesperson = 0</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TAXE-TVA</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456652</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Vat.sysCreatedDate AS DateCreation ,&#13;
Vat.sysModifiedDate AS DateModification , &#13;
&#13;
 Vat.Id AS IDInterne , &#13;
/*&#13;
CONVERT(VARCHAR(150),Vat.TerritorialityId )+&amp;apos;*&amp;apos;+CONVERT(VARCHAR(150), Vat.Id) AS IDInterne , &#13;
*/&#13;
Vat.Id AS Code , &#13;
Vat.Description AS Libelle , &#13;
Vat.Rate AS TauxTVA &#13;
FROM Vat &#13;
WHERE &#13;
Vat.Inactive = 0 And&#13;
(Vat.TerritorialityId = (Select Top 1 OptionValue From  EbpSysOptions  Where OptionName = &amp;apos;CompanyInformationsOptions.VatInformations.DefaultTerritorialityId&amp;apos;))&#13;
/*&#13;
 OR &#13;
(SELECT count(ItemVatTerritoriality.VatId) FROM ItemVatTerritoriality WHERE ItemVatTerritoriality.VatId = Vat.Id) &amp;gt;0 &#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TVA_REGIME</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456655</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT&#13;
ItemVatTerritoriality.TerritorialityId AS RegimeClient,&#13;
ItemVatTerritoriality.VatId AS IDInterne_TVA,&#13;
ItemVatTerritoriality.ParentId AS RegimeArticle&#13;
FROM ItemVatTerritoriality</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TYPEARTICLE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714185924352</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;0&amp;quot;&#13;
TableA2.Code = &amp;quot;0&amp;quot;&#13;
TableA2.Libelle = &amp;quot;1 Biens&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;TypeArticle&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;1&amp;quot;&#13;
TableA2.Code = &amp;quot;1&amp;quot;&#13;
TableA2.Libelle = &amp;quot;2 Services&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;TypeArticle&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;3&amp;quot;&#13;
TableA2.Code = &amp;quot;3&amp;quot;&#13;
TableA2.Libelle = &amp;quot;3 Nomenc. Fab.&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;TypeArticle&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;2&amp;quot;&#13;
TableA2.Code = &amp;quot;2&amp;quot;&#13;
TableA2.Libelle = &amp;quot;4 Nomenc. Comm.&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;TypeArticle&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.IDInterne = &amp;quot;TXT&amp;quot;&#13;
TableA2.Code = &amp;quot;TXT&amp;quot;&#13;
TableA2.Libelle = &amp;quot;5 Textes standards&amp;quot;&#13;
TableA2.TypeNomenclature = &amp;quot;TypeArticle&amp;quot;&#13;
Hajoute(TableA2)&#13;
NbEnregSynchronisé ++&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TYPETARIF</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456657</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
PriceListCategory.sysCreatedDate AS DateCreation, &#13;
PriceListCategory.sysModifiedDate AS DateModification, &#13;
PriceListCategory.Id AS IDInterne, &#13;
PriceListCategory.Id AS Code, &#13;
PriceListCategory.Description AS Libelle, &#13;
&amp;apos;CatTarif&amp;apos;AS TypeNomenclature&#13;
&#13;
FROM PriceListCategory</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>UNITE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456657</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Unit.sysCreatedDate AS DateCreation , &#13;
Unit.sysModifiedDate AS DateModification , &#13;
Unit.Id AS IDInterne , &#13;
Unit.Id Code , &#13;
Unit.Caption AS Libelle ,&#13;
CASE Unit.UnitType&#13;
     WHEN 0 THEN &amp;apos;Poids&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;Taille&amp;apos;&#13;
     WHEN 2  THEN &amp;apos;Surface&amp;apos;&#13;
     WHEN 3  THEN &amp;apos;Volume&amp;apos;&#13;
     WHEN 4 THEN &amp;apos;Durée&amp;apos;&#13;
     WHEN 5 THEN &amp;apos;Vente&amp;apos;&#13;
END  AS TypeUnite&#13;
FROM Unit &#13;
Order By UnitType</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>RE_CONFIG_AUTO</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714185334547</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
sNomValeur			est une chaîne ANSI	= &amp;quot;Path&amp;quot;&#13;
&#13;
RccXml				est un xmlDocument	//, description = &amp;quot;MatriceRaccourcisEBP&amp;quot;&#13;
ChemEXE				est une chaîne&#13;
ChemRegistre		est une chaîne&#13;
tabConfDestEBP		est un tableau de 0,2 chaînes&#13;
sStr1				est une chaîne&#13;
sStr2				est une chaîne&#13;
NbL					est un entier&#13;
StrConf				est une chaîne&#13;
&#13;
ApplicationId		est une chaîne&#13;
ApplicationVersion	est une chaîne&#13;
ConnectionString	est une chaîne&#13;
DatabaseId			est une chaîne&#13;
SchemaId			est une chaîne&#13;
providerid			est une chaîne&#13;
data_source			est une chaîne&#13;
database			est une chaîne&#13;
integrated_security	est une chaîne&#13;
user_id				est une chaîne&#13;
encryptedpassword	est une chaîne&#13;
network_library		est une chaîne&#13;
&#13;
&#13;
sSel				est une chaîne		&#13;
&#13;
nBSoftOLT			est un entier&#13;
&#13;
&#13;
POUR B = 1 À 2&#13;
	&#13;
	sSel = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[B].Config)&#13;
	SI fFichierExiste(sSel) _ET_ Minuscule(fExtraitChemin(sSel,fExtension)) = &amp;quot;.ebp&amp;quot;&#13;
		RccXml = XMLOuvre(sSel,depuisFichier)&#13;
		SI PAS ErreurDétectée ALORS &#13;
			nBSoftOLT = RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut..Occurrence&#13;
			&#13;
			POUR N = 1 À nBSoftOLT&#13;
				SI Gauche(XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].SchemaId),4) = &amp;quot;0895&amp;quot; ALORS&#13;
					&#13;
					&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;ApplicationId&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ApplicationId))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;ApplicationVersion&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ApplicationVersion))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;ConnectionString&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ConnectionString))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;DatabaseId&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].DatabaseId))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;SchemaId&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].SchemaId))&#13;
					StrConf = XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ConnectionString)&#13;
					POUR TOUTE CHAÎNE sChaîneExtraite, nRang DE StrConf SÉPARÉE PAR &amp;quot;;&amp;quot;&#13;
						sStr1	= Remplace(SansEspace(ExtraitChaîne(sChaîneExtraite, 1, &amp;quot;=&amp;quot;),sscDroite+sscGauche) ,&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;quot;)&#13;
						sStr2	= Remplace(SansEspace(ExtraitChaîne(sChaîneExtraite, 2, &amp;quot;=&amp;quot;),sscDroite+sscGauche) ,&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;quot;)&#13;
						TableauAjouteLigne(tabConfDestEBP,sStr1,sStr2)&#13;
					FIN&#13;
					NbL = TableauInfo(tabConfDestEBP,tiNombreLignes)&#13;
					POUR l = 1 À NbL&#13;
						//				trace(tabConfDestEBP[l,1])&#13;
						SELON Minuscule(tabConfDestEBP[l,1])&#13;
						&#13;
							CAS Minuscule(&amp;quot;ApplicationId&amp;quot;)&#13;
								ApplicationId = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;ApplicationVersion&amp;quot;)&#13;
								ApplicationVersion = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;ConnectionString&amp;quot;)&#13;
								ConnectionString = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;DatabaseId&amp;quot;)&#13;
								DatabaseId = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;SchemaId&amp;quot;)&#13;
								SchemaId = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;providerid&amp;quot;)&#13;
								providerid = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;data source&amp;quot;)//serveur&#13;
								data_source = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;database&amp;quot;)//BDD&#13;
								database = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;integrated security&amp;quot;)&#13;
								integrated_security = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;user id&amp;quot;)//utilisateur&#13;
								user_id = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;encryptedpassword&amp;quot;)&#13;
								encryptedpassword = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;network library&amp;quot;)&#13;
								network_library = tabConfDestEBP[l,2]&#13;
								&#13;
								&#13;
							AUTRE CAS&#13;
								&#13;
						FIN&#13;
					FIN&#13;
					ChemRegistre	= &amp;quot;HKEY_LOCAL_MACHINE\SOFTWARE\EBP\Applications\&amp;quot; + ApplicationId +&amp;quot;\&amp;quot; + ApplicationVersion&#13;
					ChemEXE			= Registre64Lit(ChemRegistre,sNomValeur)&#13;
					&#13;
					SI ChemEXE &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[B].Logiciel = TexteVersXML(ChemEXE)&#13;
					&#13;
				FIN&#13;
			FIN&#13;
		SINON&#13;
			Erreur(&amp;quot;Erreur d&amp;apos;ouverture du raccourcis EBP&amp;quot;)&#13;
		FIN&#13;
		&#13;
	FIN&#13;
FIN&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TARIFS-GRILLE-FOUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20240627174810240</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
//=====================================================TARIFS FOUNISSEUR GESCOM &amp;amp; Bat OLT&#13;
&#13;
//27/06/2024&#13;
NumLigCSV						est un entier&#13;
nIDFichier						est un entier&#13;
sChaîneLue						est une chaîne&#13;
tabEntete						est un tableau de 0 chaînes&#13;
tabLigne						est un tableau de 0 chaînes&#13;
nColCode						est un entier&#13;
nColDescription					est un entier&#13;
nColQtéMax						est un entier&#13;
nColPrix						est un entier&#13;
nColRemise						est un entier&#13;
nColTypeTiers					est un entier&#13;
nColTiersdébut					est un entier&#13;
nColTiersFin					est un entier&#13;
nColTypeArticle					est un entier&#13;
nColArtDébut					est un entier&#13;
nColArtFin						est un entier&#13;
nColDateFin						est un entier&#13;
nColDateDeb						est un entier&#13;
nColTypedecalcul				est un entier&#13;
dDateTempDeb					est une Date&#13;
dDateTempFin					est une Date&#13;
nColArticle						est un entier&#13;
nNbTypeClient					est un entier&#13;
nNbTypeArticle					est un entier&#13;
nColExclusionTiers				est un entier&#13;
nColExclusionArticle			est un entier&#13;
tabTiersMultiplesDébut			est un tableau de 0 chaînes&#13;
tabTiersMultiplesFin			est un tableau de 0 chaînes&#13;
tabArticlesMultiplesDébut		est un tableau de 0 chaînes&#13;
tabArticlesMultiplesFin			est une tableau de 0 chaînes&#13;
tabTypeClientsMultiples			est une tableau de 0 chaînes&#13;
tabTypeArticlesMultiples		est un tableau de 0 chaînes&#13;
tabExclusionArticlesMultiples	est un tableau de 0 chaînes&#13;
tabExclusionTiersMultiples		est un tableau de 0 chaînes&#13;
sSéparateur						est une chaînes&#13;
&#13;
&#13;
&#13;
Ok								est un booléen&#13;
//SDK&#13;
STrTemp							est une chaîne&#13;
&#13;
&#13;
&#13;
sDossierExport					est une chaîne	= ComplèteRep(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Export))&#13;
&#13;
sIdentifiantsEBP				est une chaîne&#13;
sMaReq							est une chaîne&#13;
IDGuidEBP						est une chaîne&#13;
sNomProfilImport				est une chaîne&#13;
sdReqTemp						est une Source de Données&#13;
&#13;
	IDGuidEBP = &amp;quot;{1BFE144E-B13A-4503-B263-6AC66536A879}&amp;quot; //Tarif Four&#13;
//IDGuidEBP	= &amp;quot;{4057F90D-5000-4EE5-85CF-8B24F0E0980C}&amp;quot; //Tarif Client&#13;
sMaReq		= [&#13;
		SELECT &#13;
		EbpSysGenericImportSettings.name &#13;
		FROM EbpSysGenericImportSettings &#13;
		WHERE &#13;
		left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 1&#13;
		Order By EbpSysGenericImportSettings.name DESC&#13;
]&#13;
sMaReq				= ChaîneConstruit(sMaReq,IDGuidEBP,&amp;quot;NuxiDev&amp;quot;)&#13;
sNomProfilImport	= &amp;quot;NuxiDev3&amp;quot;&#13;
SI HExécuteRequêteSQL(sdReqTemp,CnxM,hRequêteSansCorrection ,sMaReq) ALORS&#13;
	&#13;
	HLitPremier(sdReqTemp)&#13;
	SI PAS HEnDehors(sdReqTemp) ALORS&#13;
		sNomProfilImport = sdReqTemp.name&#13;
	FIN&#13;
FIN&#13;
HLibèreRequête(sdReqTemp)&#13;
IDGuidEBP = &amp;quot;***&amp;quot;&#13;
&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
	sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur)&#13;
SINON&#13;
	sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
FIN&#13;
&#13;
SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
	sIdentifiantsEBP = sIdentifiantsEBP + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
FIN&#13;
&#13;
STrTemp = (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) ...&#13;
+ Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) +sDossierExport + &amp;quot;Tarifs fournisseurs.log&amp;quot; + Caract(34) + &amp;quot; /Export=&amp;quot;+ Caract(34)+ sDossierExport + &amp;quot;Tarifs fournisseurs.csv&amp;quot; + Caract(34)+ &amp;quot;;SupplierPriceLists;&amp;quot;+sNomProfilImport+&amp;quot;;Continue&amp;quot;)&#13;
SI fFichierExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) ) ALORS LanceAppli(STrTemp,exeActif,exeBloquant)&#13;
&#13;
Temporisation(50,tempoSourisEtClavier)&#13;
&#13;
SI fFichierExiste(sDossierExport + &amp;quot;Tarifs fournisseurs.csv&amp;quot;) ALORS&#13;
	nIDFichier = fOuvre(sDossierExport + &amp;quot;Tarifs fournisseurs.csv&amp;quot;, foLecture)&#13;
	SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
		&#13;
		// Lecture du fichier&#13;
		sChaîneLue = fLitLigne(nIDFichier)&#13;
		//		sChaîneLue = Remplace(sChaîneLue,tab,&amp;quot; &amp;quot;)&#13;
		//		sChaîneLue = remplace(sChaîneLue,Caract(34) + &amp;quot;;&amp;quot; + Caract(34),Tab)&#13;
		//		sChaîneLue = Remplace(sChaîneLue,Caract(34),&amp;quot;&amp;quot;)&#13;
		&#13;
		&#13;
		SI sChaîneLue &amp;lt;&amp;gt; EOT _ET_ sChaîneLue &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			SI Contient(sChaîneLue,TAB) ALORS&#13;
				sSéparateur = TAB&#13;
			SINON&#13;
				sSéparateur = &amp;quot;;&amp;quot;&#13;
			FIN&#13;
			ChaîneVersTableau(sChaîneLue,tabEntete,sSéparateur)&#13;
			nColCode		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Code tarif&amp;quot;)&#13;
			nColDescription	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Description&amp;quot;)&#13;
			nColQtéMax		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Jusqu&amp;apos;à&amp;quot;)&#13;
			nColPrix		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Prix&amp;quot;)&#13;
			SI nColPrix = -1 ALORS&#13;
				nColPrix = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Prix/valeur&amp;quot;)&#13;
			FIN&#13;
			nColRemise			= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Remise&amp;quot;)&#13;
			nColTypedecalcul	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Type de calcul&amp;quot;)&#13;
			nColTypeTiers		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Types tiers&amp;quot;)&#13;
			nColTiersdébut		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection tiers (Du)&amp;quot;)&#13;
			nColTiersFin		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection tiers (Au)&amp;quot;)&#13;
			nColTypeArticle		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Types article&amp;quot;)&#13;
			SI nColTypeArticle = -1 ALORS&#13;
				nColTypeArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Types élément&amp;quot;)&#13;
			FIN&#13;
			nColArtDébut = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Selection article (Du)&amp;quot;)&#13;
			SI nColArtDébut = -1 ALORS&#13;
				nColArtDébut = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Selection élément (Du)&amp;quot;)&#13;
			FIN&#13;
			nColArtFin = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection article (Au)&amp;quot;)&#13;
			SI nColArtFin = -1 ALORS&#13;
				nColArtFin = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection élément (Au)&amp;quot;)&#13;
			FIN&#13;
			nColDateFin	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Date de fin&amp;quot;)&#13;
			nColDateDeb	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Date de début&amp;quot;)&#13;
			nColArticle	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Article&amp;quot;)&#13;
			SI nColArticle = -1 ALORS&#13;
				nColArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Élément&amp;quot;)&#13;
			FIN&#13;
			nColExclusionArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Exclusion article&amp;quot;)&#13;
			SI nColExclusionArticle = -1 ALORS&#13;
				nColExclusionArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Exclusion élément&amp;quot;)&#13;
			FIN&#13;
			nColExclusionTiers	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Exclusion tiers&amp;quot;)&#13;
			sChaîneLue			= Remplace(fLitLigne(nIDFichier),Caract(34),&amp;quot;&amp;quot;)   &#13;
			ChaîneVersTableau(sChaîneLue,tabLigne,sSéparateur)&#13;
			//			sChaîneLue = fLitLigne(nIDFichier)&#13;
			//			sChaîneLue = Remplace(sChaîneLue,TAB,&amp;quot; &amp;quot;)&#13;
			//			sChaîneLue = Remplace(sChaîneLue,Caract(34) + &amp;quot;;&amp;quot; + Caract(34),TAB)&#13;
			//			sChaîneLue = Remplace(sChaîneLue,Caract(34),&amp;quot;&amp;quot;)&#13;
		FIN&#13;
		Ok = Vrai&#13;
		SI nColCode = -1 ALORS Ok = Faux&#13;
		SI nColDescription = -1 ALORS Ok = Faux&#13;
		SI nColQtéMax = -1 ALORS Ok = Faux&#13;
		SI nColPrix = -1 ALORS Ok = Faux&#13;
		SI nColRemise = -1 ALORS Ok = Faux&#13;
		SI nColTypedecalcul = -1 ALORS Ok = Faux&#13;
		SI nColTypeTiers = -1 ALORS Ok = Faux&#13;
		SI nColTiersdébut = -1 ALORS Ok = Faux&#13;
		SI nColTiersFin = -1 ALORS Ok = Faux&#13;
		SI nColTypeArticle = -1 ALORS Ok = Faux&#13;
		SI nColArtDébut = -1 ALORS Ok = Faux&#13;
		SI nColArtFin = -1 ALORS Ok = Faux&#13;
		SI nColDateFin = -1 ALORS Ok = Faux&#13;
		SI nColDateDeb = -1 ALORS Ok = Faux&#13;
		SI nColExclusionArticle = -1 ALORS Ok =Faux&#13;
		SI nColExclusionTiers = -1 ALORS Ok = Faux&#13;
		&#13;
		SI Ok = Vrai ALORS &#13;
			NumLigCSV = 1&#13;
			TANTQUE sChaîneLue &amp;lt;&amp;gt; EOT&#13;
				NumLigCSV ++&#13;
				&#13;
				//Boucler si tarifs multiples séparés avec ¤ &#13;
				TableauSupprimeTout(tabTypeArticlesMultiples)&#13;
				TableauSupprimeTout(tabTypeClientsMultiples)&#13;
				TableauSupprimeTout(tabArticlesMultiplesDébut)&#13;
				TableauSupprimeTout(tabArticlesMultiplesFin)&#13;
				TableauSupprimeTout(tabTiersMultiplesDébut)&#13;
				TableauSupprimeTout(tabTiersMultiplesFin)&#13;
				TableauSupprimeTout(tabExclusionArticlesMultiples)&#13;
				TableauSupprimeTout(tabExclusionTiersMultiples)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTypeArticle ALORS ChaîneVersTableau(tabLigne[nColTypeArticle],tabTypeArticlesMultiples,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTypeTiers ALORS ChaîneVersTableau(tabLigne[nColTypeTiers],tabTypeClientsMultiples,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColArtDébut ALORS ChaîneVersTableau(tabLigne[nColArtDébut],tabArticlesMultiplesDébut,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColArtFin ALORS ChaîneVersTableau(tabLigne[nColArtFin],tabArticlesMultiplesFin,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTiersdébut ALORS ChaîneVersTableau(tabLigne[nColTiersdébut],tabTiersMultiplesDébut,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTiersFin ALORS ChaîneVersTableau(tabLigne[nColTiersFin],tabTiersMultiplesFin,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColExclusionArticle ALORS ChaîneVersTableau(tabLigne[nColExclusionArticle],tabExclusionArticlesMultiples,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColExclusionTiers ALORS ChaîneVersTableau(tabLigne[nColExclusionTiers],tabExclusionTiersMultiples,&amp;quot;¤&amp;quot;)&#13;
				nNbTypeClient	= tabTypeClientsMultiples..Occurrence&#13;
				nNbTypeArticle	= tabTypeArticlesMultiples..Occurrence&#13;
				//				SI (tabLigne..Occurrence &amp;gt;= nColTypeArticle _ET_ tabLigne[nColTypeArticle] &amp;lt;&amp;gt; &amp;quot;&amp;quot;) ET (tabLigne..Occurrence &amp;gt;= nColTypeTiers _ET_ tabLigne[nColTypeTiers] &amp;lt;&amp;gt; &amp;quot;&amp;quot;) ALORS&#13;
				SI tabLigne[nColTypedecalcul] = &amp;quot;1&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;4&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;5&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;8&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;9&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;33&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;128&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;4096&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;1024&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;1028&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;2048&amp;quot; ALORS&#13;
					//1 Prix vente HT&#13;
					//4	Remise %&#13;
					//5 Prix Vente HT - remise %&#13;
					//9 Prix Vente HT - Remise montant&#13;
					//33  Prix de vente HT + TVA ( on définit le prix de vente et la TVA à appliquer)&#13;
					//128 Tarif COEFF sur PA&#13;
					//4096 TARIFS COEFF sur PR&#13;
					//1024 TARIF COEFF sur PV HT&#13;
					//2048 TARIFS COEFF sur PV TTC&#13;
					POUR CL = 1 À nNbTypeClient&#13;
						SI CL &amp;gt; tabExclusionTiersMultiples..Occurrence _OU_ tabExclusionTiersMultiples[CL] &amp;lt;&amp;gt; &amp;quot;True&amp;quot; ALORS&#13;
							POUR AR = 1 À nNbTypeArticle&#13;
								SI AR &amp;gt; tabExclusionArticlesMultiples..Occurrence _OU_ tabExclusionArticlesMultiples[AR] &amp;lt;&amp;gt; &amp;quot;True&amp;quot; ALORS&#13;
									NumLigCSV					= NumLigCSV&#13;
									tabLigne[nColTypeArticle]	= tabTypeArticlesMultiples[AR]&#13;
									tabLigne[nColArtDébut]		= tabArticlesMultiplesDébut[AR]&#13;
									tabLigne[nColArtFin]		= tabArticlesMultiplesFin[AR]&#13;
									tabLigne[nColTypeTiers]		= tabTypeClientsMultiples[CL]&#13;
									tabLigne[nColTiersdébut]	= tabTiersMultiplesDébut[CL]&#13;
									tabLigne[nColTiersFin]		= tabTiersMultiplesFin[CL]&#13;
									SI tabLigne[nColTypeArticle] = &amp;quot;&amp;quot; ET nColArticle &amp;lt;&amp;gt; -1 ALORS&#13;
										tabLigne[nColArtDébut]		= tabLigne[nColArticle]&#13;
										tabLigne[nColArtFin]		= tabLigne[nColArticle]&#13;
										tabLigne[nColTypeArticle]	= &amp;quot;A&amp;quot;&#13;
									FIN&#13;
									SI (tabLigne[nColTypeArticle] = &amp;quot;A&amp;quot; OU tabLigne[nColTypeArticle] = &amp;quot;F&amp;quot; OU tabLigne[nColTypeArticle] = &amp;quot;SF&amp;quot; OU tabLigne[nColTypeArticle] = &amp;quot;T&amp;quot;) ET (tabLigne[nColTypeTiers] = &amp;quot;C&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;FC&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;SFC&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;CT&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;T&amp;quot;) ALORS&#13;
										//Grille de tarif quantitative sur une fourchette Article ou fourchette Famille Article et pour une fourchette de clients ou une fourchette de familles clients&#13;
										dDateTempDeb	= ChaîneVersDate( tabLigne[nColDateDeb])&#13;
										dDateTempFin	= ChaîneVersDate( tabLigne[nColDateFin])&#13;
										&#13;
										SI PAS DateValide(dDateTempFin) _OU_ dDateTempFin &amp;gt;= DateSys() ALORS &#13;
											HRAZ(TableA2)&#13;
											&#13;
											TableA2.IDInterne	= tabLigne[nColCode]&#13;
											TableA2.Code		= tabLigne[nColCode]&#13;
											TableA2.DateDébut	= dDateTempDeb&#13;
											TableA2.dateFin		= dDateTempFin&#13;
											TableA2.Libelle		= tabLigne[nColDescription] + &amp;quot; (CSV=&amp;quot; + NumLigCSV + &amp;quot;)&amp;quot;&#13;
											SI tabLigne[nColQtéMax] = &amp;quot;&amp;quot; OU tabLigne[nColQtéMax] = &amp;quot;0&amp;quot; ALORS&#13;
												TableA2.QtéMax = &amp;quot;9999999&amp;quot;&#13;
											SINON&#13;
												TableA2.QtéMax = tabLigne[nColQtéMax]&#13;
											FIN&#13;
											TableA2.TypeCalcul	= tabLigne[nColTypedecalcul]&#13;
											TableA2.PrixVente	= tabLigne[nColPrix]&#13;
											TableA2.Remise		= tabLigne[nColRemise]&#13;
											&#13;
											TableA2.TypeTiers	= tabLigne[nColTypeTiers]&#13;
											SI tabLigne[nColTiersdébut] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
												TableA2.TiersDébut = tabLigne[nColTiersdébut]&#13;
											SINON&#13;
												TableA2.TiersDébut = hValMin&#13;
											FIN&#13;
											SI tabLigne[nColTiersFin] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
												TableA2.TiersFin = tabLigne[nColTiersFin]&#13;
											SINON&#13;
												TableA2.TiersFin = hValMax&#13;
											FIN&#13;
											SELON tabLigne[nColTypeArticle]&#13;
												CAS &amp;quot;F&amp;quot;&#13;
													TableA2.TypeArticle		= &amp;quot;FA&amp;quot;&#13;
													TableA2.ArticleDébut	= tabLigne[nColArtDébut]&#13;
													TableA2.ArticleFin		= tabLigne[nColArtFin]&#13;
												CAS &amp;quot;SF&amp;quot;&#13;
													TableA2.TypeArticle		= &amp;quot;SFA&amp;quot;&#13;
													TableA2.ArticleDébut	= tabLigne[nColArtDébut]&#13;
													TableA2.ArticleFin		= tabLigne[nColArtFin]&#13;
												CAS &amp;quot;T&amp;quot;&#13;
													TableA2.TypeArticle		= &amp;quot;A&amp;quot;&#13;
													TableA2.ArticleDébut	= hValMin&#13;
													TableA2.ArticleFin		= hValMax&#13;
												AUTRE CAS&#13;
													TableA2.TypeArticle		= tabLigne[nColTypeArticle]&#13;
													TableA2.ArticleDébut	= tabLigne[nColArtDébut]&#13;
													TableA2.ArticleFin		= tabLigne[nColArtFin]&#13;
											FIN&#13;
											//										SI TableA2.Remise &amp;lt;&amp;gt; 0 OU TableA2.PrixVente &amp;lt;&amp;gt; 0 ALORS HAjoute(TableA2,hIgnoreDoublon)&#13;
											HAjoute(TableA2,hIgnoreDoublon)&#13;
											&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				//				FIN&#13;
				sChaîneLue = Remplace(fLitLigne(nIDFichier),Caract(34),&amp;quot;&amp;quot;)&#13;
				ChaîneVersTableau(sChaîneLue,tabLigne,sSéparateur)&#13;
				&#13;
			FIN&#13;
		FIN&#13;
		fFerme(nIDFichier)&#13;
	FIN&#13;
FIN&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>TARIFS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250124115912097</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(sdTableMLocal est Source de Données)   &#13;
&#13;
&#13;
//22/01/2025 15:08&#13;
&#13;
nIDFichier									est un entier&#13;
NumLigCSV									est un entier&#13;
sChaîneLue									est une chaîne&#13;
tabEntete									est un tableau de 0 chaînes&#13;
tabLigne									est un tableau de 0 chaînes&#13;
nColCode									est un entier&#13;
nColDescription								est un entier&#13;
nColQtéMax									est un entier&#13;
nColPrix									est un entier&#13;
nColRemise									est un entier&#13;
nColTypeTiers								est un entier&#13;
nColTiersdébut								est un entier&#13;
nColTiersFin								est un entier&#13;
nColTypeArticle								est un entier&#13;
nColArtDébut								est un entier&#13;
nColArtFin									est un entier&#13;
nColDateFin									est un entier&#13;
nColDateDeb									est un entier&#13;
nColTypedecalcul							est un entier&#13;
dDateTempDeb								est une Date&#13;
dDateTempFin								est une Date&#13;
nColArticle									est un entier&#13;
nNbTypeClient								est un entier&#13;
nNbTypeArticle								est un entier&#13;
nColExclusionTiers							est un entier&#13;
nColExclusionArticle						est un entier&#13;
tabTiersMultiplesDébut						est un tableau de 0 chaînes&#13;
tabTiersMultiplesFin						est un tableau de 0 chaînes&#13;
tabArticlesMultiplesDébut					est un tableau de 0 chaînes&#13;
tabArticlesMultiplesFin						est une tableau de 0 chaînes&#13;
tabTypeClientsMultiples						est une tableau de 0 chaînes&#13;
tabTypeArticlesMultiples					est un tableau de 0 chaînes&#13;
tabExclusionArticlesMultiples				est un tableau de 0 chaînes&#13;
tabExclusionTiersMultiples					est un tableau de 0 chaînes&#13;
sSéparateur									est une chaîne&#13;
Ok											est un booléen&#13;
FicArticle									est une Source de Données&#13;
bIsExportValide								est un booléen	= Faux&#13;
StrLog										est une chaîne&#13;
//***********************************************************************&#13;
&#13;
sDossierExport								est une chaîne	= ComplèteRep(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Export))&#13;
SI PAS fRepExiste(sDossierExport) ALORS&#13;
	fRepCrée(sDossierExport)&#13;
FIN&#13;
&#13;
HDéclareExterne( gsRepTemp + &amp;quot;Article.fic&amp;quot;,FicArticle)&#13;
&#13;
&#13;
//=====================================================TARIFS PARTICULIERS EBP SAAS&#13;
//SI (ExeInfo(exeVersion) &amp;gt;= &amp;quot;6.4.15&amp;quot; _ET_  gsLogicielMaitreCode = &amp;quot;EBPGesComSaaS&amp;quot;) OU EnModeTest()  ALORS&#13;
(StrLog,bIsExportValide)=ExporterTarifs()&#13;
//	TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Export [TARIFS] : &amp;quot;,&amp;quot;&amp;quot;)&#13;
SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
	TraceErr(&amp;quot;Fonction Export des [TARIFS]&amp;quot; + RC + StrLog)&#13;
SINON&#13;
	//		TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [TARIFS]&amp;quot; + RC + StrLog)&#13;
FIN&#13;
//SINON&#13;
//FIN&#13;
// Ouverture du fichier&#13;
TableauAjouteLigne(gtabExportDesFic,sDossierExport + &amp;quot;Tarifs.csv&amp;quot;)&#13;
TableauAjouteLigne(gtabExportDesFic,sDossierExport + &amp;quot;Tarifs.log&amp;quot;)&#13;
SI fFichierExiste(sDossierExport + &amp;quot;Tarifs.csv&amp;quot;) OU bIsExportValide=Vrai ALORS&#13;
	&#13;
	nIDFichier = fOuvre(sDossierExport + &amp;quot;Tarifs.csv&amp;quot;, foLecture)&#13;
	SI nIDFichier &amp;lt;&amp;gt; -1 ALORS&#13;
		&#13;
		// Lecture du fichier&#13;
		sChaîneLue = fLitLigne(nIDFichier)&#13;
		&#13;
		SI sChaîneLue &amp;lt;&amp;gt; EOT _ET_ sChaîneLue &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			SI Contient(sChaîneLue,TAB) ALORS&#13;
				sSéparateur = TAB&#13;
			SINON&#13;
				sSéparateur = &amp;quot;;&amp;quot;&#13;
			FIN&#13;
			ChaîneVersTableau(sChaîneLue,tabEntete,sSéparateur)&#13;
			nColCode		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Code tarif&amp;quot;)&#13;
			nColDescription	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Description&amp;quot;)&#13;
			nColQtéMax		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Jusqu&amp;apos;à&amp;quot;)&#13;
			nColPrix		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Prix&amp;quot;)&#13;
			SI nColPrix = -1 ALORS&#13;
				nColPrix = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Prix/valeur&amp;quot;)&#13;
			FIN&#13;
			nColRemise			= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Remise&amp;quot;)&#13;
			nColTypedecalcul	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Type de calcul&amp;quot;)&#13;
			nColTypeTiers		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Types tiers&amp;quot;)&#13;
			nColTiersdébut		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection tiers (Du)&amp;quot;)&#13;
			nColTiersFin		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection tiers (Au)&amp;quot;)&#13;
			nColTypeArticle		= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Types article&amp;quot;)&#13;
			SI nColTypeArticle = -1 ALORS&#13;
				nColTypeArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Types élément&amp;quot;)&#13;
			FIN&#13;
			nColArtDébut = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Selection article (Du)&amp;quot;)&#13;
			SI nColArtDébut = -1 ALORS&#13;
				nColArtDébut = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Selection élément (Du)&amp;quot;)&#13;
			FIN&#13;
			nColArtFin = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection article (Au)&amp;quot;)&#13;
			SI nColArtFin = -1 ALORS&#13;
				nColArtFin = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Sélection élément (Au)&amp;quot;)&#13;
			FIN&#13;
			nColDateFin	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Date de fin&amp;quot;)&#13;
			nColDateDeb	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Date de début&amp;quot;)&#13;
			nColArticle	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Article&amp;quot;)&#13;
			SI nColArticle = -1 ALORS&#13;
				nColArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire, &amp;quot;Élément&amp;quot;)&#13;
			FIN&#13;
			nColExclusionArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Exclusion article&amp;quot;)&#13;
			SI nColExclusionArticle = -1 ALORS&#13;
				nColExclusionArticle = TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Exclusion élément&amp;quot;)&#13;
			FIN&#13;
			nColExclusionTiers	= TableauCherche(tabEntete,tccSansAccent+tccSansCasse+tcLinéaire,&amp;quot;Exclusion tiers&amp;quot;)&#13;
			sChaîneLue			= Remplace(fLitLigne(nIDFichier),Caract(34),&amp;quot;&amp;quot;)   &#13;
			ChaîneVersTableau(sChaîneLue,tabLigne,sSéparateur)&#13;
			//			sChaîneLue = fLitLigne(nIDFichier)&#13;
			//			sChaîneLue = Remplace(sChaîneLue,TAB,&amp;quot; &amp;quot;)&#13;
			//			sChaîneLue = Remplace(sChaîneLue,Caract(34) + &amp;quot;;&amp;quot; + Caract(34),TAB)&#13;
			//			sChaîneLue = Remplace(sChaîneLue,Caract(34),&amp;quot;&amp;quot;)&#13;
		FIN&#13;
		Ok = Vrai&#13;
		SI nColCode = -1 ALORS Ok = Faux&#13;
		SI nColDescription = -1 ALORS Ok = Faux&#13;
		SI nColQtéMax = -1 ALORS Ok = Faux&#13;
		SI nColPrix = -1 ALORS Ok = Faux&#13;
		SI nColRemise = -1 ALORS Ok = Faux&#13;
		SI nColTypedecalcul = -1 ALORS Ok = Faux&#13;
		SI nColTypeTiers = -1 ALORS Ok = Faux&#13;
		SI nColTiersdébut = -1 ALORS Ok = Faux&#13;
		SI nColTiersFin = -1 ALORS Ok = Faux&#13;
		SI nColTypeArticle = -1 ALORS Ok = Faux&#13;
		SI nColArtDébut = -1 ALORS Ok = Faux&#13;
		SI nColArtFin = -1 ALORS Ok = Faux&#13;
		SI nColDateFin = -1 ALORS Ok = Faux&#13;
		SI nColDateDeb = -1 ALORS Ok = Faux&#13;
		SI nColExclusionArticle = -1 ALORS Ok =Faux&#13;
		SI nColExclusionTiers = -1 ALORS Ok = Faux&#13;
		&#13;
		SI Ok = Vrai ALORS &#13;
			NumLigCSV = 1&#13;
			TANTQUE sChaîneLue &amp;lt;&amp;gt; EOT&#13;
				NumLigCSV ++&#13;
				&#13;
				//Boucler si tarifs multiples séparés avec ¤ &#13;
				TableauSupprimeTout(tabTypeArticlesMultiples)&#13;
				TableauSupprimeTout(tabTypeClientsMultiples)&#13;
				TableauSupprimeTout(tabArticlesMultiplesDébut)&#13;
				TableauSupprimeTout(tabArticlesMultiplesFin)&#13;
				TableauSupprimeTout(tabTiersMultiplesDébut)&#13;
				TableauSupprimeTout(tabTiersMultiplesFin)&#13;
				TableauSupprimeTout(tabExclusionArticlesMultiples)&#13;
				TableauSupprimeTout(tabExclusionTiersMultiples)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTypeArticle ALORS ChaîneVersTableau(tabLigne[nColTypeArticle],tabTypeArticlesMultiples,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTypeTiers ALORS ChaîneVersTableau(tabLigne[nColTypeTiers],tabTypeClientsMultiples,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColArtDébut ALORS ChaîneVersTableau(tabLigne[nColArtDébut],tabArticlesMultiplesDébut,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColArtFin ALORS ChaîneVersTableau(tabLigne[nColArtFin],tabArticlesMultiplesFin,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTiersdébut ALORS ChaîneVersTableau(tabLigne[nColTiersdébut],tabTiersMultiplesDébut,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColTiersFin ALORS ChaîneVersTableau(tabLigne[nColTiersFin],tabTiersMultiplesFin,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColExclusionArticle ALORS ChaîneVersTableau(tabLigne[nColExclusionArticle],tabExclusionArticlesMultiples,&amp;quot;¤&amp;quot;)&#13;
				SI tabLigne..Occurrence &amp;gt;= nColExclusionTiers ALORS ChaîneVersTableau(tabLigne[nColExclusionTiers],tabExclusionTiersMultiples,&amp;quot;¤&amp;quot;)&#13;
				nNbTypeClient	= tabTypeClientsMultiples..Occurrence&#13;
				nNbTypeArticle	= tabTypeArticlesMultiples..Occurrence&#13;
				//				SI (tabLigne..Occurrence &amp;gt;= nColTypeArticle _ET_ tabLigne[nColTypeArticle] &amp;lt;&amp;gt; &amp;quot;&amp;quot;) ET (tabLigne..Occurrence &amp;gt;= nColTypeTiers _ET_ tabLigne[nColTypeTiers] &amp;lt;&amp;gt; &amp;quot;&amp;quot;) ALORS&#13;
				SI tabLigne[nColTypedecalcul] = &amp;quot;1&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;4&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;5&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;6&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;8&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;9&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;33&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;128&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;4096&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;1024&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;1028&amp;quot; OU tabLigne[nColTypedecalcul] = &amp;quot;2048&amp;quot; ALORS&#13;
					//1 Prix vente HT&#13;
					//4	Remise %&#13;
					//5 Prix Vente HT - remise %&#13;
					//9 Prix Vente HT - Remise montant&#13;
					//33  Prix de vente HT + TVA ( on définit le prix de vente et la TVA à appliquer)&#13;
					//128 Tarif COEFF sur PA&#13;
					//4096 TARIFS COEFF sur PR&#13;
					//1024 TARIF COEFF sur PV HT&#13;
					//2048 TARIFS COEFF sur PV TTC&#13;
					POUR CL = 1 À nNbTypeClient&#13;
						SI CL &amp;gt; tabExclusionTiersMultiples..Occurrence _OU_ tabExclusionTiersMultiples[CL] &amp;lt;&amp;gt; &amp;quot;True&amp;quot; ALORS&#13;
							POUR AR = 1 À nNbTypeArticle&#13;
								SI AR &amp;gt; tabExclusionArticlesMultiples..Occurrence _OU_ tabExclusionArticlesMultiples[AR] &amp;lt;&amp;gt; &amp;quot;True&amp;quot; ALORS&#13;
									NumLigCSV					= NumLigCSV&#13;
									tabLigne[nColTypeArticle]	= tabTypeArticlesMultiples[AR]&#13;
									tabLigne[nColArtDébut]		= tabArticlesMultiplesDébut[AR]&#13;
									tabLigne[nColArtFin]		= tabArticlesMultiplesFin[AR]&#13;
									tabLigne[nColTypeTiers]		= tabTypeClientsMultiples[CL]&#13;
									tabLigne[nColTiersdébut]	= tabTiersMultiplesDébut[CL]&#13;
									tabLigne[nColTiersFin]		= tabTiersMultiplesFin[CL]&#13;
									SI tabLigne[nColTypeArticle] = &amp;quot;&amp;quot; ET nColArticle &amp;lt;&amp;gt; -1 ALORS&#13;
										tabLigne[nColArtDébut]		= tabLigne[nColArticle]&#13;
										tabLigne[nColArtFin]		= tabLigne[nColArticle]&#13;
										tabLigne[nColTypeArticle]	= &amp;quot;A&amp;quot;&#13;
									FIN&#13;
									SI (tabLigne[nColTypeArticle] = &amp;quot;A&amp;quot; OU tabLigne[nColTypeArticle] = &amp;quot;F&amp;quot; OU tabLigne[nColTypeArticle] = &amp;quot;SF&amp;quot; OU tabLigne[nColTypeArticle] = &amp;quot;T&amp;quot;) ET (tabLigne[nColTypeTiers] = &amp;quot;C&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;FC&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;SFC&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;CT&amp;quot; OU tabLigne[nColTypeTiers] = &amp;quot;T&amp;quot;) ALORS&#13;
										//Grille de tarif quantitative sur une fourchette Article ou fourchette Famille Article et pour une fourchette de clients ou une fourchette de familles clients&#13;
										dDateTempDeb	= ChaîneVersDate( tabLigne[nColDateDeb])&#13;
										dDateTempFin	= ChaîneVersDate( tabLigne[nColDateFin])&#13;
										&#13;
										SI PAS DateValide(dDateTempFin) _OU_ dDateTempFin &amp;gt;= DateSys() ALORS &#13;
											HRAZ(sdTableMLocal)	&#13;
											&#13;
											sdTableMLocal.IDInterne		= tabLigne[nColCode]&#13;
											sdTableMLocal.Code			= tabLigne[nColCode]&#13;
											sdTableMLocal.DateDébut		= dDateTempDeb&#13;
											sdTableMLocal.dateFin		= dDateTempFin&#13;
											sdTableMLocal.Libelle		= tabLigne[nColDescription] + &amp;quot; (CSV=&amp;quot; + NumLigCSV + &amp;quot;)&amp;quot;&#13;
											SI tabLigne[nColQtéMax] = &amp;quot;&amp;quot; OU tabLigne[nColQtéMax] = &amp;quot;0&amp;quot; ALORS&#13;
												sdTableMLocal.QtéMax	 = &amp;quot;9999999&amp;quot;&#13;
											SINON&#13;
												sdTableMLocal.QtéMax	 = tabLigne[nColQtéMax]&#13;
											FIN&#13;
											sdTableMLocal.TypeCalcul	= tabLigne[nColTypedecalcul]&#13;
											sdTableMLocal.PrixVente		= tabLigne[nColPrix]&#13;
											sdTableMLocal.Remise		= tabLigne[nColRemise]&#13;
											&#13;
											sdTableMLocal.TypeTiers		= tabLigne[nColTypeTiers]&#13;
											SI tabLigne[nColTiersdébut] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET tabLigne[nColTiersdébut] &amp;lt;&amp;gt; &amp;quot;NC&amp;quot; ALORS &#13;
												sdTableMLocal.TiersDébut = tabLigne[nColTiersdébut]&#13;
											SINON&#13;
												sdTableMLocal.TiersDébut	 = hValMin&#13;
											FIN&#13;
											&#13;
											SI tabLigne[nColTiersFin] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET tabLigne[nColTiersFin] &amp;lt;&amp;gt; &amp;quot;NC&amp;quot; ALORS &#13;
												sdTableMLocal.TiersFin	 = tabLigne[nColTiersFin]&#13;
											SINON&#13;
												sdTableMLocal.TiersFin	= hValMax&#13;
											FIN&#13;
											&#13;
											SELON tabLigne[nColTypeArticle]&#13;
												CAS &amp;quot;F&amp;quot;&#13;
													sdTableMLocal.TypeArticle		= &amp;quot;FA&amp;quot;&#13;
													sdTableMLocal.ArticleDébut		= tabLigne[nColArtDébut]&#13;
													sdTableMLocal.ArticleFin		= tabLigne[nColArtFin]&#13;
												CAS &amp;quot;SF&amp;quot;&#13;
													sdTableMLocal.TypeArticle			= &amp;quot;SFA&amp;quot;&#13;
													sdTableMLocal.ArticleDébut			= tabLigne[nColArtDébut]&#13;
													sdTableMLocal.ArticleFin			= tabLigne[nColArtFin]&#13;
												CAS &amp;quot;T&amp;quot;&#13;
													sdTableMLocal.TypeArticle		= &amp;quot;A&amp;quot;&#13;
													sdTableMLocal.ArticleDébut		= hValMin&#13;
													sdTableMLocal.ArticleFin		= hValMax&#13;
												AUTRE CAS&#13;
													sdTableMLocal.TypeArticle		= tabLigne[nColTypeArticle]&#13;
													sdTableMLocal.ArticleDébut		= tabLigne[nColArtDébut]&#13;
													sdTableMLocal.ArticleFin		= tabLigne[nColArtFin]&#13;
											FIN&#13;
											//										SI TableA2.Remise &amp;lt;&amp;gt; 0 OU TableA2.PrixVente &amp;lt;&amp;gt; 0 ALORS HAjoute(TableA2,hIgnoreDoublon)&#13;
											&#13;
											SI sdTableMLocal.TypeArticle = &amp;quot;A&amp;quot; ET sdTableMLocal.ArticleDébut = sdTableMLocal.ArticleFin	 ALORS&#13;
												SI HLitRecherche(FicArticle,&amp;quot;Code&amp;quot;,sdTableMLocal.ArticleDébut,hIdentique) ALORS&#13;
													HAjoute(sdTableMLocal,hIgnoreDoublon)&#13;
												FIN&#13;
												&#13;
											SINON&#13;
												HAjoute(sdTableMLocal,hIgnoreDoublon)&#13;
											FIN&#13;
											&#13;
										FIN&#13;
									FIN&#13;
								FIN&#13;
							FIN&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				//				FIN&#13;
				sChaîneLue = Remplace(fLitLigne(nIDFichier),Caract(34),&amp;quot;&amp;quot;)&#13;
				ChaîneVersTableau(sChaîneLue,tabLigne,sSéparateur)&#13;
				//				sChaîneLue = fLitLigne(nIDFichier)&#13;
				//				sChaîneLue = Remplace(sChaîneLue,TAB,&amp;quot; &amp;quot;)&#13;
				//				sChaîneLue = Remplace(sChaîneLue,Caract(34) + &amp;quot;;&amp;quot; + Caract(34),TAB)&#13;
				//				sChaîneLue = Remplace(sChaîneLue,Caract(34),&amp;quot;&amp;quot;)&#13;
			FIN&#13;
		FIN&#13;
		fFerme(nIDFichier)&#13;
	FIN&#13;
	// Fermeture du fichier&#13;
	&#13;
SINON&#13;
	//Erreur(ErreurInfo())&#13;
FIN&#13;
&#13;
RENVOYER(Null)&#13;
&#13;
&#13;
	PROCÉDURE INTERNE ExporterTarifs()&#13;
		IDGuidEBP			est une chaîne&#13;
		sMaReq				est une chaîne&#13;
		sNomProfilImport	est une chaîne&#13;
		sdReqTemp			est une Source de Données&#13;
		AppliSDK			est une chaîne&#13;
		sIdentifiantsEBP	est une chaîne&#13;
		sNomFicLog			est une chaîne	= XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Export) + [fSep] + &amp;quot;Tarifs.log&amp;quot;&#13;
		sNomFic				est une chaîne	= XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Export) + [fSep] + &amp;quot;Tarifs.csv&amp;quot;&#13;
		sOrdreSDK			est une chaîne	= &amp;quot;CustomerPriceLists&amp;quot;	//Tarif Client&#13;
		&#13;
		&#13;
		&#13;
		//	IDGuidEBP = &amp;quot;{1BFE144E-B13A-4503-B263-6AC66536A879}&amp;quot; //Tarif Four&#13;
		IDGuidEBP	= &amp;quot;{4057F90D-5000-4EE5-85CF-8B24F0E0980C}&amp;quot; //Tarif Client&#13;
		sMaReq		= [&#13;
			SELECT &#13;
			EbpSysGenericImportSettings.name &#13;
			FROM EbpSysGenericImportSettings &#13;
			WHERE &#13;
			left(EbpSysGenericImportSettings.name,7) = &amp;apos;%2&amp;apos; and EbpSysGenericImportSettings.categoryId = &amp;apos;%1&amp;apos; and export = 1&#13;
			Order By EbpSysGenericImportSettings.name DESC&#13;
		]&#13;
		sMaReq				= ChaîneConstruit(sMaReq,IDGuidEBP,&amp;quot;NuxiDev&amp;quot;)&#13;
		sNomProfilImport	= &amp;quot;NuxiDev3&amp;quot;&#13;
&#13;
		SI CnxBDDSrc[1]..Serveur &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReq) ALORS &#13;
			&#13;
			HLitPremier(sdReqTemp)&#13;
			SI PAS HEnDehors(sdReqTemp) ALORS&#13;
				sNomProfilImport = sdReqTemp.name&#13;
			FIN&#13;
		FIN&#13;
		HLibèreRequête(sdReqTemp)&#13;
		IDGuidEBP = &amp;quot;***&amp;quot;&#13;
		SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &amp;lt;&amp;gt; &amp;quot;&amp;quot;  ALORS&#13;
			sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) &#13;
			SI XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP) &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS &#13;
				sIdentifiantsEBP = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Utilisateur) + &amp;quot;;&amp;quot; + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].MDP)&#13;
			FIN&#13;
		SINON&#13;
			sIdentifiantsEBP = &amp;quot;ADM&amp;quot;&#13;
		FIN&#13;
		AppliSDK	= Caract(34)  + (XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Logiciel) + Caract(34)  + &amp;quot; /Database=&amp;quot;+ Caract(34) + XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[1].Config) + Caract(34) +&amp;quot;;&amp;quot; + sIdentifiantsEBP +&amp;quot; /Gui=false;&amp;quot; + Caract(34) ...&#13;
		+ sNomFicLog  + Caract(34) + &amp;quot; /Export=&amp;quot;+ Caract(34)+ sNomFic + Caract(34)+ &amp;quot;;&amp;quot;+sOrdreSDK+&amp;quot;;&amp;quot; + sNomProfilImport + &amp;quot;;Continue&amp;quot;)&#13;
		LanceAppli(AppliSDK,exeActif,exeBloquant)&#13;
		&#13;
		&#13;
		&#13;
		&#13;
		SI fFichierExiste(sNomFic)ALORS &#13;
		&#13;
			StrLog			= &amp;quot;&amp;quot;&#13;
			bIsExportValide	= Vrai&#13;
		SINON&#13;
			StrLog			= &amp;quot;Erreur : Pas de profil d&amp;apos;export des tarifs dans EBP&amp;quot;&#13;
			bIsExportValide	= Faux&#13;
		FIN&#13;
		&#13;
		RENVOYER (StrLog,bIsExportValide)&#13;
	FIN&#13;
</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>PLANNING</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20241113160801464</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
//22/06/2022&#13;
sMaReq			est une chaîne&#13;
dhDateFiltre	est une DateHeure&#13;
sMaReqTemp		est une chaîne&#13;
ReqTemp			est une Source de Données&#13;
TableMi			est une Source de Données&#13;
NbjHisto		est un entier&#13;
Il				est un entier&#13;
sStrComplément	est une chaîne &#13;
&#13;
&#13;
&#13;
NbjHisto		= &amp;quot;%2&amp;quot;&#13;
&#13;
dhDateFiltre	= EntierVersDate(DateVersEntier(DateSys()) - NbjHisto)&#13;
&#13;
sMaReq			= [&#13;
	SELECT &#13;
	&#13;
	ScheduleEvent.sysCreatedDate , &#13;
	ScheduleEvent.sysModifiedUser , &#13;
	cast(ScheduleEvent.Id as varchar(50)) AS Id , &#13;
	cast(ScheduleEvent.ParentEventId as varchar(50)) AS ParentEventId , &#13;
	&#13;
	ScheduleEvent.LineOrder , &#13;
	ScheduleEvent.StartDateTime , &#13;
	ScheduleEvent.EndDateTime , &#13;
	ScheduleEvent.Caption , &#13;
	ScheduleEvent.Notes ,&#13;
	(SELECT TOP 1 ScheduleEventType.Caption FROM ScheduleEventType WHERE  ScheduleEventType.Id = ScheduleEvent.EventType ) AS Type,&#13;
	ScheduleEvent.ColleagueId,&#13;
	ScheduleEvent.EventState,&#13;
	ScheduleEvent.ScheduleShowTimeLine ,&#13;
	ScheduleEvent.LineType, &#13;
	ScheduleEvent.CreatorColleagueId, &#13;
	ScheduleEvent.CustomerId,&#13;
	(SELECT TOP 1 Customer.Name FROM Customer WHERE Customer.Id = ScheduleEvent.CustomerId) As NomClient, &#13;
	ScheduleEvent.SupplierId, &#13;
	(SELECT TOP 1 Supplier.Name FROM Supplier WHERE Supplier.Id =ScheduleEvent.SupplierId) As NomFournisseur, &#13;
	ScheduleEvent.ContactId,&#13;
	(SELECT TOP 1 Contact.ContactFields_Name FROM Contact WHERE Contact.Id = ScheduleEvent.ContactId) AS NomContact, &#13;
	(SELECT TOP 1 Colleague.Contact_Name FROM Colleague WHERE Colleague.Id = ScheduleEvent.CreatorColleagueId)  AS AuteurNom, &#13;
	cast(ScheduleEvent.AddressId as varchar(50)) AS AddressId , &#13;
	ScheduleEvent.Address_Address1 , &#13;
	ScheduleEvent.Address_Address2 , &#13;
	ScheduleEvent.Address_Address3 , &#13;
	ScheduleEvent.Address_Address4 , &#13;
	ScheduleEvent.Address_ZipCode , &#13;
	ScheduleEvent.Address_City , &#13;
	ScheduleEvent.Address_State , &#13;
	ScheduleEvent.Address_CountryIsoCode , &#13;
	ScheduleEvent.Address_Description , &#13;
	ScheduleEvent.Address_Civility , &#13;
	ScheduleEvent.Address_ThirdName , &#13;
	ScheduleEvent.Contact_Civility , &#13;
	ScheduleEvent.Contact_Name , &#13;
	ScheduleEvent.Contact_FirstName , &#13;
	ScheduleEvent.Contact_Phone , &#13;
	ScheduleEvent.Contact_CellPhone , &#13;
	ScheduleEvent.Contact_Email , &#13;
	ScheduleEvent.Contact_Function , &#13;
	ScheduleEvent.Contact_Department  &#13;
	&#13;
	&#13;
	&#13;
	FROM ScheduleEvent &#13;
	WHERE &#13;
	ScheduleEvent.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
	 (ScheduleEvent.EventState &amp;lt;&amp;gt; 3 AND ScheduleEvent.EventState &amp;lt;&amp;gt; 4 AND DATEDIFF(day,ScheduleEvent.StartDateTime , GetDate()) &amp;lt;= 10  AND DATEDIFF(day,ScheduleEvent.StartDateTime , GetDate()) &amp;gt;=  (0- %1))&#13;
		&#13;
	&#13;
	&#13;
	&#13;
	&#13;
]&#13;
&#13;
sMaReq = ChaîneConstruit(sMaReq,NbjHisto)&#13;
&#13;
	&#13;
	SI HExécuteRequêteSQL(TableMi,CnxM,hRequêteSansCorrection,sMaReq) ALORS&#13;
		POUR TOUT TableMi &#13;
			HRAZ(TableA2)&#13;
			TableA2.DateCreation		= TableMi.sysCreatedDate&#13;
			TableA2.DateModification	= TableMi.sysModifiedUser&#13;
			TableA2.IDInterne			= TableMi.ID&#13;
			TableA2.Code				= TableMi.ID&#13;
			TableA2.IdInterne_Parent	= TableMi.ParentEventId&#13;
			&#13;
			SI TableMi.ParentEventId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				TableA2.VisiblePlanning			= TableMi.ScheduleShowTimeLine &#13;
				TableA2.DateHeureDébut			= TableMi.StartDateTime&#13;
				TableA2.DateHeureFin			= TableMi.EndDateTime &#13;
				TableA2.IDInterneCollaborateur	= TableMi.ColleagueId&#13;
				TableA2.IdentifiantGoogle		= &amp;quot;&amp;quot;&#13;
				sMaReqTemp						= sMaReq + &amp;quot; AND ScheduleEvent.Id = &amp;apos;&amp;quot; + TableMi.ParentEventId + &amp;quot;&amp;apos;&amp;quot; &#13;
				SI HExécuteRequêteSQL(ReqTemp,CnxM,hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
					HLitPremier(ReqTemp) &#13;
					SI PAS HEnDehors ALORS &#13;
						SI ReqTemp.ColleagueId &amp;lt;&amp;gt; TableMi.ColleagueId ALORS // ne pas traiter si la ressource correspond au parent&#13;
							TableA2.Libelle		= ReqTemp.Caption&#13;
							TableA2.Description	= RTFVersTexte(ReqTemp.Notes)&#13;
							TableA2.Lieu		= ReqTemp.Address_Address1 + [&amp;quot; &amp;quot;]+ ReqTemp.Address_Address2 + [&amp;quot; &amp;quot;] + ReqTemp.Address_ZipCode + [&amp;quot; &amp;quot;] + ReqTemp.Address_City&#13;
							sStrComplément		= &amp;quot;&amp;quot;&#13;
							SI ReqTemp.CustomerId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
								TableA2.TypeTiers		= &amp;quot;CP&amp;quot;&#13;
								TableA2.IDInterne_Tiers	= ReqTemp.CustomerId&#13;
								sStrComplément			= sStrComplément + &amp;quot;Nom Client : &amp;quot; + ReqTemp.NomClient +RC&#13;
								&#13;
							SINON SI ReqTemp.SupplierId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
								TableA2.TypeTiers		= &amp;quot;F&amp;quot;&#13;
								TableA2.IDInterne_Tiers	= ReqTemp.SupplierId&#13;
								sStrComplément			= sStrComplément + &amp;quot;Nom Client : &amp;quot; + ReqTemp.NomFournisseur +RC&#13;
							FIN&#13;
							sStrComplément= sStrComplément +  &amp;quot;------------ COMPLEMENT -----------&amp;quot; + RC &#13;
							SI ReqTemp.AuteurNom &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Auteur : &amp;quot; + ReqTemp.AuteurNom + RC &#13;
							SI ReqTemp.Address_Address1 &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  sStrComplément =  sStrComplément + ReqTemp.Address_Address1 +RC&#13;
							SI ReqTemp.Address_Address2 &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  sStrComplément =  sStrComplément + ReqTemp.Address_Address2 +RC&#13;
							SI ReqTemp.Address_ZipCode &amp;lt;&amp;gt; &amp;quot;&amp;quot; OU ReqTemp.Address_City  &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  sStrComplément =  sStrComplément + ReqTemp.Address_ZipCode + &amp;quot; &amp;quot; + ReqTemp.Address_City +RC&#13;
							SI ReqTemp.Contact_Name &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Contact : &amp;quot; + ReqTemp.Contact_Name + &amp;quot; &amp;quot; + ReqTemp.Contact_FirstName + RC&#13;
							SI ReqTemp.Contact_Phone &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Tel : &amp;quot; + ReqTemp.Contact_Phone +RC&#13;
							SI ReqTemp.Contact_CellPhone &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;GSM : &amp;quot; + ReqTemp.Contact_CellPhone +RC&#13;
							SI ReqTemp.Contact_Email &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;E.Mail : &amp;quot; + ReqTemp.Contact_Email +RC&#13;
							SI ReqTemp.Contact_Function &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Fonction : &amp;quot; + ReqTemp.Contact_Function +RC&#13;
							SI ReqTemp.Contact_Department  &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Service : &amp;quot; + ReqTemp.Contact_Department  +RC&#13;
							&#13;
							TableA2.AuteurNom	= ReqTemp.AuteurNom&#13;
							&#13;
							sStrComplément		= sStrComplément + &amp;quot;------------ RESSOURCES -----------&amp;quot; +  RC&#13;
							sMaReqTemp			= &amp;quot;SELECT Caption, ColleagueId FROM ScheduleEvent Where ParentEventId = &amp;apos;&amp;quot; + ReqTemp.ID + &amp;quot;&amp;apos;&amp;quot;&#13;
							SI HExécuteRequêteSQL(ReqTemp,CnxM,hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
								POUR TOUT ReqTemp &#13;
									&#13;
									sStrComplément = sStrComplément + ReqTemp.caption + &amp;quot; , &amp;quot;&#13;
									&#13;
								FIN&#13;
							FIN&#13;
							TableA2.DescriptionSuite	= sStrComplément&#13;
							TableA2.TypeEvenement		= &amp;quot;PLANNING&amp;quot;&#13;
							&#13;
							&#13;
							HAjoute(TableA2)&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				&#13;
			SINON&#13;
				TableA2.VisiblePlanning	= Vrai&#13;
				TableA2.Libelle			= TableMi.Caption&#13;
				TableA2.Description		= RTFVersTexte(TableMi.Notes)&#13;
				TableA2.Lieu			= TableMi.Address_Address1 + [&amp;quot; &amp;quot;]+ TableMi.Address_Address2 + [&amp;quot; &amp;quot;] + TableMi.Address_ZipCode + [&amp;quot; &amp;quot;] + TableMi.Address_City&#13;
				sStrComplément			= &amp;quot;&amp;quot;&#13;
				SI TableMi.CustomerId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
					TableA2.TypeTiers		= &amp;quot;CP&amp;quot;&#13;
					TableA2.IDInterne_Tiers	= TableMi.CustomerId&#13;
					sStrComplément			= sStrComplément + &amp;quot;Nom Client : &amp;quot; + TableMi.NomClient +RC&#13;
					&#13;
				SINON SI TableMi.SupplierId &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
					TableA2.TypeTiers		= &amp;quot;F&amp;quot;&#13;
					TableA2.IDInterne_Tiers	= TableMi.SupplierId&#13;
					sStrComplément			= sStrComplément + &amp;quot;Nom Client : &amp;quot; + TableMi.NomFournisseur +RC&#13;
				FIN&#13;
				sStrComplément= sStrComplément +  &amp;quot;------------ COMPLEMENT -----------&amp;quot; + RC &#13;
				SI TableMi.AuteurNom &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Auteur : &amp;quot; + TableMi.AuteurNom + RC &#13;
				SI TableMi.Address_Address1 &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  sStrComplément =  sStrComplément + TableMi.Address_Address1 +RC&#13;
				SI TableMi.Address_Address2 &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  sStrComplément =  sStrComplément + TableMi.Address_Address2 +RC&#13;
				SI TableMi.Address_ZipCode &amp;lt;&amp;gt; &amp;quot;&amp;quot; OU TableMi.Address_City  &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  sStrComplément =  sStrComplément + TableMi.Address_ZipCode + &amp;quot; &amp;quot; + TableMi.Address_City +RC&#13;
				SI TableMi.Contact_Name &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Contact : &amp;quot; + TableMi.Contact_Name + &amp;quot; &amp;quot; + TableMi.Contact_FirstName + RC&#13;
				SI TableMi.Contact_Phone &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Tel : &amp;quot; + TableMi.Contact_Phone +RC&#13;
				SI TableMi.Contact_CellPhone &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;GSM : &amp;quot; + TableMi.Contact_CellPhone +RC&#13;
				SI TableMi.Contact_Email &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;E.Mail : &amp;quot; + TableMi.Contact_Email +RC&#13;
				SI TableMi.Contact_Function &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Fonction : &amp;quot; + TableMi.Contact_Function +RC&#13;
				SI TableMi.Contact_Department  &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS sStrComplément =  sStrComplément + &amp;quot;Service : &amp;quot; + TableMi.Contact_Department  +RC&#13;
				&#13;
				TableA2.AuteurNom	= TableMi.AuteurNom&#13;
				sStrComplément		= sStrComplément + &amp;quot;------------ RESSOURCES -----------&amp;quot; +  RC&#13;
				sMaReqTemp			= &amp;quot;SELECT Caption, ColleagueId FROM ScheduleEvent Where ParentEventId = &amp;apos;&amp;quot; + TableMi.ID + &amp;quot;&amp;apos;&amp;quot;&#13;
				SI HExécuteRequêteSQL(ReqTemp,CnxM,hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
					POUR TOUT ReqTemp &#13;
						SI ReqTemp.ColleagueId &amp;lt;&amp;gt; TableMi.ColleagueId ALORS // ne pas traiter si la ressource correspond au parent&#13;
							sStrComplément = sStrComplément + ReqTemp.caption + &amp;quot; , &amp;quot;&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				TableA2.DescriptionSuite		= sStrComplément&#13;
				TableA2.TypeEvenement			= &amp;quot;PLANNING&amp;quot;&#13;
				TableA2.DateHeureDébut			= TableMi.StartDateTime&#13;
				TableA2.DateHeureFin			= TableMi.EndDateTime &#13;
				//TableA2.JournéeEntière= TableMi.&#13;
				//			TableA2.IDInterne_Autre= &#13;
				//			TableA2.TypeAutre= &#13;
				TableA2.IDInterneCollaborateur	= TableMi.ColleagueId&#13;
				TableA2.IdentifiantGoogle		= &amp;quot;&amp;quot;&#13;
				&#13;
				HAjoute(TableA2)&#13;
				&#13;
				&#13;
				&#13;
			FIN&#13;
			&#13;
			&#13;
			&#13;
			&#13;
			&#13;
		FIN&#13;
	FIN&#13;
&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>PRE_CONFIG_MAITRE</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20230714185756291</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
&#13;
&#13;
sNomValeur			est une chaîne ANSI	= &amp;quot;Path&amp;quot;&#13;
&#13;
RccXml				est un xmlDocument	//, description = &amp;quot;MatriceRaccourcisEBP&amp;quot;&#13;
ChemEXE				est une chaîne&#13;
ChemRegistre		est une chaîne&#13;
tabConfDestEBP		est un tableau de 0,2 chaînes&#13;
sStr1				est une chaîne&#13;
sStr2				est une chaîne&#13;
NbL					est un entier&#13;
StrConf				est une chaîne&#13;
&#13;
ApplicationId		est une chaîne&#13;
ApplicationVersion	est une chaîne&#13;
ConnectionString	est une chaîne&#13;
DatabaseId			est une chaîne&#13;
SchemaId			est une chaîne&#13;
providerid			est une chaîne&#13;
data_source			est une chaîne&#13;
database			est une chaîne&#13;
integrated_security	est une chaîne&#13;
user_id				est une chaîne&#13;
encryptedpassword	est une chaîne&#13;
network_library		est une chaîne&#13;
&#13;
&#13;
sSel				est une chaîne		&#13;
&#13;
nBSoftOLT			est un entier&#13;
&#13;
&#13;
&#13;
SI ZoneRépétéeSelect(ZR_Liaison_Externe) &amp;gt; 0 ALORS&#13;
	sSel = ZR_Liaison_Externe[ZR_Liaison_Externe].ATT_Config&#13;
	SI fFichierExiste(sSel) ALORS&#13;
		RccXml = XMLOuvre(sSel,depuisFichier)&#13;
		SI PAS ErreurDétectée ALORS &#13;
			nBSoftOLT = RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut..Occurrence&#13;
&#13;
			POUR N = 1 À nBSoftOLT&#13;
				SI Gauche(XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].SchemaId),4) = &amp;quot;0895&amp;quot; ALORS&#13;
					&#13;
					&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;ApplicationId&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ApplicationId))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;ApplicationVersion&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ApplicationVersion))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;ConnectionString&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ConnectionString))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;DatabaseId&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].DatabaseId))&#13;
					TableauAjouteLigne(tabConfDestEBP,&amp;quot;SchemaId&amp;quot;,XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].SchemaId))&#13;
					StrConf = XMLVersTexte(RccXml.Shortcut.DatabaseShortcuts.DatabaseShortcut[N].ConnectionString)&#13;
					POUR TOUTE CHAÎNE sChaîneExtraite, nRang DE StrConf SÉPARÉE PAR &amp;quot;;&amp;quot;&#13;
						sStr1	= Remplace(SansEspace(ExtraitChaîne(sChaîneExtraite, 1, &amp;quot;=&amp;quot;),sscDroite+sscGauche) ,&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;quot;)&#13;
						sStr2	= Remplace(SansEspace(ExtraitChaîne(sChaîneExtraite, 2, &amp;quot;=&amp;quot;),sscDroite+sscGauche) ,&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;quot;)&#13;
						TableauAjouteLigne(tabConfDestEBP,sStr1,sStr2)&#13;
					FIN&#13;
					NbL = TableauInfo(tabConfDestEBP,tiNombreLignes)&#13;
					POUR l = 1 À NbL&#13;
						//				trace(tabConfDestEBP[l,1])&#13;
						SELON Minuscule(tabConfDestEBP[l,1])&#13;
						&#13;
							CAS Minuscule(&amp;quot;ApplicationId&amp;quot;)&#13;
								ApplicationId = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;ApplicationVersion&amp;quot;)&#13;
								ApplicationVersion = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;ConnectionString&amp;quot;)&#13;
								ConnectionString = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;DatabaseId&amp;quot;)&#13;
								DatabaseId = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;SchemaId&amp;quot;)&#13;
								SchemaId = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;providerid&amp;quot;)&#13;
								providerid = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;data source&amp;quot;)//serveur&#13;
								data_source = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;database&amp;quot;)//BDD&#13;
								database = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;integrated security&amp;quot;)&#13;
								integrated_security = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;user id&amp;quot;)//utilisateur&#13;
								user_id = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;encryptedpassword&amp;quot;)&#13;
								encryptedpassword = tabConfDestEBP[l,2]&#13;
							CAS Minuscule(&amp;quot;network library&amp;quot;)&#13;
								network_library = tabConfDestEBP[l,2]&#13;
								&#13;
								&#13;
							AUTRE CAS&#13;
								&#13;
						FIN&#13;
					FIN&#13;
					ChemRegistre	= &amp;quot;HKEY_LOCAL_MACHINE\SOFTWARE\EBP\Applications\&amp;quot; + ApplicationId +&amp;quot;\&amp;quot; + ApplicationVersion&#13;
					ChemEXE			= Registre64Lit(ChemRegistre,sNomValeur)&#13;
&#13;
					SI ChemEXE &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS ZR_Liaison_Externe[ZR_Liaison_Externe].ATT_Exe = ChemEXE&#13;
					&#13;
					SI data_source &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
						ZR_Connexions[ZR_Liaison_Externe].ATT_Provider	= hOledbSQLServer&#13;
						ZR_Connexions[ZR_Liaison_Externe].ATT_Srv		= data_source&#13;
					FIN&#13;
					SI user_id &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS ZR_Connexions[ZR_Liaison_Externe].ATT_Utilisateur = user_id&#13;
					SI ZR_Connexions[ZR_Liaison_Externe].ATT_MDP = &amp;quot;&amp;quot; ALORS  ZR_Connexions[ZR_Liaison_Externe].ATT_MDP  = &amp;quot;@ebp78EBP&amp;quot;&#13;
					SI database &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS  ZR_Connexions[ZR_Liaison_Externe].ATT_BDD = database&#13;
					ZR_Liaison_Externe[ZR_Liaison_Externe].SAI_User		= &amp;quot;EBPSDK&amp;quot;&#13;
					ZR_Liaison_Externe[ZR_Liaison_Externe].SAI_MDP		= &amp;quot;EBPSDK&amp;quot;&#13;
					&#13;
				FIN&#13;
			FIN&#13;
		SINON&#13;
			Erreur(&amp;quot;Erreur d&amp;apos;ouverture du raccourcis EBP&amp;quot;)&#13;
		FIN&#13;
		&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>SYNCGOOGLEAGENDA</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20240131073511028</Version>
      <CnxSource>1</CnxSource>
      <Requete>PROCÉDURE MoiMême(sdTableMLocal est Source de Données)&#13;
&#13;
&#13;
&#13;
//30/10/2023  14:10 SYnchro de la table GoogleAgenda vers Google&#13;
TableA2i										est une Source de Données&#13;
tabPlanningASync								est un tableau de 0,4 chaîne &#13;
nNbPlanningASync								est un entier&#13;
dhDateDébutRec									est une DateHeure	= EntierVersDate(DateVersEntier(DateSys) - 10) &#13;
dhDateFinRec									est une DateHeure	= EntierVersDate(DateVersEntier(DateSys) + 90) &#13;
MonEvénement									est un gglEvénement&#13;
nNbAgendaDispo									est un entier &#13;
Nb est  un entier&#13;
L												est un entier&#13;
NbjHisto										est un entier&#13;
NbTemp											est une chaîne&#13;
IdSalarie, IdAgenda								est une chaîne&#13;
sToken											est une chaîne&#13;
&#13;
bufDésérialise									est un Buffer&#13;
MonToken										est un AuthToken&#13;
sDHD											est une chaîne&#13;
sDHF											est une chaîne&#13;
sIsErreur										est une chaîne&#13;
nNbrEvents										est un entier&#13;
TabEventsAgenda									est un tableau de 0 par 5 chaînes&#13;
tabTableauCalendrier							est un tableau de 0 par 2 chaînes&#13;
&#13;
dhNewDateDebut									est une DateHeure&#13;
dhNewDateFin									est une DateHeure&#13;
sDateDébutRec									est une chaîne&#13;
sDateFinRec										est une chaîne&#13;
sTitreEvent										est une chaîne&#13;
sContenuEvent									est une chaîne	//HTMLVersTexte  &#13;
sLieuEvent										est une chaîne&#13;
sErreurEcriture									est une chaîne&#13;
&#13;
&#13;
&#13;
NbTemp	= gConfigXML.Connexion.Donnees_A_Synchroniser.Donnee..Occurrence&#13;
POUR x = 1 _À_ NbTemp &#13;
	SI XMLVersTexte(gConfigXML.Connexion.Donnees_A_Synchroniser.Donnee[x].Reference) = &amp;quot;SyncGoogleAgenda&amp;quot; ALORS&#13;
		NbjHisto		= Val(XMLVersTexte(gConfigXML.Connexion.Donnees_A_Synchroniser.Donnee[x].Histo))&#13;
		dhDateFinRec	= EntierVersDate(DateVersEntier(DateSys()) + NbjHisto)&#13;
	FIN&#13;
FIN&#13;
&#13;
HAnnuleDéclaration(TableA2i) &#13;
SI HDéclareExterne(gsRepTemp + [fSep] +  &amp;quot;googleagenda.fic&amp;quot;,TableA2i) ALORS&#13;
	SI gbModeDebug   ALORS   		&#13;
		dbgAssertion(Faux,&amp;quot;DéclareExterne googleagenda.fic&amp;quot;)&#13;
	FIN&#13;
	//Recuperer les idSalariés et les idAgendas**********************************************************************&#13;
	Nb																= gConfigXML.Connexion.Liaisons_Externes.Agenda.Correspondances.Correspondance..Occurrence&#13;
	POUR i = 1 À Nb&#13;
		IdSalarie	= gConfigXML.Connexion.Liaisons_Externes.Agenda.Correspondances.Correspondance[i].ID_Salarie&#13;
		IdAgenda	= gConfigXML.Connexion.Liaisons_Externes.Agenda.Correspondances.Correspondance[i].ID_Agenda&#13;
		SI IdSalarie &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET IdAgenda &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET IdSalarie &amp;lt;&amp;gt; &amp;quot;-1&amp;quot; ET IdAgenda&amp;lt;&amp;gt;&amp;quot;-1&amp;quot; ALORS&#13;
			TableauAjouteLigne(tabPlanningASync,IdSalarie,IdAgenda)&#13;
		FIN&#13;
	FIN&#13;
	&#13;
	&#13;
	nNbPlanningASync = TableauInfo(tabPlanningASync,tiNombreLignes)&#13;
	SI  gbModeDebug        ALORS &#13;
		dbgAssertion(Faux,nNbPlanningASync + &amp;quot; Planning à synchroniser&amp;quot;)&#13;
	FIN&#13;
	sToken=gConfigXML.Connexion.Liaisons_Externes.Agenda.Token.Valeur&#13;
	&#13;
	&#13;
	SI  sToken&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS &#13;
		bufDésérialise				= Décode(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Agenda.Token.Valeur),encodeBASE64)&#13;
		Désérialise(MonToken, bufDésérialise, psdXML) &#13;
		MonToken = MonToken.RenouvelleToken()&#13;
		SI MonToken..Valide ALORS&#13;
			SI gbModeDebug   ALORS &#13;
				dbgAssertion(Faux,&amp;quot;Connexion à gglServiceAgenda &amp;quot;)&#13;
			FIN&#13;
			&#13;
			tabTableauCalendrier	= ListerAgendaGoogle(MonToken)&#13;
			nNbAgendaDispo			= TableauInfo (tabTableauCalendrier,tiNombreLignes)&#13;
			POUR I = 1 À nNbAgendaDispo&#13;
				&#13;
				L = TableauCherche(tabPlanningASync,tcLinéaire,&amp;quot;2&amp;quot;,tabTableauCalendrier[I,1])&#13;
				SI L &amp;gt; 0 ALORS&#13;
					IdAgenda=tabTableauCalendrier[I,1]&#13;
					SI gbModeDebug   ALORS &#13;
						dbgAssertion(Faux,&amp;quot;Traitement agenda &amp;quot; +tabTableauCalendrier[I,2])&#13;
					FIN&#13;
					&#13;
					SI IdAgenda&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
						dhDateDébutRec			= DateHeureLocaleVersUTC(dhDateDébutRec)&#13;
						dhDateFinRec			= DateHeureLocaleVersUTC(dhDateFinRec)&#13;
						sDHD					= DateVersChaîne(dhDateDébutRec..PartieDate,&amp;quot;AAAA-MM-JJ&amp;quot;)+&amp;quot;T&amp;quot;+HeureVersChaîne(dhDateDébutRec..PartieHeure,&amp;quot;HH:MM:SS&amp;quot;)+&amp;quot;Z&amp;quot;	//&amp;quot;T18:00:00&amp;quot;&#13;
						sDHF					= DateVersChaîne(dhDateFinRec..PartieDate,&amp;quot;AAAA-MM-JJ&amp;quot;)+&amp;quot;T&amp;quot;+HeureVersChaîne(dhDateFinRec..PartieHeure,&amp;quot;HH:MM:SS&amp;quot;)+&amp;quot;Z&amp;quot;					//&amp;quot;T19:00:00&amp;quot;&#13;
						(TabEventsAgenda,sIsErreur)=ListeEventsAgenda(MonToken,IdAgenda,sDHD,sDHF)&#13;
						&#13;
						SI TableauOccurrence(TabEventsAgenda)&amp;gt;0 ET sIsErreur=&amp;quot;&amp;quot; ET PAS ErreurDétectée ALORS&#13;
							nNbrEvents=TableauOccurrence(TabEventsAgenda)&#13;
							POUR ik=1 À nNbrEvents&#13;
								sContenuEvent=TabEventsAgenda[ik][3]&#13;
								SI Position(sContenuEvent,&amp;quot;[&amp;quot;+ gjsSerial.IDSynchro +&amp;quot;=&amp;quot;,1) &amp;gt; 0 ALORS&#13;
									sIsErreur		= SupprimerEvent(MonToken ,TabEventsAgenda[ik][1],IdAgenda)&#13;
									SI sIsErreur&amp;lt;&amp;gt;&amp;quot;&amp;quot;&#13;
										SI gbModeDebug   ALORS &#13;
											dbgAssertion(Faux,&amp;quot;Ereur de traitement de l&amp;apos;evenement &amp;quot;+ TabEventsAgenda[ik][1] + &amp;quot;: &amp;quot; + sIsErreur   )&#13;
										FIN                                    &#13;
									FIN    &#13;
								FIN&#13;
							FIN&#13;
						SINON&#13;
							SI gbModeDebug   ALORS &#13;
								dbgAssertion(Faux,&amp;quot;Connexion à gglServiceAgenda &amp;quot;)&#13;
							FIN&#13;
						FIN&#13;
					SINON&#13;
						SI gbModeDebug   ALORS &#13;
							dbgAssertion(Faux,&amp;quot;Erreur: Identifiant agenda non valide non valide!&amp;quot;   )&#13;
						FIN &#13;
					FIN&#13;
					&#13;
					//Fin lecture agenda&#13;
					SI gbModeDebug   ALORS &#13;
						dbgAssertion(Faux,&amp;quot;Fin de suppression des anciens RDV Nuxi &amp;quot; + tabTableauCalendrier[I,2])&#13;
					FIN&#13;
					&#13;
					//Lecture de la table Google NuxiDev&#13;
					POUR TOUT TableA2i AVEC &amp;quot;IDInterneCollaborateur = &amp;apos;&amp;quot; + tabPlanningASync[L,1] + &amp;quot;&amp;apos;  ET identifiantGoogle = &amp;apos;&amp;apos; And  VisiblePlanning = 1 &amp;quot;  //sur &amp;quot;GoogleAgenda.DateHeureDébut&amp;quot; //&#13;
						&#13;
						SI DateHeureValide(TableA2i.DateHeureDébut) OU DateHeureValide(TableA2i.DateHeureFin) ALORS&#13;
							SI TableA2i.DateHeureDébut &amp;gt; dhDateDébutRec ET TableA2i.DateHeureFin &amp;lt; dhDateFinRec ALORS&#13;
								SI DateHeureValide(TableA2i.DateHeureDébut) ALORS&#13;
									dhNewDateDebut =TableA2i.DateHeureDébut&#13;
								SINON&#13;
									SI DateHeureValide(TableA2i.DateHeureFin) ALORS&#13;
										dhNewDateDebut = TableA2i.DateHeureFin&#13;
									FIN&#13;
								FIN&#13;
								SI DateHeureValide(TableA2i.DateHeureFin) ALORS&#13;
									dhNewDateFin = TableA2i.DateHeureFin&#13;
								SINON&#13;
									SI DateHeureValide(TableA2i.DateHeureDébut) ALORS&#13;
										dhNewDateFin = TableA2i.DateHeureDébut&#13;
									FIN&#13;
								FIN&#13;
								sDateDébutRec					= DateVersChaîne(dhNewDateDebut..PartieDate,&amp;quot;AAAA-MM-JJ&amp;quot;)+&amp;quot;T&amp;quot;+HeureVersChaîne(dhNewDateDebut..PartieHeure,&amp;quot;HH:MM:SS&amp;quot;)+&amp;quot;Z&amp;quot;	//&amp;quot;T18:00:00&amp;quot;&#13;
								sDateFinRec						= DateVersChaîne(dhNewDateFin..PartieDate,&amp;quot;AAAA-MM-JJ&amp;quot;)+&amp;quot;T&amp;quot;+HeureVersChaîne(dhNewDateFin..PartieHeure,&amp;quot;HH:MM:SS&amp;quot;)+&amp;quot;Z&amp;quot;					//&amp;quot;T19:00:00&amp;quot;&#13;
&#13;
								sTitreEvent						= (Gauche((TableA2i.Libelle),150))&#13;
								sContenuEvent					= TexteVersHTML(Gauche((TableA2i.Description),400) + RC + Gauche((TableA2i.DescriptionSuite),400) + RC + &amp;quot;-------- NE PAS EFFACER LES LIGNES CI-DESSOUS -------- &amp;quot; + RC + RC + &amp;quot;[&amp;quot;+ gjsSerial.IDSynchro +&amp;quot;=&amp;quot; + (TableA2i.IDInterne) + &amp;quot;]&amp;quot;)  &#13;
								sLieuEvent						= (Gauche((TableA2i.Lieu),300))&#13;
								sErreurEcriture					= sErreurEcriture + AjouterEvent(MonToken,IdAgenda,sDateDébutRec,sDateFinRec,sTitreEvent,sContenuEvent,sLieuEvent) +RC&#13;
							FIN&#13;
						FIN&#13;
					FIN&#13;
					//Fin Lecture table Google&#13;
					SI sErreurEcriture&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
						SI gbModeDebug   ALORS &#13;
							dbgAssertion(Faux,&amp;quot;Ecriture OK dans Google &amp;quot; + tabTableauCalendrier[I,2] + &amp;quot; &amp;quot; )&#13;
						FIN&#13;
					SINON&#13;
						SI gbModeDebug   ALORS &#13;
							dbgAssertion(Faux,&amp;quot;Erreur d&amp;apos;écriture dans Google &amp;quot; + tabTableauCalendrier[I,2] + &amp;quot; &amp;quot; + ErreurInfo())&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
		SINON&#13;
			SI gbModeDebug   ALORS &#13;
				dbgAssertion(Faux,&amp;quot;Erreur de Connexion à gglServiceAgenda &amp;quot; + ErreurInfo())&#13;
			FIN&#13;
		FIN&#13;
		&#13;
	FIN&#13;
FIN&#13;
&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CMB_SALARIES</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240202111240416</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Colleague.sysCreatedDate AS DateCreation , &#13;
Colleague.sysModifiedDate AS DateModification , &#13;
Colleague.Id AS IDInterne , &#13;
Colleague.Id AS Code , &#13;
Colleague.Contact_Name AS Nom , &#13;
Colleague.Contact_FirstName AS Prenom , &#13;
Colleague.GeographicSector as IDInerne_SecteurGeo ,&#13;
Colleague.SalePriceVatExcluded AS PrixVente, &#13;
&#13;
Colleague.Contact_ColleagueFunction AS Fonction_Qualif&#13;
&#13;
FROM Colleague &#13;
WHERE &#13;
Colleague.ActiveState = 0 And Colleague.IsSalesperson = 1</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CMB_STOCK_DEPOT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240202111313777</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Storehouse.sysCreatedDate AS DateCreation , &#13;
Storehouse.sysModifiedDate AS DateModification , &#13;
Storehouse.Id AS IDInterne, &#13;
Storehouse.Id AS Code , &#13;
Storehouse.Caption AS Libelle, &#13;
&amp;apos;Depot&amp;apos; AS TypeNomenclature&#13;
 &#13;
FROM Storehouse</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CMB_TECHNICIENS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240202111350664</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Colleague.Id  AS IDInterne, &#13;
Colleague.Id AS Code, &#13;
CAST(Colleague.Contact_Name AS VARCHAR) AS Nom, &#13;
CAST(Colleague.Contact_FirstName AS VARCHAR) AS Prenom, &#13;
&amp;apos;T&amp;apos; AS Type, &#13;
Colleague.GeographicSector AS IDInerne_SecteurGeo ,&#13;
Colleague.SalePriceVatExcluded AS PrixVente, &#13;
&#13;
Colleague.Contact_ColleagueFunction AS Fonction_Qualif&#13;
&#13;
&#13;
&#13;
&#13;
FROM Colleague &#13;
WHERE &#13;
Colleague.ActiveState = 0 And Colleague.IsSalesperson = 0</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>DOCUMENTLIGNE-FACTURE-SUP</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155739984</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
SaleDocument.DocumentType, &#13;
SaleDocument.DocumentDate, &#13;
&amp;apos;FACT&amp;apos; AS TypeDocument, &#13;
SaleDocumentLine.sysCreatedDate AS DateCreation , &#13;
SaleDocumentLine.sysModifiedDate AS DateModification , &#13;
SaleDocumentLine.Id AS Code , &#13;
SaleDocumentLine.ParentLineId AS RefNiveauPere, &#13;
SaleDocumentLine.Id AS IDInterne , &#13;
SaleDocumentLine.DocumentId AS IDInterneDocument , &#13;
SaleDocumentLine.LineOrder AS NumeroLigne , &#13;
SaleDocumentLine.ItemId AS CodeArticle , &#13;
SaleDocumentLine.ItemId AS IDInerneArticle , &#13;
SaleDocumentLine.Quantity AS Quantité , &#13;
SaleDocumentLine.DescriptionClear AS Designation , &#13;
SaleDocumentLine.UnitId AS IDInerneUnite , &#13;
SaleDocumentLine.TotalVolume AS VolumeTotal , &#13;
SaleDocumentLine.TotalWeight AS PoidsTotal , &#13;
SaleDocumentLine.VolumeUnitId AS IDInerneUnite_Volume, &#13;
SaleDocumentLine.WeightUnitId AS IDInerneUnite_Poids, &#13;
SaleDocumentLine.PurchasePrice AS PrixAchat , &#13;
SaleDocumentLine.TrackingNumber AS SerieLotNumero , &#13;
SaleDocumentLine.LimitDate AS SerieLotDateLimite , &#13;
SaleDocumentLine.HasTrackingDispatch AS SerieLotQuantite, &#13;
SaleDocumentLine.CostPrice AS PrixRevient , &#13;
SaleDocumentLine.UnitDiscountRate AS PrcRemise , &#13;
SaleDocumentLine.UnitDiscountAmountVatExcluded AS MontantRemise, &#13;
SaleDocumentLine.salePriceVatExcluded  AS PrixVenteBrutHT  ,&#13;
SaleDocumentLine.NetAmountVatExcludedWithDiscount AS MontantNetHT, &#13;
SaleDocumentLine.UnitEcotaxAmountVatExcluded AS MontantEcoTaxeHT , &#13;
SaleDocumentLine.UnitEcotaxAmountVatIncluded  AS MontantEcoTaxeTTC , &#13;
SaleDocumentLine.VatAmount AS MontantTva , &#13;
SaleDocumentLine.OrderedQuantity AS QuantitéCommandée , &#13;
SaleDocumentLine.DeliveredQuantity AS QuantitéLIvrée , &#13;
SaleDocumentLine.RemainingQuantityToDeliver AS Reliquat ,&#13;
SaleDocumentLine.NetAmountVatIncludedWithDiscount AS MontantNetTTC, &#13;
SaleDocumentLine.DealId AS IDInterne_Affaire ,&#13;
SaleDocumentLine.VatId AS idinterneTVA ,&#13;
(SaleDocumentLine.NomenclatureLevel + 1) AS Niveau, &#13;
SaleDocumentLine.Id AS RefNiveauHierarchie, &#13;
&amp;apos;0&amp;apos; AS ValoriserLieCompose, &#13;
&amp;apos;0&amp;apos; AS QuantifierLieCompose, &#13;
CASE &#13;
WHEN SaleDocumentLine.NomenclatureLevel &amp;gt; 0 THEN &amp;apos;1&amp;apos;&#13;
ELSE&#13;
&amp;apos;0&amp;apos;&#13;
END AS Composant, &#13;
 (select Vat.Rate From Vat Where Vat.Id  = SaleDocumentLine.VatId)  AS TauxTVA ,&#13;
SaleDocumentLine.Weight AS PoidsUnitaire &#13;
&#13;
FROM SaleDocument, SaleDocumentLine &#13;
&#13;
&#13;
WHERE &#13;
SaleDocumentLine.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
 SaleDocument.Id  = SaleDocumentLine.DocumentId AND&#13;
DocumentType = -99&#13;
/*Condition à remplacer pour avoir les lignes en 2 requettes&#13;
DocumentType &amp;gt;= 2 And  DocumentType &amp;lt;= 5 And DATEDIFF(day,SaleDocument.DocumentDate, GetDate()) &amp;gt; (%2 / 2) And DATEDIFF(day,SaleDocument.DocumentDate, GetDate()) &amp;lt;= %2&#13;
*/</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>LIAISONS_AFFAIRES_INTERVENANTS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152256514</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT&#13;
Deal.Id + &amp;apos;|&amp;apos;+ DealColleague.ColleagueId AS IDInterne, &#13;
Deal.Id + &amp;apos;|&amp;apos;+ DealColleague.ColleagueId AS Code,&#13;
Deal.Id as IDInterne1, &#13;
&amp;apos;Affaire&amp;apos; AS Table1, &#13;
DealColleague.ColleagueId AS IDInterne2, &#13;
&amp;apos;Collaborateur&amp;apos; AS Table2, &#13;
DealColleague.LastName AS Libelle&#13;
&#13;
FROM Deal , DealColleague&#13;
WHERE &#13;
DealColleague.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
DealColleague.DealId = Deal.Id AND&#13;
(Deal.DealState &amp;lt;&amp;gt; 2 and Deal.DealState &amp;lt;&amp;gt; 3 And &#13;
DATEDIFF(day,Deal.DealDate, GetDate()) &amp;lt;= %2)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>LIAISONS_CHANTIERS_INTERVENANTS</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113152716627</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT&#13;
ConstructionSite.Id  + &amp;apos;|&amp;apos;+ DealColleague.ColleagueId AS IDInterne, &#13;
ConstructionSite.Id  + &amp;apos;|&amp;apos;+ DealColleague.ColleagueId AS Code,&#13;
ConstructionSite.Id  AS IDInterne1, &#13;
&amp;apos;Chantier&amp;apos; AS Table1, &#13;
DealColleague.ColleagueId AS IDInterne2, &#13;
&amp;apos;Collaborateur&amp;apos; AS Table2, &#13;
DealColleague.LastName AS Libelle&#13;
&#13;
FROM ConstructionSite , DealColleague&#13;
WHERE &#13;
ConstructionSite.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
ConstructionSite.Id = DealColleague.ConstructionSiteId AND&#13;
ConstructionSite.Status &amp;lt;&amp;gt; 0 and ConstructionSite.Status &amp;lt;&amp;gt; 4</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_APPAREIL</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241113155912317</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
CustomerProductAssociatedFiles.sysCreatedDate AS DateCreation, &#13;
CustomerProductAssociatedFiles.sysModifiedDate AS DateModification, &#13;
CustomerProductAssociatedFiles.Id AS IDInterne, &#13;
CustomerProductAssociatedFiles.Id AS Code, &#13;
CustomerProductAssociatedFiles.ParentId AS IDInterne_Table_Externe, &#13;
CustomerProductAssociatedFiles.Name AS NomDocument, &#13;
CustomerProductAssociatedFiles.OneDriveShareUrl AS LienPublic, &#13;
CustomerProductAssociatedFiles.OneDriveItemId AS IDDocPublic,&#13;
&amp;apos;Appareil&amp;apos; as Table_Externe&#13;
&#13;
FROM CustomerProductAssociatedFiles, CustomerProduct , Customer&#13;
&#13;
&#13;
WHERE &#13;
CustomerProductAssociatedFiles.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
CustomerProduct.ActiveState = 0 AND Customer.Id  = CustomerProduct.CustomerId AND Customer.ActiveState = 0 and  ((FamilyId NOT IN (%7) or FamilyId is Null) and (SubFamilyId NOT IN (%7) or SubFamilyId is Null)) AND&#13;
CustomerProductAssociatedFiles.ParentId = CustomerProduct.Id AND&#13;
CustomerProductAssociatedFiles.OneDriveShareUrl &amp;lt;&amp;gt; &amp;apos;&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_APPAREILS</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250206160712196</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
[appareils_nuxi.FIC].Date_Creation  AS DateCreation, &#13;
[appareils_nuxi.FIC].Date_Modification  AS DateModification, &#13;
[appareils_nuxi.FIC].IDInterne  AS IDInterne, &#13;
[appareils_nuxi.FIC].Code  AS Code, &#13;
[appareils_nuxi.FIC].IDInterneArticle  AS IDInterne_article, &#13;
&amp;apos;&amp;apos;AS CodeArticle, &#13;
[appareils_nuxi.FIC].NumSerie  AS NumSerie, &#13;
&#13;
[appareils_nuxi.FIC].IDInterneClient  AS IDInterne_Tiers, &#13;
[appareils_nuxi.FIC].Code_Client AS CodeTiers, &#13;
[appareils_nuxi.FIC].Libelle  AS Libelle, &#13;
[appareils_nuxi.FIC].DateDebutMO  AS GtieMODébut, &#13;
[appareils_nuxi.FIC].DateFinMO AS GtieMOFin, &#13;
[appareils_nuxi.FIC].DateDebutFournitures  AS GtiePieceDébut, &#13;
[appareils_nuxi.FIC].DateFinFournitures  AS GtiePieceFin, &#13;
[appareils_nuxi.FIC].DateDebutDeplacement  AS GtieDeplDébut, &#13;
[appareils_nuxi.FIC].DateFinDeplacement AS GtieDeplFin, &#13;
[appareils_nuxi.FIC].Description  AS Description ,&#13;
&#13;
[appareils_nuxi.FIC].Adresse1 AS Adresse1,&#13;
[appareils_nuxi.FIC].Adresse2 AS Adresse2,&#13;
[appareils_nuxi.FIC].CP AS CP,&#13;
[appareils_nuxi.FIC].Ville AS Ville,&#13;
[appareils_nuxi.FIC].Nom_Client AS Nom_Client&#13;
&#13;
&#13;
%5&#13;
&#13;
FROM [appareils_nuxi.FIC]&#13;
WHERE &#13;
[appareils_nuxi.FIC].Actif =1</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20241217135451180</Version>
      <CnxSource>3</CnxSource>
      <Requete>PROCÉDURE MoiMême(sdTableDest est une source de données)&#13;
&#13;
//Date: 17/12/2025 15:00&#13;
sSql			est une chaîne&#13;
duDur			est une Durée&#13;
sChantOrAff		est une chaîne&#13;
sdTableSource	est une Source de Données&#13;
&#13;
&#13;
//déclarer fichiers externes&#13;
HAnnuleDéclaration(&amp;quot;tiers&amp;quot;)&#13;
HAnnuleDéclaration(&amp;quot;Chantiers&amp;quot;)&#13;
HAnnuleDéclaration(&amp;quot;Affaires&amp;quot;)&#13;
HDéclareExterne(gsRepTemp + [fSep] + &amp;quot;tiers.fic&amp;quot;,&amp;quot;tiers&amp;quot;)&#13;
HDéclareExterne(gsRepTemp + [fSep] + &amp;quot;chantier.fic&amp;quot;,&amp;quot;Chantiers&amp;quot;)&#13;
HDéclareExterne(gsRepTemp + [fSep] + &amp;quot;affaire.fic&amp;quot;,&amp;quot;Affaires&amp;quot;)&#13;
&#13;
&#13;
sSql=[&#13;
	SELECT &#13;
	[interventions_details_nuxi.fic].IDInterne  AS IDInterne, &#13;
	[interventions_nuxi.FIC].Code  AS Code, &#13;
	[interventions_details_nuxi.fic].DateIntervention  AS DateDoc, &#13;
	&amp;apos;BI&amp;apos; AS TypeDocument, &#13;
	[interventions_details_nuxi.fic].Notes AS Note, &#13;
	[interventions_details_nuxi.fic].DH_DebutInter  AS DebutLe, &#13;
	[interventions_details_nuxi.fic].DH_FinInter AS  FinLe,  &#13;
	[interventions_details_nuxi.fic].Libelle AS Libelle, &#13;
	[interventions_details_nuxi.fic].Statut AS Etat_Libelle, &#13;
	[interventions_details_nuxi.fic].Statut AS IDInterne_Etat,&#13;
	[interventions_details_nuxi.fic].Interlocuteur   AS Interlocuteur, &#13;
	[interventions_details_nuxi.fic].Adresse1 AS Adresse1, &#13;
	[interventions_details_nuxi.fic].Adresse2  Adresse2, &#13;
	[interventions_details_nuxi.fic].CP AS CP, &#13;
	[interventions_details_nuxi.fic].Ville AS Ville, &#13;
	[interventions_details_nuxi.fic].IDInternePays AS IDInterne_Pays, &#13;
	[interventions_details_nuxi.fic].Pays as Pays, &#13;
	[interventions_details_nuxi.fic].NomClient AS Nom, &#13;
	[interventions_details_nuxi.fic].Longitude AS Longitude, &#13;
	[interventions_details_nuxi.fic].Latitude  AS Latitude, &#13;
	[interventions_details_nuxi.fic].Telephone AS Tel, &#13;
	[interventions_details_nuxi.fic].Mobile AS GSM, &#13;
	[interventions_details_nuxi.fic].Email AS Mail, &#13;
	[interventions_details_nuxi.fic].IDInterneClient AS IDInterne_Tiers, &#13;
	[interventions_details_nuxi.fic].CodeClient AS Code_Tiers, &#13;
	[interventions_details_nuxi.fic].Description AS Symptome, &#13;
	[interventions_details_nuxi.fic].Rapport AS Description, &#13;
	[interventions_details_nuxi.fic].IDInterneContrat AS iDInterne_Contrat, &#13;
	[contrats_nuxi.FIC].Code AS Code_Contrat,&#13;
	[interventions_details_nuxi.fic].IDInterneFraisDeplacement  AS IDInterne_Déplacement, &#13;
	[interventions_details_nuxi.fic].IDInterneIncident AS IDInterne_Incident, &#13;
	[interventions_details_nuxi.fic].IDInterneFraisDeplacement  AS IDInterne_Déplacement, &#13;
	[interventions_details_nuxi.fic].InfoDocExterne AS IDInterne_DocumentVte,&#13;
	[interventions_details_nuxi.fic].Kilometrage AS Kilometrage, &#13;
	[interventions_details_nuxi.fic].MontantFD_HT AS MontantFrais, &#13;
	[interventions_details_nuxi.fic].IDInterntTVAFraisDeplacement AS IDInterneTVA_Frais,&#13;
	[interventions_details_nuxi.fic].TauxTva_FD  AS TauxTVAFrais, &#13;
	[interventions_details_nuxi.fic].montant_ht AS TotalHT, &#13;
	[interventions_details_nuxi.fic].Non_Modifiable as NonModifiable, &#13;
	[interventions_details_nuxi.fic].Duree  AS DuréeInterv,&#13;
	[interventions_details_nuxi.fic].IDInterneAffaire AS IDInterne_Affaire,&#13;
	[interventions_details_nuxi.fic].IdInterne_EtatSupp AS IDInterne_Categorie,&#13;
	&amp;apos;&amp;apos; AS Facturation_Pays, &#13;
	&amp;apos;&amp;apos; AS Facturation_Nom,&#13;
	&amp;apos;&amp;apos; AS Facturation_Adresse1, &#13;
	&amp;apos;&amp;apos;  AS Facturation_Adresse2, &#13;
	&amp;apos;&amp;apos; AS Facturation_CP, &#13;
	&amp;apos;&amp;apos; AS Facturation_Ville, &#13;
	&amp;apos;&amp;apos; AS facturation_tel, &#13;
	&amp;apos;&amp;apos; AS Facturation_Mail, &#13;
	&amp;apos;&amp;apos; AS Facturation_Interloc, &#13;
	&amp;apos;&amp;apos;  AS Facturation_GSM, &#13;
	&amp;apos;&amp;apos; AS Facturation_IDInternePays&#13;
	&#13;
	FROM [interventions_details_nuxi.fic] INNER JOIN [interventions_nuxi.FIC] ON [interventions_details_nuxi.fic].IDInterneIntervention = [interventions_nuxi.fic].IDInterne &#13;
	LEFT OUTER JOIN [contrats_nuxi.FIC] ON [contrats_nuxi.fic].IDInterne=[interventions_details_nuxi.FIC].IDInterneContrat&#13;
	&#13;
	WHERE &#13;
	[interventions_nuxi.fic].Type = 0 And TypeModule=&amp;apos;Int&amp;apos; AND&#13;
	[interventions_details_nuxi.fic].IDInterneIntervention = [interventions_nuxi.fic].IDInterne &#13;
	AND [interventions_details_nuxi.fic].DateIntervention&amp;lt;&amp;gt;&amp;apos;&amp;apos;&#13;
]&#13;
&#13;
SI HExécuteRequêteSQL(sdTableSource,CnxBDDSrc[3],hRequêteSansCorrection,sSql) ALORS&#13;
	HLitPremier(sdTableSource)&#13;
	TANTQUE PAS HEnDehors(sdTableSource)&#13;
		SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(sdTableDest, &amp;quot;IDInterne&amp;quot;,sdTableSource.IDInterne,hIdentique ) ALORS&#13;
			HRAZ(sdTableDest)&#13;
		FIN&#13;
		sdTableDest.IDInterne							= sdTableSource.IDInterne&#13;
		sdTableDest.Code								= sdTableSource.Code&#13;
		sdTableDest.TypeDocument						= &amp;quot;BI&amp;quot;&#13;
		sdTableDest.IDInterne_BI						= sdTableSource.IDInterne&#13;
		sdTableDest.Code_BI								= sdTableSource.Code&#13;
		sdTableDest.Libelle								= sdTableSource.Libelle&#13;
		sdTableDest.DateDoc								= sdTableSource.DateDoc&#13;
		sdTableDest.Note								= sdTableSource.Note&#13;
		sdTableDest.DebutLe								= sdTableSource.DebutLe&#13;
		sdTableDest.FinLe								= sdTableSource.FinLe&#13;
		sdTableDest.Etat_Libelle						= sdTableSource.Etat_Libelle&#13;
		sdTableDest.IDInterne_Etat						= sdTableSource.IDInterne_Etat&#13;
		sdTableDest.Interlocuteur						= sdTableSource.Interlocuteur&#13;
		sdTableDest.Latitude							= sdTableSource.Latitude&#13;
		sdTableDest.Longitude							= sdTableSource.Longitude&#13;
		sdTableDest.Adresse1							= sdTableSource.Adresse1&#13;
		sdTableDest.Adresse2							= sdTableSource.Adresse2&#13;
		sdTableDest.CP									= sdTableSource.CP&#13;
		sdTableDest.Ville								= sdTableSource.Ville&#13;
		sdTableDest.IDInterne_Pays						= sdTableSource.IDInterne_Pays&#13;
		sdTableDest.Pays								= sdTableSource.Pays&#13;
		sdTableDest.Tel									= sdTableSource.Tel&#13;
		sdTableDest.GSM									= sdTableSource.GSM&#13;
		sdTableDest.Mail								= sdTableSource.Mail&#13;
		sdTableDest.IDInterne_Déplacement				= sdTableSource.IDInterne_Déplacement&#13;
		sdTableDest.iDInterne_Contrat					= sdTableSource.iDInterne_Contrat&#13;
		sdTableDest.Code_Contrat						= sdTableSource.Code_Contrat&#13;
		sdTableDest.IDInterne_Tiers						= sdTableSource.IDInterne_Tiers&#13;
		sdTableDest.Code_Tiers							= sdTableSource.Code_Tiers&#13;
		sdTableDest.Nom									= sdTableSource.Nom&#13;
		sdTableDest.Kilometrage							= sdTableSource.Kilometrage&#13;
		sdTableDest.Description							= sdTableSource.Description&#13;
		sdTableDest.Symptome							= sdTableSource.Symptome&#13;
		sdTableDest.MontantFrais						= sdTableSource.MontantFrais&#13;
		sdTableDest.IDInterneTVA_Frais					= sdTableSource.IDInterneTVA_Frais&#13;
		sdTableDest.TauxTVAFrais						= sdTableSource.TauxTVAFrais&#13;
		sdTableDest.TotalHT								= sdTableSource.TotalHT&#13;
		sdTableDest.IDInterne_Incident					= sdTableSource.IDInterne_Incident&#13;
		sdTableDest.NonModifiable						= sdTableSource.NonModifiable&#13;
		sdTableDest.IDInterne_Categorie					= sdTableSource.IDInterne_Categorie&#13;
		//La durée&#13;
		&#13;
		duDur											= sdTableSource.DuréeInterv&#13;
		sdTableDest.DuréeInterv							= duDur..EnHeures	&#13;
		&#13;
		sChantOrAff										= ExtraitChaîne(sdTableSource.IDInterne_Affaire,1,&amp;quot;|&amp;quot;)&#13;
		SI sChantOrAff&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
			SI  sChantOrAff=&amp;quot;Aff&amp;quot; ALORS&#13;
				sdTableDest.IDInterne_Affaire	 = ExtraitChaîne(sdTableSource.IDInterne_Affaire,2,&amp;quot;|&amp;quot;)&#13;
				SI HLitRecherche(&amp;quot;Affaires&amp;quot;,&amp;quot;IDInterne&amp;quot;,sdTableSource.IDInterne_Affaire,hIdentique) ALORS&#13;
					sdTableDest.Code_Affaire					={&amp;quot;Affaires.Code&amp;quot;,indRubrique} &#13;
				FIN&#13;
			SINON&#13;
				sdTableDest.IDInterne_Chantier			= ExtraitChaîne(sdTableSource.IDInterne_Affaire,2,&amp;quot;|&amp;quot;)&#13;
				SI HLitRecherche(&amp;quot;Chantiers&amp;quot;,&amp;quot;IDInterne&amp;quot;,sdTableDest.IDInterne_Affaire,hIdentique) ALORS&#13;
					sdTableDest.Code_Chantier					= {&amp;quot;Chantiers.Code&amp;quot;,indRubrique} &#13;
				FIN&#13;
			FIN&#13;
		SINON&#13;
			sdTableDest.IDInterne_Affaire				= &amp;quot;&amp;quot;&#13;
			sdTableDest.IDInterne_Chantier				= &amp;quot;&amp;quot;&#13;
			sdTableDest.Code_Affaire					= &amp;quot;&amp;quot;&#13;
			sdTableDest.Code_Chantier					= &amp;quot;&amp;quot;&#13;
		FIN&#13;
		SI sdTableDest..NouvelEnregistrement ALORS&#13;
			HAjoute(sdTableDest)&#13;
		SINON&#13;
			HModifie(sdTableDest)&#13;
		FIN&#13;
		HLitSuivant(sdTableSource)&#13;
	FIN&#13;
FIN&#13;
&#13;
//Recuperer les informations externes&#13;
POUR TOUT sdTableDest&#13;
	SI HLitRecherche(&amp;quot;tiers&amp;quot;,&amp;quot;IDInterne&amp;quot;,sdTableDest.IDInterne_Tiers,hIdentique) ALORS&#13;
		sdTableDest.Facturation_Nom					= {&amp;quot;tiers.Facturation_Nom&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_Adresse1			= {&amp;quot;tiers.Facturation_Adresse1&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_Adresse2			= {&amp;quot;tiers.Facturation_Adresse2&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_CP					= {&amp;quot;tiers.Facturation_CP&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_Ville				= {&amp;quot;tiers.Facturation_Ville&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_IDInternePays		= {&amp;quot;tiers.Facturation_IDInternePays&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_Pays				= {&amp;quot;tiers.Facturation_Pays&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_Interloc			= {&amp;quot;tiers.Facturation_Contact_Nom&amp;quot;,indRubrique} &#13;
		sdTableDest.facturation_tel					= {&amp;quot;tiers.Facturation_Contact_Tel &amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_GSM					= {&amp;quot;tiers.Facturation_Contact_GSM&amp;quot;,indRubrique} &#13;
		sdTableDest.Facturation_Mail				= {&amp;quot;tiers.Facturation_Contact_Mail&amp;quot;,indRubrique} &#13;
		HModifie(sdTableDest)&#13;
	FIN&#13;
FIN&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_A</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250207150935127</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
[Liaisons_nuxi.FIC].IDInterne  AS Code,&#13;
[Liaisons_nuxi.FIC].IDInterne AS IDInterne,&#13;
[Liaisons_nuxi.FIC].IdInterne2   AS idinterne_Intervention, &#13;
[appareils_nuxi.FIC].Code AS Code_Ressource, &#13;
[appareils_nuxi.FIC].IDInterne  AS IDInterne_Ressource, &#13;
[appareils_nuxi.FIC].NumSerie AS NumSerie, &#13;
SUBSTR([appareils_nuxi.FIC].Couverture , 1, 1) AS PriseEnChargePiece, &#13;
SUBSTR([appareils_nuxi.FIC].Couverture , 3, 1) AS PriseEnChargeMO, &#13;
SUBSTR([appareils_nuxi.FIC].Couverture , 5, 1) AS PriseEnchargeDepl,&#13;
&amp;apos;A&amp;apos; AS TypeLigne ,&#13;
[appareils_nuxi.FIC].Libelle AS Designation &#13;
FROM  [appareils_nuxi.FIC],[Liaisons_nuxi.FIC],[interventions_nuxi.FIC],[interventions_details_nuxi.fic]&#13;
WHERE   [appareils_nuxi.FIC].IDInterne = [Liaisons_nuxi.FIC].IdInterne1&#13;
AND [interventions_details_nuxi.fic].IDInterneIntervention =[interventions_nuxi.FIC].IDInterne &#13;
AND [interventions_details_nuxi.fic].IDInterne = [Liaisons_nuxi.FIC].IdInterne2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_C</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250210095019585</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
[ressources_nuxi.FIC].IDInterne  AS Code, &#13;
[ressources_nuxi.FIC].IDInterne AS IDInterne, &#13;
[ressources_nuxi.FIC].IDInterneIntervention AS idinterne_Intervention, &#13;
[ressources_nuxi.FIC].CodeRessource AS Code_Ressource, &#13;
[ressources_nuxi.FIC].IDInterneRessource AS IDInterne_Ressource, &#13;
[ressources_nuxi.FIC].Libelle_Ressource  AS Designation, &#13;
[ressources_nuxi.FIC].Qte AS Quantité, &#13;
[ressources_nuxi.FIC].PrixDeVente PrixVUHT, &#13;
[ressources_nuxi.FIC].PrixDeVente AS MontantNetHT ,&#13;
[ressources_nuxi.FIC].PrixDeVente  * (1 + ([ressources_nuxi.FIC].TauxTVA ) / 100)  AS MontantNetTTC, &#13;
&amp;apos;&amp;apos; AS PRixRUHT, &#13;
[ressources_nuxi.FIC].TauxTVA AS TauxTVA, &#13;
[ressources_nuxi.FIC].IdInterneTauxTVA AS IDInterne_TVA, &#13;
CASE [ressources_nuxi.FIC].Facturable &#13;
     WHEN 0 THEN &amp;apos;C&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;F&amp;apos;&#13;
END  AS Situation ,&#13;
&amp;apos;&amp;apos; AS IDInterne_Incident, &#13;
&amp;apos;&amp;apos; AS Code_Incident, &#13;
&amp;apos;&amp;apos;AS IDInterne_Affaire, &#13;
&amp;apos;&amp;apos;AS Code_Affaire, &#13;
&amp;apos;&amp;apos;AS IDInterne_DocumentVte, &#13;
&amp;apos;F&amp;apos; AS Situation, &#13;
&amp;apos;C&amp;apos; AS TypeLigne &#13;
FROM  [ressources_nuxi.FIC],[interventions_nuxi.FIC],[interventions_details_nuxi.fic]&#13;
WHERE [interventions_details_nuxi.fic].IDInterneIntervention =[interventions_nuxi.FIC].IDInterne &#13;
AND [interventions_details_nuxi.fic].IDInterne=[ressources_nuxi.FIC].IDInterneIntervention &#13;
AND TypeRessource =&amp;apos;Art&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_R</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250210094347303</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
&amp;apos;R&amp;apos; AS TypeLigne, &#13;
&amp;apos;M&amp;apos; AS SousTypeLigne, &#13;
[ressources_nuxi.FIC].IDInterne  AS Code, &#13;
[ressources_nuxi.FIC].IDInterne AS IDInterne, &#13;
[ressources_nuxi.FIC].IDInterneIntervention AS idinterne_Intervention, &#13;
[ressources_nuxi.FIC].CodeRessource AS Code_Ressource, &#13;
[ressources_nuxi.FIC].IDInterneRessource AS IDInterne_Ressource, &#13;
[ressources_nuxi.FIC].Libelle_Ressource  AS Designation, &#13;
[ressources_nuxi.FIC].Qte AS Quantité, &#13;
[ressources_nuxi.FIC].PrixDeVente AS MontantNetHT,&#13;
[ressources_nuxi.FIC].PrixDeVente AS PrixVUHT, &#13;
[ressources_nuxi.FIC].TauxTVA  AS TauxTVA,&#13;
[ressources_nuxi.FIC].IdInterneTauxTVA AS IDInterne_TVA, &#13;
[ressources_nuxi.FIC].PrixDeVente  * (1 + ([ressources_nuxi.FIC].TauxTVA ) / 100) AS MontantNetTTC, &#13;
CASE [ressources_nuxi.FIC].Facturable &#13;
     WHEN 0 THEN &amp;apos;1&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;0&amp;apos;&#13;
END  AS NePasFacturer ,&#13;
CASE [ressources_nuxi.FIC].Facturable &#13;
     WHEN 0 THEN &amp;apos;C&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;F&amp;apos;&#13;
END  AS Situation ,&#13;
&amp;apos;&amp;apos;_IncidentId ,&#13;
&amp;apos;&amp;apos; AS Code_Incident, &#13;
&amp;apos;&amp;apos; AS IDInterne_Affaire, &#13;
&amp;apos;&amp;apos; AS Code_Affaire, &#13;
&amp;apos;&amp;apos; AS IDInterne_DocumentVte &#13;
&#13;
FROM  [ressources_nuxi.FIC],[interventions_nuxi.FIC],[interventions_details_nuxi.fic]&#13;
WHERE [interventions_details_nuxi.fic].IDInterneIntervention =[interventions_nuxi.FIC].IDInterne &#13;
AND [interventions_details_nuxi.fic].IDInterne=[ressources_nuxi.FIC].IDInterneIntervention &#13;
AND TypeRessource =&amp;apos;Mat&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_BON_LIGNE_RH</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250210094341624</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
&amp;apos;R&amp;apos; AS TypeLigne, &#13;
&amp;apos;H&amp;apos; AS SousTypeLigne, &#13;
[ressources_nuxi.FIC].IDInterne  AS Code, &#13;
[ressources_nuxi.FIC].IDInterne AS IDInterne, &#13;
[ressources_nuxi.FIC].IDInterneIntervention AS idinterne_Intervention, &#13;
[ressources_nuxi.FIC].CodeRessource AS Code_Ressource, &#13;
[ressources_nuxi.FIC].IDInterneRessource AS IDInterne_Ressource, &#13;
[ressources_nuxi.FIC].Libelle_Ressource  AS Designation, &#13;
[ressources_nuxi.FIC].Qte AS Quantité, &#13;
[ressources_nuxi.FIC].PrixDeVente AS MontantNetHT,&#13;
[ressources_nuxi.FIC].PrixDeVente AS PrixVUHT, &#13;
[ressources_nuxi.FIC].TauxTVA  AS TauxTVA,&#13;
[ressources_nuxi.FIC].IdInterneTauxTVA AS IDInterne_TVA, &#13;
[ressources_nuxi.FIC].PrixDeVente  * (1 + ([ressources_nuxi.FIC].TauxTVA ) / 100) AS MontantNetTTC, &#13;
CASE [ressources_nuxi.FIC].Facturable &#13;
     WHEN 0 THEN &amp;apos;1&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;0&amp;apos;&#13;
END  AS NePasFacturer ,&#13;
CASE [ressources_nuxi.FIC].Facturable &#13;
     WHEN 0 THEN &amp;apos;C&amp;apos; &#13;
     WHEN 1 THEN &amp;apos;F&amp;apos;&#13;
END  AS Situation ,&#13;
&amp;apos;&amp;apos;_IncidentId ,&#13;
&amp;apos;&amp;apos;_IncidentId ,&#13;
&amp;apos;&amp;apos; AS Code_Incident, &#13;
&amp;apos;&amp;apos; AS IDInterne_Affaire, &#13;
&amp;apos;&amp;apos; AS Code_Affaire, &#13;
&amp;apos;&amp;apos; AS IDInterne_DocumentVte,&#13;
[ressources_nuxi.FIC].DateDebut+[ressources_nuxi.FIC].HeureDebut AS DateHeureDébut,&#13;
[ressources_nuxi.FIC].DateFin+[ressources_nuxi.FIC].HeureFin AS DateHeureFin&#13;
&#13;
FROM  [ressources_nuxi.FIC],[interventions_nuxi.FIC],[interventions_details_nuxi.fic]&#13;
WHERE [interventions_details_nuxi.fic].IDInterneIntervention =[interventions_nuxi.FIC].IDInterne &#13;
AND [interventions_details_nuxi.fic].IDInterne=[ressources_nuxi.FIC].IDInterneIntervention &#13;
AND TypeRessource =&amp;apos;Tech&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTRAT</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20241128173632832</Version>
      <CnxSource>3</CnxSource>
      <Requete>PROCÉDURE MoiMême(sdTableDest est Source de Données)   &#13;
//Date: 25/11/2025&#13;
&#13;
sSql			est une chaîne&#13;
duDur			est une Durée&#13;
sChantOrAff		est une chaîne&#13;
sdTableSource	est une Source de Données&#13;
&#13;
//déclarer fichiers externes&#13;
HAnnuleDéclaration(&amp;quot;tiers&amp;quot;)&#13;
HDéclareExterne(gsRepTemp + [fSep] + &amp;quot;tiers.fic&amp;quot;,&amp;quot;tiers&amp;quot;)&#13;
sSql=[&#13;
	SELECT &#13;
	[contrats_nuxi.FIC].IDInterne  AS IDInterne, &#13;
	[contrats_nuxi.FIC].Code  AS Code, &#13;
	[contrats_nuxi.FIC].NomClient  AS NomTiers, &#13;
	[contrats_nuxi.FIC].Notes  AS Note, &#13;
	[contrats_nuxi.FIC].Libelle  AS Libelle, &#13;
	[contrats_nuxi.FIC].DateDebut_Piece  AS GtiePieceDébut, &#13;
	[contrats_nuxi.FIC].DateDebut_MO AS GtieMODébut, &#13;
	[contrats_nuxi.FIC].DateDebut_FD  AS GtieDeplDébut, &#13;
	[contrats_nuxi.FIC].DateFin_Piece AS GtiePieceFin,   &#13;
	[contrats_nuxi.FIC].DateFin_MO AS GtieMOFin, &#13;
	[contrats_nuxi.FIC].DateFin_FD AS GtieDeplFin, &#13;
	[contrats_nuxi.FIC].Description  AS Description, &#13;
	[contrats_nuxi.FIC].CodeClient  AS Code_Tiers, &#13;
	[contrats_nuxi.FIC].IndInterneClient  AS IDInterne_Tiers, &#13;
	[contrats_nuxi.FIC].DateDebut_Contrat  AS DateDébut, &#13;
	[contrats_nuxi.FIC].DateFin_Contrat  AS DateFin, &#13;
	[contrats_nuxi.FIC].IDInterneCommercial  AS IDInterne_Collaborateur &#13;
	&#13;
	FROM [contrats_nuxi.FIC]&#13;
	WHERE&#13;
	[contrats_nuxi.fic].Type = 0 and [contrats_nuxi.fic].Etat = &amp;apos;Actif&amp;apos;&#13;
]&#13;
&#13;
SI HExécuteRequêteSQL(sdTableSource,CnxBDDSrc[3],hRequêteSansCorrection,sSql) ALORS&#13;
	HLitPremier(sdTableSource)&#13;
	TANTQUE PAS HEnDehors(sdTableSource)&#13;
		SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(sdTableDest, &amp;quot;IDInterne&amp;quot;,sdTableSource.IDInterne,hIdentique ) ALORS&#13;
			HRAZ(sdTableDest)&#13;
		FIN&#13;
		sdTableDest.IDInterne					= sdTableSource.IDInterne&#13;
		sdTableDest.Code						= sdTableSource.Code&#13;
		sdTableDest.Libelle						= sdTableSource.Libelle&#13;
		sdTableDest.Description					= sdTableSource.Description&#13;
		sdTableDest.GtieDeplDébut				= sdTableSource.GtieDeplDébut&#13;
		sdTableDest.GtieDeplFin					= sdTableSource.GtieDeplFin&#13;
		sdTableDest.GtiePieceDébut				= sdTableSource.GtiePieceDébut&#13;
		sdTableDest.GtiePieceFin				= sdTableSource.GtiePieceFin&#13;
		sdTableDest.GtieMODébut					= sdTableSource.GtieMODébut&#13;
		sdTableDest.GtieMOFin					= sdTableSource.GtieMOFin&#13;
		sdTableDest.Note						= sdTableSource.Note&#13;
		sdTableDest.IDInterne_Tiers				= sdTableSource.IDInterne_Tiers&#13;
		sdTableDest.Code_Tiers					= sdTableSource.Code_Tiers&#13;
		sdTableDest.DateDébut					= sdTableSource.DateDébut&#13;
		sdTableDest.DateFin						= sdTableSource.DateFin&#13;
		sdTableDest.IDInterne_Collaborateur		= sdTableSource.IDInterne_Collaborateur&#13;
		sdTableDest.NomTiers					= sdTableSource.NomTiers&#13;
		sdTableDest.Nom							= sdTableSource.NomTiers&#13;
		SI sdTableDest..NouvelEnregistrement ALORS&#13;
			HAjoute(sdTableDest)&#13;
		SINON&#13;
			HModifie(sdTableDest)&#13;
		FIN&#13;
		HLitSuivant(sdTableSource)&#13;
	FIN&#13;
FIN&#13;
&#13;
//Recuperer les informations externes&#13;
POUR TOUT sdTableDest&#13;
	SI HLitRecherche(&amp;quot;tiers&amp;quot;,&amp;quot;IDInterne&amp;quot;,sdTableDest.IDInterne_Tiers,hIdentique) ALORS&#13;
		sdTableDest.Adresse1			= {&amp;quot;tiers.Livraison_Adresse1&amp;quot;,indRubrique} &#13;
		sdTableDest.Adresse2			= {&amp;quot;tiers.Livraison_Adresse2&amp;quot;,indRubrique} &#13;
		sdTableDest.CP					= {&amp;quot;tiers.Livraison_CP&amp;quot;,indRubrique} &#13;
		sdTableDest.Ville				= {&amp;quot;tiers.Livraison_Ville&amp;quot;,indRubrique} &#13;
		sdTableDest.IDInterne_Pays		= {&amp;quot;tiers.Livraison_IDInternePays&amp;quot;,indRubrique} &#13;
		sdTableDest.Tel					= {&amp;quot;tiers.Livraison_Contact_Tel&amp;quot;,indRubrique} &#13;
		sdTableDest.GSM					= {&amp;quot;tiers.Livraison_Contact_GSM&amp;quot;,indRubrique} &#13;
		sdTableDest.Mail				= {&amp;quot;tiers.Livraison_Contact_Mail&amp;quot;,indRubrique} &#13;
		HModifie(sdTableDest)&#13;
	FIN&#13;
FIN&#13;
&#13;
RENVOYER(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>CONTRATAPPAREIL</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240514142629293</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
&amp;apos;&amp;apos; AS DateCreation, &#13;
&amp;apos;&amp;apos; AS DateModification, &#13;
[appareils_nuxi.FIC].IDInterne  AS IDInterne, &#13;
[appareils_nuxi.FIC].Code  AS Code, &#13;
[Liaisons_nuxi.FIC].IdInterne2  AS iDInterne_Contrat, &#13;
[Liaisons_nuxi.FIC].IdInterne1  AS IDinterne_Appareil, &#13;
[appareils_nuxi.FIC].IDInterneArticle AS IDInterne_article, &#13;
[appareils_nuxi.FIC].Libelle AS Libelle, &#13;
[appareils_nuxi.FIC].NumSerie  AS NumSerie ,&#13;
[appareils_nuxi.FIC].DateDebutDeplacement AS GtieDeplDébut, &#13;
[appareils_nuxi.FIC].DateDebutMO  AS GtieMODébut, &#13;
[appareils_nuxi.FIC].DateDebutFournitures AS GtiePieceDébut, &#13;
[appareils_nuxi.FIC].DateFinFournitures AS GtiePieceFin,   &#13;
[appareils_nuxi.FIC].DateFinMO AS GtieMOFin, &#13;
[appareils_nuxi.FIC].DateFinDeplacement AS GtieDeplFin  &#13;
&#13;
FROM [appareils_nuxi.FIC] INNER JOIN [Liaisons_nuxi.FIC]&#13;
ON [appareils_nuxi.FIC].IDInterne = [Liaisons_nuxi.FIC].IdInterne1&#13;
INNER JOIN [contrats_nuxi.FIC] ON [contrats_nuxi.FIC].IDInterne = [Liaisons_nuxi.FIC].IdInterne2</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_ETAT_BI</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20241028163934335</Version>
      <CnxSource>3</CnxSource>
      <Requete>PROCÉDURE MoiMême(TableA2 est Source de Données)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;A planifier&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;A planifier&amp;quot;&#13;
TableA2.Libelle = &amp;quot;A planifier&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;A planifier et en cours de réalisation&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;A planifier et en cours de réalisation&amp;quot;&#13;
TableA2.Libelle = &amp;quot;A planifier et en cours de réalisation&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;Planifiée&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;Planifiée&amp;quot;&#13;
TableA2.Libelle = &amp;quot;Planifiée&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;En cours de réalisation&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;En cours de réalisation&amp;quot;&#13;
TableA2.Libelle = &amp;quot;En cours de réalisation&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
HRAZ(TableA2)&#13;
TableA2.Code = &amp;quot;Réalisée&amp;quot;&#13;
TableA2.IDInterne = &amp;quot;Réalisée&amp;quot;&#13;
TableA2.Libelle = &amp;quot;Réalisée&amp;quot;&#13;
TableA2.TypeNomenclature =  &amp;quot;Etat_BI&amp;quot;&#13;
HAjoute(TableA2)&#13;
&#13;
Renvoyer(Null)</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_FRAISDEPL</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240514142737675</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
[frais_deplacement_nuxi.FIC].IDInterne  AS IDInterne, &#13;
[frais_deplacement_nuxi.FIC].Code  AS Code, &#13;
[frais_deplacement_nuxi.FIC].Libelle AS Libelle, &#13;
&amp;apos;FraisDepl&amp;apos; AS  TypeNomenclature,&#13;
[frais_deplacement_nuxi.FIC].MontantOuFrais  AS PrixVente&#13;
&#13;
FROM [frais_deplacement_nuxi.FIC]</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_RESSOURCE_H</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241030113503602</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT&#13;
[techniciens_nuxi.FIC].IDInterne   AS IDInterne,&#13;
[techniciens_nuxi.FIC].Code  AS Code,&#13;
[techniciens_nuxi.FIC].Nom   AS NomLibelle,&#13;
&amp;apos;H&amp;apos; AS TypeRessource ,&#13;
[techniciens_nuxi.FIC].CoutHoraire AS PrixVente,&#13;
[techniciens_nuxi.FIC].CoutHoraire  AS PrixRevient,&#13;
&amp;apos;&amp;apos;AS TauxTVA,&#13;
&amp;apos;&amp;apos;AS IDInterne_TVA,&#13;
[techniciens_nuxi.FIC].IDInterne_Article AS IDInterne_article,&#13;
&amp;apos;&amp;apos; AS Fonction_Qualif&#13;
FROM [techniciens_nuxi.FIC]&#13;
WHERE&#13;
[techniciens_nuxi.FIC].Actif = 1</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>APPAREIL</Table_Nom>
      <TypeSynchro>2</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345694</Version>
      <CnxSource>3</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportAppareilSavNuxi()&#13;
&#13;
&#13;
//23/12/2025 17h00&#13;
&#13;
tabListeTypeEnreg							est un tableau de 0,2 chaînes&#13;
sNomFic										est une chaîne&#13;
NBtraité									est un entier&#13;
NbTypeEnreg									est un entier&#13;
Prems										est un booléen&#13;
InTemp										est une chaîne&#13;
DocXMLSource								est une xmlDocument&#13;
nIDFichier									est un entier&#13;
sXX_										est une chaîne&#13;
sdReqTemp									est une Source de Données&#13;
sMaReqTemp									est une chaîne&#13;
nNbEléments									est un entier&#13;
tabIDInterneSrvTraité						est un tableau de 0,2 chaîne&#13;
StrLog										est une chaîne&#13;
nNbImport									est un entier&#13;
dhDateHeureTemp								est une DateHeure&#13;
&#13;
Date_Creation								est une chaîne&#13;
Date_Modification							est une chaîne&#13;
IDInterne									est une chaîne&#13;
Code										est une chaîne&#13;
Libelle										est une chaîne&#13;
IDInterneClient								est une chaîne&#13;
Code_Client									est une chaîne&#13;
Nom_Client									est une chaîne&#13;
IDInterneArticle							est une chaîne&#13;
NumSerie									est une chaîne&#13;
Description									est une chaîne&#13;
DateDebutGarantie							est une chaîne&#13;
DateFinGarantie								est une chaîne&#13;
DateDebutFournitures						est une chaîne&#13;
DateFinFournitures							est une chaîne&#13;
DateDebutMO									est une chaîne&#13;
DateFinMO									est une chaîne&#13;
DateDebutDeplacement						est une chaîne&#13;
DateFinDeplacement							est une chaîne&#13;
bIsGFour									est un booléen&#13;
bIsGMO										est un booléen&#13;
bIdGDep										est un booléen&#13;
NomSite										est une chaîne&#13;
Adresse1									est une chaîne&#13;
Adresse2									est une chaîne&#13;
CP											est une chaîne&#13;
Ville										est une chaîne&#13;
IDInterne_Pays								est une chaîne&#13;
Notes										est une chaîne&#13;
FenSpecifique								est une chaîne&#13;
sCouverture									est une chaîne&#13;
&#13;
sSqlMAJ										est une chaîne&#13;
sInsertOrUpdate								est une chaîne&#13;
sURLEBP										est une chaîne&#13;
bEBPSaaS									est un booléen&#13;
&#13;
bIsImportValide								est un booléen	= Vrai&#13;
//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
gsCheminImportFtp							est une chaîne&#13;
gsCheminImportFtp=gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;appareil&amp;quot;)&#13;
&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				&#13;
				&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				DocXMLSource			= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				&#13;
				//Info de base&#13;
				Date_Creation			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Date_Creation)&#13;
				Date_Modification		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Date_Modification)&#13;
				IDInterne				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne)&#13;
				&#13;
				//Vérifier si l&amp;apos;appareil existe dans la base&#13;
				sMaReqTemp				= &amp;quot;SELECT TOP 1 IDInterne FROM [appareils_nuxi.FIC] WHERE IDInterne = &amp;apos;&amp;quot; + IDInterne + &amp;quot;&amp;apos;&amp;quot; &#13;
				SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
					HLitPremier(sdReqTemp)&#13;
					SI PAS HEnDehors(sdReqTemp) ALORS&#13;
						sInsertOrUpdate=&amp;quot;U&amp;quot; //Update Appareil&#13;
					SINON&#13;
						sInsertOrUpdate=&amp;quot;I&amp;quot; //Insert Appareil&#13;
					FIN	&#13;
					HLibèreRequête(sMaReqTemp)&#13;
				SINON&#13;
					sInsertOrUpdate=&amp;quot;E&amp;quot; //Erreur&#13;
				FIN&#13;
				&#13;
				//Code&#13;
				Code					= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code)&#13;
				sXX_					= &amp;quot;&amp;quot;&#13;
				&#13;
				SI Gauche(Code,3) = &amp;quot;XX_&amp;quot;  ALORS	&#13;
					SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection,&amp;quot;select [configuration.fic].Valeur_Option as valueRet from [configuration.fic] where [configuration.fic].Nom_Option=&amp;apos;NUMERO_Appareils&amp;apos;&amp;quot;) ALORS&#13;
						HLitPremier(sdReqTemp)&#13;
						SI PAS HEnDehors(sdReqTemp)&#13;
							Code= sdReqTemp.valueRet&#13;
						FIN&#13;
					FIN&#13;
					HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection, &amp;quot;Update [configuration.fic] set [configuration.fic].Valeur_Option=&amp;apos;&amp;quot;+ ChaîneIncrémente(Code) +&amp;quot;&amp;apos; where [configuration.fic].Nom_Option=&amp;apos;NUMERO_Appareils&amp;apos; &amp;quot;) &#13;
					&#13;
				FIN&#13;
				&#13;
				//Libellé&#13;
				Libelle				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle)&#13;
				IDInterneClient		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Tiers)&#13;
				Code_Client			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeTiers)&#13;
				Nom_Client			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Nom_Client)&#13;
				NomSite				= &amp;quot;Adresse principale livraison&amp;quot; &#13;
				Adresse1			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse1)&#13;
				Adresse2			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse2)&#13;
				CP					= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CP)&#13;
				Ville				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ville)&#13;
				IDInterne_Pays		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Pays)&#13;
				&#13;
				SI Gauche(Code_Client,3) = &amp;quot;XX_&amp;quot; ALORS &#13;
					SI bEBPSaaS ALORS&#13;
						Code_Client=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ Code_Client +&amp;quot;%&amp;quot;,&amp;quot;CustomerProduct&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
					SINON&#13;
						SELON gsLogicielMaitreCode&#13;
							CAS &amp;quot;EBPGesComOL&amp;quot;, &amp;quot;EBPBat&amp;quot;,&amp;quot;EBPBatOLT&amp;quot;,&amp;quot;EBPCRM&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + Code_Client + &amp;quot;%&amp;apos;&amp;quot; &#13;
							CAS &amp;quot;WaveSoftGesCom&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 TIERS.TIRID FROM MEMOS,TIERS WHERE MEMOS.MEMOID = TIERS.MEMOID AND MEMO like &amp;apos;%&amp;quot; + Code_Client + &amp;quot;%&amp;apos;&amp;quot; &#13;
							CAS &amp;quot;ApiBatiGestEvol&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 ClientDef.Code FROM ClientDef WHERE ClientDef.Note like &amp;apos;%&amp;quot; + Code_Client + &amp;quot;%&amp;apos;&amp;quot; &#13;
							CAS &amp;quot;Sage i7&amp;quot;, &amp;quot;Sage 100&amp;quot;&#13;
								sMaReqTemp = &amp;quot;SELECT TOP 1 F_COMPTET.CT_Num FROM F_COMPTET WHERE F_COMPTET.CT_Commentaire like &amp;apos;%&amp;quot; + Code_Client + &amp;quot;%&amp;apos;&amp;quot; &#13;
							AUTRE CAS&#13;
						FIN&#13;
						SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
							HLitPremier(sdReqTemp)&#13;
							SI PAS HEnDehors(sdReqTemp) ALORS&#13;
								Code_Client = sdReqTemp.Id&#13;
							FIN&#13;
							HLibèreRequête(sdReqTemp)&#13;
						FIN&#13;
					FIN&#13;
					&#13;
				FIN&#13;
				&#13;
				//Nom du client&#13;
				Nom_Client				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Nom_Client)&#13;
				//Code article&#13;
				IDInterneArticle		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CodeArticle)&#13;
				&#13;
				//Série/lot&#13;
				NumSerie				= Majuscule(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NumSerie))&#13;
				&#13;
				//Description commerciale en clair&#13;
				Description				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Description)&#13;
				DateDebutGarantie		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateDebutGtie)&#13;
				DateFinGarantie			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateFinGtie)&#13;
				&#13;
				//Date de début pièces&#13;
				DateDebutFournitures	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtiePieceDebut)&#13;
				SI DateHeureValide(DateDebutFournitures) ALORS&#13;
					dhDateHeureTemp				= DateDebutFournitures&#13;
					DateDebutFournitures		= DateDebutFournitures//DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
					bIsGFour					= 1&#13;
				SINON	&#13;
					DateDebutFournitures	= &amp;quot;&amp;quot;&#13;
					bIsGFour				= 0&#13;
				FIN  &#13;
				&#13;
				//Date de fin pièces&#13;
				DateFinFournitures	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtiePieceFin)&#13;
				SI DateHeureValide(DateFinFournitures) ALORS&#13;
					dhDateHeureTemp			= DateFinFournitures&#13;
					DateFinFournitures		= DateFinFournitures//DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					DateFinFournitures = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				&#13;
				//Date de début MO&#13;
				DateDebutMO	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieMODebut)&#13;
				SI DateHeureValide(DateDebutMO) ALORS&#13;
					dhDateHeureTemp	= DateDebutMO&#13;
					DateDebutMO		= DateDebutMO//DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
					bIsGMO			= 1&#13;
				SINON	&#13;
					DateDebutMO	= &amp;quot;&amp;quot;&#13;
					bIsGMO		= 0&#13;
				FIN &#13;
				&#13;
				//Date de fin MO&#13;
				DateFinMO	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieMOFin)&#13;
				SI DateHeureValide(DateFinMO) ALORS&#13;
					dhDateHeureTemp	= DateFinMO&#13;
					DateFinMO		= DateFinMO//DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					DateFinMO = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				&#13;
				//Date de début déplacement&#13;
				DateDebutDeplacement	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieDeplDebut)&#13;
				SI DateHeureValide(DateDebutDeplacement) ALORS&#13;
					dhDateHeureTemp				= DateDebutDeplacement&#13;
					DateDebutDeplacement		= DateDebutDeplacement//DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
					bIdGDep						= 1&#13;
				SINON	&#13;
					DateDebutDeplacement	= &amp;quot;&amp;quot;&#13;
					bIdGDep					= 1&#13;
				FIN &#13;
				&#13;
				//Date de fin déplacement&#13;
				DateFinDeplacement	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GtieDeplFin)&#13;
				SI DateHeureValide(DateFinDeplacement) ALORS&#13;
					dhDateHeureTemp			= DateFinDeplacement&#13;
					DateFinDeplacement		= DateFinDeplacement//DateVersChaîne(dhDateHeureTemp..PartieDate,&amp;quot;JJ/MM/AAAA&amp;quot;) //+ &amp;quot; &amp;quot; + HeureVersChaîne(dhDateHeureTemp..PartieHeure,&amp;quot;HH:MM&amp;quot;)&#13;
				SINON	&#13;
					DateFinDeplacement = &amp;quot;&amp;quot;&#13;
				FIN &#13;
				sCouverture			= bIsGFour+&amp;quot;,&amp;quot;+bIsGMO+&amp;quot;,&amp;quot;+bIdGDep&#13;
				&#13;
				Notes				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note)&#13;
				SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(Notes,sXX_) = Faux ALORS&#13;
					Notes	= Remplace(Notes,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
					Notes	= Notes + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
				FIN&#13;
				Notes				= Remplace(Notes,ExtraitChaîne(Notes,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
				Notes				= Remplace(Notes,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
				Notes				= Notes + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
				Notes				= Remplace(Notes,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
				&#13;
				//Champs perso&#13;
				//--------------------------------------------------------------------------------------------------Mappages des champsperso&#13;
				//Affectation des valeurs des PDF dynamiques&#13;
				FenSpecifique		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Data_PdfDynamique)&#13;
				//Fin Mappages des champsperso ---------------------------------------------------------&#13;
				&#13;
				&#13;
				//--------------------------------------------------------------------------------------------------Ecriture de la ligne&#13;
				gnNbDocImporté ++						&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
			FIN&#13;
		FIN&#13;
	FIN&#13;
	SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
		//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
		SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
			sSqlMAJ=[&#13;
				INSERT INTO [appareils_nuxi.FIC](&#13;
				IDInterne,&#13;
				Code,&#13;
				Libelle,&#13;
				IDInterneClient,&#13;
				Code_Client,&#13;
				Nom_Client,&#13;
				IDInterneArticle,&#13;
				NumSerie,&#13;
				Description,&#13;
				DateDebutGarantie,&#13;
				DateFinGarantie	,&#13;
				DateDebutFournitures,&#13;
				DateFinFournitures,&#13;
				DateDebutMO	,&#13;
				DateFinMO,&#13;
				DateDebutDeplacement,&#13;
				DateFinDeplacement,&#13;
				NomSite,&#13;
				Adresse1,&#13;
				Adresse2,&#13;
				CP,&#13;
				Ville,&#13;
				IDInterne_Pays,&#13;
				Notes,&#13;
				FenSpecifique,&#13;
				Couverture,&#13;
				DateCreationFiche,&#13;
				Actif&#13;
				)&#13;
				VALUES(&amp;apos;%1&amp;apos;,&amp;apos;%2&amp;apos;,&amp;apos;%3&amp;apos;,&amp;apos;%4&amp;apos;,&amp;apos;%5&amp;apos;,&amp;apos;%6&amp;apos;,&amp;apos;%7&amp;apos;,&amp;apos;%8&amp;apos;,&amp;apos;%9&amp;apos;,&amp;apos;%10&amp;apos;,&amp;apos;%11&amp;apos;,&amp;apos;%12&amp;apos;,&amp;apos;%13&amp;apos;,&amp;apos;%14&amp;apos;,&amp;apos;%15&amp;apos;,&amp;apos;%16&amp;apos;,&amp;apos;%17&amp;apos;,&amp;apos;%18&amp;apos;,&amp;apos;%19&amp;apos;,&amp;apos;%20&amp;apos;,&amp;apos;%21&amp;apos;,&amp;apos;%22&amp;apos;,&amp;apos;%23&amp;apos;,&amp;apos;%24&amp;apos;,&amp;apos;%25&amp;apos;,&amp;apos;%26&amp;apos;,&amp;apos;%27&amp;apos;,&amp;apos;%28&amp;apos;)&#13;
			]&#13;
		SINON SI sInsertOrUpdate=&amp;quot;U&amp;quot;&#13;
			sSqlMAJ=[&#13;
				UPDATE [appareils_nuxi.FIC]&#13;
				SET&#13;
				Libelle = &amp;apos;%3&amp;apos;,&#13;
				IDInterneClient = &amp;apos;%4&amp;apos;,&#13;
				Code_Client =&amp;apos;%5&amp;apos;,&#13;
				Nom_Client = &amp;apos;%6&amp;apos;,&#13;
				IDInterneArticle = &amp;apos;%7&amp;apos;,&#13;
				NumSerie = &amp;apos;%8&amp;apos;,&#13;
				Description = &amp;apos;%9&amp;apos;,&#13;
				DateDebutGarantie = &amp;apos;%10&amp;apos;,&#13;
				DateFinGarantie = &amp;apos;%11&amp;apos;,&#13;
				DateDebutFournitures = &amp;apos;%12&amp;apos;,&#13;
				DateFinFournitures = &amp;apos;%13&amp;apos;,&#13;
				DateDebutMO =&amp;apos;%14&amp;apos;,&#13;
				DateFinMO = &amp;apos;%15&amp;apos;,&#13;
				DateDebutDeplacement = &amp;apos;%16&amp;apos;,&#13;
				DateFinDeplacement = &amp;apos;%17&amp;apos;,&#13;
				NomSite = &amp;apos;%18&amp;apos;,&#13;
				Adresse1 = &amp;apos;%19&amp;apos;,&#13;
				Adresse2 =&amp;apos;%20&amp;apos;,&#13;
				CP = &amp;apos;%21&amp;apos;,&#13;
				Ville = &amp;apos;%22&amp;apos;,&#13;
				IDInterne_Pays = &amp;apos;%23&amp;apos;,&#13;
				Notes = &amp;apos;%24&amp;apos;,&#13;
				FenSpecifique = &amp;apos;%25&amp;apos;,&#13;
				Couverture=&amp;apos;%26&amp;apos;&#13;
				WHERE&#13;
				IDInterne = &amp;apos;%1&amp;apos;&#13;
			]&#13;
		FIN&#13;
		sSqlMAJ=ChaîneConstruit(sSqlMAJ,IDInterne,Code,Libelle,IDInterneClient,Code_Client,Nom_Client,IDInterneArticle,NumSerie,Description,DateDebutGarantie,DateFinGarantie,DateDebutFournitures,DateFinFournitures,DateDebutMO,DateFinMO,DateDebutDeplacement,DateFinDeplacement,NomSite,Adresse1,Adresse2,CP,Ville,IDInterne_Pays,Notes,FenSpecifique,sCouverture,DateSys,1)&#13;
		&#13;
		SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection,sSqlMAJ) ALORS&#13;
			SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
				StrLog = &amp;quot;OK Ajout Appareil : &amp;quot; + IDInterne + &amp;quot;/&amp;quot; + Code + RC&#13;
			SINON&#13;
				StrLog = &amp;quot;OK Mise à jour Appareil : &amp;quot; + IDInterne + &amp;quot;/&amp;quot; + Code + RC&#13;
			FIN&#13;
		SINON&#13;
			StrLog = &amp;quot;Erreur Ajout/Mise à jour Appareil : &amp;quot; + IDInterne + &amp;quot;/&amp;quot; + Code + RC&#13;
		FIN&#13;
		&#13;
	FIN&#13;
	//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître****************************************************************************&#13;
	NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
	SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
		CAS &amp;quot;appareil&amp;quot;&#13;
			POUR x = 1 À NBtraité&#13;
				sMaReqTemp = &amp;quot;Select IDInterne From [appareils_nuxi.FIC] Where Notes Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
				//verspressePapier(sMaReqTemp)&#13;
				SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
					HLitPremier(sdReqTemp)&#13;
					SI PAS HEnDehors(sdReqTemp) ALORS&#13;
						tabIDInterneSrvTraité[x,2] = Vrai&#13;
					SINON&#13;
						tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
					FIN&#13;
				FIN&#13;
			FIN&#13;
	FIN&#13;
	&#13;
	//----------------------------------------------------Mettre à jour l&amp;apos;évenement sur le srv &#13;
	NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
	InTemp		= &amp;quot;&amp;quot;&#13;
	StrLog		= sNomFic + RC + StrLog&#13;
	POUR x = 1 À NBtraité&#13;
		SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
			InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
		FIN&#13;
	FIN&#13;
	SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
		//Mettre à jour le srv de travail et srv de backup&#13;
		MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
	FIN&#13;
	InTemp = &amp;quot;&amp;quot;&#13;
	POUR x = 1 À NBtraité&#13;
		SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
			InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
		FIN&#13;
	FIN&#13;
	SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
		//Mettre à jour le srv de travail et srv de backup&#13;
		MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
	FIN&#13;
	//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
	RapportEspaceClient(StrLog,bIsImportValide)&#13;
FIN&#13;
&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTERVENTION</Table_Nom>
      <TypeSynchro>2</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345695</Version>
      <CnxSource>3</CnxSource>
      <Requete>//COL_Importation PROCÉDURE ImportInterventionsSavNuxi()&#13;
&#13;
//   29/01/2025 09:08 &#13;
&#13;
tabListeTypeEnreg									est un tableau de 0,2 chaînes&#13;
sNomFic												est une chaîne&#13;
sNomFicLog											est une chaîne&#13;
NBtraité											est un entier&#13;
NbTypeEnreg											est un entier&#13;
Prems												est un booléen&#13;
InTemp												est une chaîne&#13;
DocXMLSource										est une xmlDocument&#13;
sXX_												est une chaîne&#13;
sdReqTemp											est une Source de Données&#13;
sMaReqTemp											est une chaîne&#13;
nNbEléments											est un entier&#13;
bEBPSaaS											est un booléen&#13;
tabIDInterneSrvTraité								est un tableau de 0,2 chaîne&#13;
StrLog												est une chaîne&#13;
sValTest											est une chaîne&#13;
IlMax												est un entier&#13;
IlMaxPlus											est un entier&#13;
nNbImport											est un entier&#13;
sInsertOrUpdate										est une chaîne&#13;
sSqlMAJ												est une chaîne&#13;
sdSourceLocale										est une Source de Données&#13;
dhDH_DebutI											est une DateHeure&#13;
dhDDH_FinI											est une DateHeure&#13;
sPréfixFic											est une chaîne&#13;
nIDFichierLog										est un entier&#13;
IDInterne											est une chaîne&#13;
sCode												est une chaîne&#13;
sIDInterneInterventionDetail						est une chaîne&#13;
sIDInterneRessource									est une chaîne&#13;
sIDInterneLigneRessource							est une chaîne&#13;
dDate_Creation										est une Date&#13;
dDate_Modification									est une Date&#13;
sDateIntervention									est une chaîne&#13;
sHeureIntervention									est une chaîne&#13;
sLibelle											est une chaîne&#13;
sIDInterneContrat									est une chaîne&#13;
sIDInterneClient									est une chaîne&#13;
sCodeClient											est une chaîne&#13;
sNomClient											est une chaîne&#13;
sIDInterneTierPayeur								est une chaîne&#13;
sIdInterneIntervenant								est une chaîne&#13;
IDInterneIncident									est une chaîne&#13;
IDInterneFraisDeplacement							est une chaîne&#13;
IDInterneAffaire									est une chaîne&#13;
montant_ht											est une chaîne&#13;
Inter_Facturee										est une chaîne&#13;
Description											est une chaîne&#13;
Statut												est une chaîne&#13;
IsActif												est une chaîne&#13;
Duree												est une Durée&#13;
Rapport												est une chaîne&#13;
Notes												est une chaîne&#13;
FenSpecifique										est une chaîne&#13;
NomSite												est une chaîne&#13;
Adresse1											est une chaîne&#13;
Adresse2											est une chaîne&#13;
CP													est une chaîne&#13;
Ville												est une chaîne&#13;
IDInternePays										est une chaîne&#13;
Interlocuteur										est une chaîne&#13;
Telephone											est une chaîne&#13;
Mobile												est une chaîne&#13;
Email												est une chaîne&#13;
Longitude											est une chaîne&#13;
Latitude											est une chaîne&#13;
Signature											est un Buffer&#13;
Nom_Signature										est une chaîne&#13;
DH_DebutInter										est une chaîne&#13;
DH_FinInter											est une chaîne&#13;
Non_Modifiable										est une chaîne&#13;
IDInterne_depot										est une chaîne&#13;
&#13;
TypeLigne											est une chaîne&#13;
sTypeSousLigne										est une chaîne&#13;
sCodeRessource										est une chaîne&#13;
sLibelle_Ressource									est une chaîne&#13;
xQte												est un numérique&#13;
sValeurUnitaire										est une chaîne&#13;
sPrixDeVente										est une chaîne&#13;
sIdInterneTauxTVA									est une chaîne&#13;
dhDateHeureDebut									est une DateHeure&#13;
dhDateHeureFin										est une DateHeure&#13;
sDateDebut											est une chaîne&#13;
sDateFin											est une chaîne&#13;
sHeureDebut											est une chaîne&#13;
sHeureFin											est une chaîne&#13;
duDureeRess											est une Durée&#13;
sTypeDate											est une chaîne&#13;
sRéalisée											est une chaîne&#13;
sTauxTVA											est une chaîne&#13;
sTypeRessource										est une chaîne&#13;
bIsImportValide										est un booléen&#13;
sOrdreAgenda										est une chaîne&#13;
dOldDateAgenda										est une Date&#13;
ExeNuxiDevBureau									est une chaîne&#13;
IniNuxiDevBureau									est une chaîne&#13;
NumDossier											est une chaîne&#13;
nNbrEvenementsAgenda								est un entier	= 0&#13;
sEtat												est une chaîne&#13;
nNbrTotalRessourceTech								est un entier	= 0&#13;
nNbrRessourcePlanifié								est un entier	= 0&#13;
bProteger_ecriture									est un booléen	= 0&#13;
SignatureImg										est une Image&#13;
Interventions_Détails_Nuxi							est une Source de Données&#13;
&#13;
&#13;
//**********************************************&#13;
//Initialiser le chemin d&amp;apos;import des fichiers csv&#13;
gsCheminImportFtp									est une chaîne&#13;
gsCheminImportFtp	= gjsSerial.URL1 +[&amp;quot;/&amp;quot;]+ &amp;quot;Import/&amp;quot;&#13;
&#13;
&#13;
ExeNuxiDevBureau	= gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[3].Logiciel&#13;
IniNuxiDevBureau	= gConfigXML.Connexion.Liaisons_Externes.Liaisons.Liaison[3].config&#13;
NumDossier			= INILit(&amp;quot;PARAMETRE&amp;quot;, &amp;quot;NUM_DOSSIER&amp;quot;,&amp;quot;0&amp;quot;,IniNuxiDevBureau)&#13;
&#13;
HDéclareExterne(&amp;quot;interventions_details_nuxi.fic&amp;quot;,Interventions_Détails_Nuxi,CnxBDDSrc[3])&#13;
&#13;
//Déclaration SAAS******************************************************&#13;
sURLEBP											est une chaîne&#13;
&#13;
SI PAS fRépertoireExiste(XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import)) ALORS&#13;
	//Si la récup est lancé sur un autre poste il faut un dossier valide&#13;
	sPréfixFic = SysRep(srMesDocumentsCommun) + [fSep] + &amp;quot;NuxiDev Temp&amp;quot; + [fSep]&#13;
	SI PAS fRépertoireExiste(sPréfixFic) ALORS&#13;
		fRepCrée(sPréfixFic)&#13;
	FIN&#13;
	sPréfixFic = sPréfixFic + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot;&#13;
SINON&#13;
	sPréfixFic = XMLVersTexte(gConfigXML.Connexion.Liaisons_Externes.Dossier_Import) + [fSep] + DateVersChaîne(DateSys(),&amp;quot;JJ-MM-AA&amp;quot;) + &amp;quot; &amp;quot; + HeureVersChaîne(HeureSys(),&amp;quot;HH MM SS&amp;quot;) + &amp;quot; &amp;quot; &#13;
FIN&#13;
sNomFicLog		= sPréfixFic + &amp;quot;Intervention.log&amp;quot;&#13;
nIDFichierLog	= fOuvre(sNomFicLog ,foCréation+foEcriture)&#13;
//***********************************************************************&#13;
&#13;
SI gConfigXML.Connexion.Sources.Source[1].Provider = &amp;quot;CLOUD&amp;quot; ALORS&#13;
	bEBPSaaS				= Vrai&#13;
	sURLEBP					=	 XMLVersTexte(gCodeDynamiqueStdXML.NuxiDev.ConfigSAAS.URLAPI)&#13;
SINON&#13;
	bEBPSaaS				=Faux&#13;
FIN&#13;
TableauAjouteLigne(tabListeTypeEnreg,&amp;quot;intervention&amp;quot;)&#13;
&#13;
//Affectation des types d&amp;apos;éléments à récupérer	*******************************************************************************************************************************&#13;
&#13;
NbTypeEnreg	= TableauInfo(tabListeTypeEnreg,tiNombreLignes)&#13;
nNbEléments	= TableauInfo(gtabSyncNuxiDev,tiNombreTotal)&#13;
&#13;
POUR t = 1 À NbTypeEnreg&#13;
	Prems = Vrai //Prems faire ligne d&amp;apos;entête&#13;
	TableauSupprimeTout(tabIDInterneSrvTraité)&#13;
	&#13;
	StrLog				= &amp;quot;&amp;quot;&#13;
	POUR IElement = 1 À nNbEléments&#13;
		SI Minuscule(gtabSyncNuxiDev[IElement].TypeEnreg) = Minuscule(tabListeTypeEnreg[t,1]) ALORS&#13;
			&#13;
			SI gtabSyncNuxiDev[IElement].Enreg &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
				nNbImport++&#13;
				//----------------------------------------------Mappage des valeurs et construction de l&amp;apos;enregistrement***********************************************************&#13;
				VariableRAZ(DocXMLSource)&#13;
				&#13;
				DocXMLSource								= XMLOuvre(gtabSyncNuxiDev[IElement].Enreg,depuisChaîne)&#13;
				sValTest									= DonneGUID(guidBrut)&#13;
				IlMax										= DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne..Occurrence&#13;
				IlMaxPlus									= IlMax //+ 1&#13;
				&#13;
				//Informations Interventions nuxi***********************************************************************************************************************************&#13;
				sIDInterneInterventionDetail				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne   )&#13;
				&#13;
				sMaReqTemp									= &amp;quot;SELECT Inter_Facturee,IDInterneIntervention FROM [interventions_details_nuxi.fic] WHERE IDInterne = &amp;apos;&amp;quot; + SansEspace(sIDInterneInterventionDetail) + &amp;quot;&amp;apos;&amp;quot; &#13;
				SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
					HLitPremier(sdSourceLocale)&#13;
					SI PAS HEnDehors(sdSourceLocale) ALORS&#13;
						sInsertOrUpdate		= &amp;quot;U&amp;quot;&#13;
						IDInterne			= sdSourceLocale.IDInterneIntervention&#13;
						bProteger_ecriture	= sdSourceLocale.Inter_Facturee&#13;
						//Enlever la protection &#13;
						bProteger_ecriture=Faux&#13;
					SINON&#13;
						IDInterne		= DonneGUID(guidBrut)&#13;
						sInsertOrUpdate	= &amp;quot;I&amp;quot;&#13;
					FIN&#13;
				SINON&#13;
					sInsertOrUpdate=&amp;quot;E&amp;quot;&#13;
				FIN&#13;
				&#13;
				sCode		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code   )&#13;
				sXX_		= &amp;quot;&amp;quot;&#13;
				&#13;
				SI Gauche(sCode,3) = &amp;quot;XX_&amp;quot; ALORS	&#13;
					SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection,&amp;quot;select [configuration.fic].Valeur_Option as valueRet from [configuration.fic] where [configuration.fic].Nom_Option=&amp;apos;NUMERO_Interventions&amp;apos;&amp;quot;) ALORS&#13;
						HLitPremier(sdReqTemp)&#13;
						SI PAS HEnDehors(sdReqTemp)&#13;
							sCode= sdReqTemp.valueRet&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
				&#13;
				SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
					sSqlMAJ=[&#13;
						INSERT INTO [interventions_nuxi.fic]&#13;
						(&#13;
						Date_Creation,&#13;
						Date_Modification,&#13;
						IDInterne,&#13;
						Code,&#13;
						Type,&#13;
						TypeModule&#13;
						)&#13;
						VALUES(&amp;apos;%1&amp;apos;,&amp;apos;%2&amp;apos;,&amp;apos;%3&amp;apos;,&amp;apos;%4&amp;apos;,&amp;apos;%5&amp;apos;,&amp;apos;%6&amp;apos;)                     &#13;
					]&#13;
					sSqlMAJ=ChaîneConstruit(sSqlMAJ,DateSys,DateSys,IDInterne,sCode,0,&amp;quot;Int&amp;quot;)&#13;
				SINON&#13;
					sSqlMAJ=[&#13;
						UPDATE [interventions_nuxi.fic]&#13;
						SET&#13;
						Date_Modification	= &amp;apos;%2&amp;apos;&#13;
						WHERE&#13;
						IDInterne = &amp;apos;%1&amp;apos;;   &#13;
					]&#13;
					sSqlMAJ=ChaîneConstruit(sSqlMAJ,IDInterne,DateSys)&#13;
				FIN&#13;
				SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ) ALORS //Si entête bon j&amp;apos;insère le détail&#13;
					SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
						HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection, &amp;quot;Update [configuration.fic] set [configuration.fic].Valeur_Option=&amp;apos;&amp;quot;+ ChaîneIncrémente(sCode) +&amp;quot;&amp;apos; where [configuration.fic].Nom_Option=&amp;apos;NUMERO_Interventions&amp;apos; &amp;quot;) &#13;
						StrLog =StrLog+  &amp;quot;OK Ajout interventions_nuxi : &amp;quot; + IDInterne + &amp;quot;/&amp;quot; + sCode + RC&#13;
					SINON&#13;
						StrLog =StrLog+  &amp;quot;OK Mise à jour interventions_nuxi : &amp;quot; + IDInterne + &amp;quot;/&amp;quot; + sCode + RC&#13;
					FIN&#13;
					//Intervention Détails **************************************************************************************************************************************************************************************************&#13;
					//Informations Interventions nuxi&#13;
					sMaReqTemp				= &amp;quot;SELECT TOP 1 IDInterne,DateIntervention,HeureIntervention FROM [interventions_details_nuxi.fic] WHERE IDInterne = &amp;apos;&amp;quot; + sIDInterneInterventionDetail + &amp;quot;&amp;apos;&amp;quot; &#13;
					SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
						HLitPremier(sdSourceLocale)&#13;
						SI PAS HEnDehors(sdSourceLocale) ALORS&#13;
							sInsertOrUpdate					= &amp;quot;U&amp;quot; //Update Intervention&#13;
							sIDInterneInterventionDetail	= sdSourceLocale.IDInterne&#13;
							sDateIntervention				= sdSourceLocale.DateIntervention&#13;
							sHeureIntervention				= sdSourceLocale.HeureIntervention&#13;
						SINON&#13;
							//sIDInterneInterventionDetail	= sIDInterneInterventionDetail//DonneGUID(guidBrut) on dois garder l&amp;apos;ID qui provient du mobile&#13;
							dDate_Creation					= DateHeureSys()&#13;
							sDateIntervention				= DateSys()&#13;
							sHeureIntervention				= HeureSys()&#13;
							sInsertOrUpdate					= &amp;quot;I&amp;quot; //Insert Intervention&#13;
						FIN	&#13;
						HLibèreRequête(sMaReqTemp)&#13;
					SINON&#13;
						sInsertOrUpdate=&amp;quot;E&amp;quot; //Erreur&#13;
					FIN&#13;
					dDate_Modification				= DateHeureSys()&#13;
					sIdInterneIntervenant			= &amp;quot;&amp;quot;&#13;
					&#13;
					POUR iL = 1 À IlMax&#13;
						SI XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne) = &amp;quot;R&amp;quot; ET XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SousTypeLigne) = &amp;quot;H&amp;quot; ALORS&#13;
							//Affectation du code intervenant uniquement si 1 seul tech&#13;
							SI sIdInterneIntervenant = &amp;quot;&amp;quot; ALORS&#13;
								sIdInterneIntervenant = XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
							SINON&#13;
								sIdInterneIntervenant = &amp;quot;&amp;quot;&#13;
							FIN&#13;
						FIN&#13;
					FIN&#13;
					&#13;
					//Libellé&#13;
					sLibelle	= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Libelle),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					SI sLibelle = &amp;quot;&amp;quot; ALORS sLibelle = &amp;quot;Intervention via NuxiDev&amp;quot;&#13;
					&#13;
					//Info Client &#13;
					sIDInterneClient		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Tiers)&#13;
					sIDInterneTierPayeur	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Tiers)&#13;
					sNomClient				= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Nom),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					&#13;
					//Début&#13;
					DH_DebutInter			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DebutLe)&#13;
					sValTest				= DH_DebutInter&#13;
					SI PAS DateValide(Gauche(DH_DebutInter,8)) ALORS&#13;
						DH_DebutInter	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateDoc)&#13;
					FIN&#13;
					//Fin&#13;
					DH_FinInter	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FinLe)&#13;
					SI DH_FinInter &amp;lt; sValTest ALORS DH_FinInter = sValTest&#13;
					SI PAS DateValide(Gauche(DH_FinInter,8)) ALORS&#13;
						DH_FinInter	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DateDoc)&#13;
						SI DH_FinInter &amp;lt; sValTest ALORS DH_FinInter = sValTest&#13;
					FIN&#13;
					//Duree&#13;
					SI DateHeureValide(DH_DebutInter) ET DateHeureValide(DH_FinInter) ALORS&#13;
						dhDH_DebutI	= DH_DebutInter&#13;
						dhDDH_FinI	= DH_FinInter&#13;
						Duree		= dhDDH_FinI-dhDH_DebutI&#13;
					FIN&#13;
					&#13;
					// Affaire&#13;
					IDInterneAffaire	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Affaire)&#13;
					&#13;
					//Notes en texte brut&#13;
					Notes				= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Note),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					SI sXX_ &amp;lt;&amp;gt; &amp;quot;&amp;quot; ET Contient(Notes,sXX_) = Faux ALORS&#13;
						Notes	= Remplace(Notes,&amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_, &amp;quot;&amp;quot;)&#13;
						Notes	= Notes + [RC] + &amp;quot;Ref Externe NuxiDev &amp;quot; + sXX_&#13;
					FIN&#13;
					Notes				= Remplace(Notes,ExtraitChaîne(Notes,2,&amp;quot;|&amp;quot;),&amp;quot;&amp;quot;)&#13;
					Notes				= Remplace(Notes,&amp;quot;||&amp;quot;,&amp;quot;&amp;quot;)&#13;
					Notes				= Notes + [RC] + &amp;quot;|ID SYNC &amp;quot; + gtabSyncNuxiDev[IElement].IDInterne + &amp;quot;|&amp;quot;&#13;
					Notes				= Remplace(Notes,[&amp;quot;$RC$&amp;quot;, TAB],&amp;quot; &amp;quot;) &#13;
					&#13;
					//Adresse 1&#13;
					Adresse1			= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse1),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Adresse 2&#13;
					Adresse2			= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Adresse2),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Code postal&#13;
					CP					= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.CP),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Code postal&#13;
					//Ville&#13;
					Ville				= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Ville),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Code Pays&#13;
					IDInternePays		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Pays)&#13;
					SI IDInternePays = &amp;quot;-1&amp;quot; ALORS IDInternePays = &amp;quot;&amp;quot;&#13;
					//Nom (contact)&#13;
					Interlocuteur	= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Interlocuteur),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Téléphone fixe&#13;
					Telephone		=  Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Tel),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Téléphone portable&#13;
					Mobile			= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.GSM),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//E-mail&#13;
					Email			= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Mail),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					//Code client&#13;
					sCodeClient		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Tiers)&#13;
					SI Gauche(sCodeClient,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
						SI bEBPSaaS ALORS&#13;
							sCodeClient=Import_RechercheDansNotes(sURLEBP,&amp;quot;%&amp;quot;+ sCodeClient +&amp;quot;%&amp;quot;,&amp;quot;CustomerProduct&amp;quot;,&amp;quot;NotesClear&amp;quot;,&amp;quot;Id&amp;quot;)&#13;
						SINON&#13;
							SELON gsLogicielMaitreCode&#13;
								CAS &amp;quot;EBPGesComOL&amp;quot;, &amp;quot;EBPBat&amp;quot;,&amp;quot;EBPBatOLT&amp;quot;,&amp;quot;EBPCRM&amp;quot;&#13;
									sMaReqTemp = &amp;quot;SELECT TOP 1 Id FROM Customer WHERE NotesClear like &amp;apos;%&amp;quot; + sCodeClient + &amp;quot;%&amp;apos;&amp;quot; &#13;
								CAS &amp;quot;WaveSoftGesCom&amp;quot;&#13;
									sMaReqTemp = &amp;quot;SELECT TOP 1 TIERS.TIRID FROM MEMOS,TIERS WHERE MEMOS.MEMOID = TIERS.MEMOID AND MEMO like &amp;apos;%&amp;quot; + sCodeClient + &amp;quot;%&amp;apos;&amp;quot; &#13;
								CAS &amp;quot;ApiBatiGestEvol&amp;quot;&#13;
									sMaReqTemp = &amp;quot;SELECT TOP 1 ClientDef.Code FROM ClientDef WHERE ClientDef.Note like &amp;apos;%&amp;quot; + sCodeClient + &amp;quot;%&amp;apos;&amp;quot; &#13;
								CAS &amp;quot;Sage i7&amp;quot;, &amp;quot;Sage 100&amp;quot;&#13;
									sMaReqTemp = &amp;quot;SELECT TOP 1 F_COMPTET.CT_Num FROM F_COMPTET WHERE F_COMPTET.CT_Commentaire like &amp;apos;%&amp;quot; + sCodeClient + &amp;quot;%&amp;apos;&amp;quot; &#13;
								AUTRE CAS&#13;
							FIN&#13;
							SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
								HLitPremier(sdReqTemp)&#13;
								SI PAS HEnDehors(sdReqTemp) ALORS&#13;
									sCodeClient = sdReqTemp.Id&#13;
								FIN&#13;
								HLibèreRequête(sdReqTemp)&#13;
							FIN&#13;
						FIN&#13;
					FIN							&#13;
					//Code suivi incident&#13;
					IDInterneIncident				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Incident)&#13;
					//Code frais de déplacement&#13;
					IDInterneFraisDeplacement		= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_Déplacement)&#13;
					SI IDInterneFraisDeplacement = &amp;quot;-1&amp;quot; ALORS IDInterneFraisDeplacement = &amp;quot;&amp;quot;&#13;
					//Description de l&amp;apos;intervention en clair&#13;
					Description			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Symptome)&#13;
					Description			= Remplace(Remplace(Description,Caract(34),&amp;quot;&amp;apos;&amp;quot;),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					&#13;
					//Rapport d&amp;apos;intervention en clair&#13;
					Rapport				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Description)&#13;
					Rapport				= Remplace(Remplace(Rapport,Caract(34),&amp;quot;&amp;apos;&amp;quot;),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					&#13;
					//Longitude&#13;
					Longitude			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Longitude)&#13;
					&#13;
					//Latitude&#13;
					Latitude			=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Latitude)&#13;
					&#13;
					//NomSignature&#13;
					Nom_Signature		= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NomSignature),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
					&#13;
					//Signature&#13;
					SI DocXMLSource.SyncNuxiDev.Enregistrement.Signature&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
						SignatureImg		= dChargeImage(Décode(DocXMLSource.SyncNuxiDev.Enregistrement.Signature,encodeBASE64SansRC))&#13;
					FIN	&#13;
					//Signature			= dSauveImageJPEG(SignatureImg,enMémoire)&#13;
					&#13;
					&#13;
					&#13;
					//Code contrat de maintenance&#13;
					sIDInterneContrat	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.iDInterne_Contrat) // XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Code_Contrat)&#13;
					&#13;
					montant_ht			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.TotalHT) 						&#13;
					SI 	XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.IDInterne_DocumentVte) 	&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
						Inter_Facturee=1&#13;
					FIN&#13;
					Statut			=	 XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Etat_Libelle) 	 					&#13;
					IsActif			= 1									&#13;
					FenSpecifique	=	 Décode(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.FenSpecifique),encodeBASE64SansRC) 	&#13;
										&#13;
					NomSite			= &amp;quot;Adresse principale d&amp;apos;&amp;apos;intervention&amp;quot;																					&#13;
					Non_Modifiable	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.NonModifiable) 							&#13;
					IDInterne_depot	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.DepotTablette) &#13;
					&#13;
					SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
						sSqlMAJ=[&#13;
							INSERT INTO [interventions_details_nuxi.fic]&#13;
							(&#13;
							Date_Creation,&#13;
							Date_Modification,&#13;
							IDInterne,&#13;
							IDInterneIntervention,&#13;
							DateIntervention,&#13;
							HeureIntervention,&#13;
							Libelle,&#13;
							IDInterneContrat,&#13;
							IDInterneClient,&#13;
							CodeClient,&#13;
							NomClient,&#13;
							IDInterneTierPayeur,&#13;
							IdInterneIntervenant,&#13;
							IDInterneIncident,&#13;
							IDInterneFraisDeplacement,&#13;
							IDInterntTVAFraisDeplacement,&#13;
							IDInterneAffaire,&#13;
							montant_ht,&#13;
							Inter_Facturee,&#13;
							Description,&#13;
							Statut,&#13;
							Actif,&#13;
							Duree,&#13;
							Rapport,&#13;
							Notes,&#13;
							FenSpecifique,&#13;
							NomSite,&#13;
							Adresse1,&#13;
							Adresse2,&#13;
							CP,&#13;
							Ville,&#13;
							IDInternePays,&#13;
							Interlocuteur,&#13;
							Telephone,&#13;
							Mobile,&#13;
							Email,&#13;
							Longitude,&#13;
							Latitude,&#13;
							Signature,&#13;
							Nom_Signature,&#13;
							DH_DebutInter,&#13;
							DH_FinInter,&#13;
							Non_Modifiable,&#13;
							IDInterne_depot&#13;
							)&#13;
							VALUES&#13;
							(&#13;
							&amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, &amp;apos;%4&amp;apos;, &amp;apos;%5&amp;apos;, &amp;apos;%6&amp;apos;, &amp;apos;%7&amp;apos;, &amp;apos;%8&amp;apos;, &amp;apos;%9&amp;apos;, &amp;apos;%10&amp;apos;, &amp;apos;%11&amp;apos;,&#13;
							&amp;apos;%12&amp;apos;, &amp;apos;%13&amp;apos;, &amp;apos;%14&amp;apos;, &amp;apos;%15&amp;apos;, &amp;apos;%16&amp;apos;, &amp;apos;%17&amp;apos;, &amp;apos;%18&amp;apos;, &amp;apos;%19&amp;apos;, &amp;apos;%20&amp;apos;, &amp;apos;%21&amp;apos;,&#13;
							&amp;apos;%22&amp;apos;, &amp;apos;%23&amp;apos;, &amp;apos;%24&amp;apos;, &amp;apos;%25&amp;apos;, &amp;apos;%26&amp;apos;, &amp;apos;%27&amp;apos;, &amp;apos;%28&amp;apos;, &amp;apos;%29&amp;apos;, &amp;apos;%30&amp;apos;, &amp;apos;%31&amp;apos;,&#13;
							&amp;apos;%32&amp;apos;, &amp;apos;%33&amp;apos;, &amp;apos;%34&amp;apos;, &amp;apos;%35&amp;apos;, &amp;apos;%36&amp;apos;, &amp;apos;%37&amp;apos;, &amp;apos;%38&amp;apos;, &amp;apos;%39&amp;apos;, &amp;apos;%40&amp;apos;, &amp;apos;%41&amp;apos;,&#13;
							&amp;apos;%42&amp;apos;, &amp;apos;%43&amp;apos;&#13;
							);&#13;
							&#13;
						]&#13;
						sSqlMAJ = ChaîneConstruit(sSqlMAJ, DateSys, DateSys, sIDInterneInterventionDetail, IDInterne, sDateIntervention, sHeureIntervention, sLibelle...&#13;
						, sIDInterneContrat, sIDInterneClient, sCodeClient, sNomClient, sIDInterneTierPayeur, sIdInterneIntervenant, IDInterneIncident, IDInterneFraisDeplacement...&#13;
						,IDInterneFraisDeplacement, IDInterneAffaire, montant_ht, Inter_Facturee, Description, Statut, IsActif, Duree, Rapport, Notes, FenSpecifique, NomSite, Adresse1, Adresse2...&#13;
						,CP, Ville, IDInternePays, Interlocuteur, Telephone, Mobile, Email, Longitude, Latitude, Signature, Nom_Signature, DH_DebutInter, DH_FinInter, Non_Modifiable, IDInterne_depot)&#13;
						&#13;
						&#13;
					SINON&#13;
						sSqlMAJ=[&#13;
							UPDATE [interventions_details_nuxi.fic]&#13;
							SET&#13;
							Date_Modification				= &amp;apos;%1&amp;apos;,&#13;
							DateIntervention				= &amp;apos;%2&amp;apos;,&#13;
							HeureIntervention				= &amp;apos;%3&amp;apos;,&#13;
							Libelle							= &amp;apos;%4&amp;apos;,&#13;
							IDInterneContrat				= &amp;apos;%5&amp;apos;,&#13;
							IDInterneClient					= &amp;apos;%6&amp;apos;,&#13;
							CodeClient						= &amp;apos;%7&amp;apos;,&#13;
							NomClient						= &amp;apos;%8&amp;apos;,&#13;
							IDInterneTierPayeur				= &amp;apos;%9&amp;apos;,&#13;
							IdInterneIntervenant			= &amp;apos;%10&amp;apos;,&#13;
							IDInterneIncident				= &amp;apos;%11&amp;apos;,&#13;
							IDInterneFraisDeplacement		= &amp;apos;%12&amp;apos;,&#13;
							IDInterntTVAFraisDeplacement	= &amp;apos;%13&amp;apos;,&#13;
							IDInterneAffaire				= &amp;apos;%14&amp;apos;,&#13;
							montant_ht						= &amp;apos;%15&amp;apos;,&#13;
							Description						= &amp;apos;%16&amp;apos;,&#13;
							Statut							= &amp;apos;%17&amp;apos;,&#13;
							Actif							= &amp;apos;%18&amp;apos;,&#13;
							Duree							= &amp;apos;%19&amp;apos;,&#13;
							Rapport							= &amp;apos;%20&amp;apos;,&#13;
							Notes							= &amp;apos;%21&amp;apos;,&#13;
							FenSpecifique					= &amp;apos;%22&amp;apos;,&#13;
							NomSite							= &amp;apos;%23&amp;apos;,&#13;
							Adresse1						= &amp;apos;%24&amp;apos;,&#13;
							Adresse2						= &amp;apos;%25&amp;apos;,&#13;
							CP								= &amp;apos;%26&amp;apos;,&#13;
							Ville							= &amp;apos;%27&amp;apos;,&#13;
							IDInternePays					= &amp;apos;%28&amp;apos;,&#13;
							Interlocuteur					= &amp;apos;%29&amp;apos;,&#13;
							Telephone						= &amp;apos;%30&amp;apos;,&#13;
							Mobile							= &amp;apos;%31&amp;apos;,&#13;
							Email							= &amp;apos;%32&amp;apos;,&#13;
							Longitude						= &amp;apos;%33&amp;apos;,&#13;
							Latitude						= &amp;apos;%34&amp;apos;,&#13;
							Nom_Signature					= &amp;apos;%35&amp;apos;,&#13;
							DH_DebutInter					= &amp;apos;%36&amp;apos;,&#13;
							DH_FinInter						= &amp;apos;%37&amp;apos;,&#13;
							Non_Modifiable					= &amp;apos;%38&amp;apos;,&#13;
							IDInterne_depot					= &amp;apos;%39&amp;apos;&#13;
							WHERE&#13;
							IDInterneIntervention = &amp;apos;%40&amp;apos;;&#13;
						]&#13;
						sSqlMAJ = ChaîneConstruit(sSqlMAJ,&#13;
						DateHeureSys(), sDateIntervention, sHeureIntervention, sLibelle, sIDInterneContrat, &#13;
						sIDInterneClient, sCodeClient, sNomClient, sIDInterneTierPayeur, sIdInterneIntervenant, &#13;
						IDInterneIncident, IDInterneFraisDeplacement, IDInterneFraisDeplacement, IDInterneAffaire, &#13;
						montant_ht, Description, Statut, IsActif, Duree, Rapport, Notes, &#13;
						FenSpecifique, NomSite, Adresse1, Adresse2, CP, Ville, IDInternePays, Interlocuteur, &#13;
						Telephone, Mobile, Email, Longitude, Latitude , Nom_Signature, DH_DebutInter, &#13;
						DH_FinInter, Non_Modifiable, IDInterne_depot, IDInterne)&#13;
					FIN&#13;
					SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ) ALORS //Si Sauvegarde détails j&amp;apos;enregistre les ressources&#13;
						SI  HLitRecherche(Interventions_Détails_Nuxi,&amp;quot;IDInterne&amp;quot;,sIDInterneInterventionDetail,hIdentique) ALORS&#13;
							SI DocXMLSource.SyncNuxiDev.Enregistrement.Signature &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
								Interventions_Détails_Nuxi.Signature=dSauveImageJPEG(SignatureImg,enMémoire)&#13;
							FIN&#13;
							SI Inter_Facturee&amp;lt;&amp;gt;&amp;quot;&amp;quot; ALORS&#13;
								Interventions_Détails_Nuxi.Inter_Facturee=Inter_Facturee&#13;
							FIN&#13;
							HModifie(Interventions_Détails_Nuxi)&#13;
						FIN&#13;
						SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
							StrLog =StrLog+  &amp;quot;OK Ajout interventions_details_nuxi : &amp;quot; + sIDInterneInterventionDetail + &amp;quot;/&amp;quot; + sCode + RC&#13;
						SINON&#13;
							StrLog =StrLog+  &amp;quot;OK Mise à jour interventions_details_nuxi : &amp;quot; + sIDInterneInterventionDetail + &amp;quot;/&amp;quot; + sCode + RC&#13;
						FIN&#13;
						//********************************************************************************************************************************************************************************************&#13;
						SI bProteger_ecriture=0 ALORS&#13;
							POUR iL = 0 À IlMaxPlus &#13;
								&#13;
								SI iL &amp;gt; 0 ET iL &amp;lt;= IlMax ALORS &#13;
									TypeLigne					= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TypeLigne )&#13;
									sTypeSousLigne				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].SousTypeLigne )&#13;
									sIDInterneLigneRessource	= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne)&#13;
									sIDInterneRessource			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne_Ressource)&#13;
									sCodeRessource				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Code_Ressource)&#13;
									sLibelle_Ressource			= Remplace(XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Designation),&amp;quot;&amp;apos;&amp;quot;,&amp;quot;&amp;apos;&amp;apos;&amp;quot;)&#13;
									xQte						= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].Quantite)&#13;
									sValeurUnitaire				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].PrixVUHT)&#13;
									sPrixDeVente				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].PrixVUHT)&#13;
									sIdInterneTauxTVA			= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].IDInterne_TVA)&#13;
									sTypeDate					= &amp;quot;P&amp;quot;&#13;
									sTauxTVA					= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].TauxTVA)&#13;
									&#13;
									//Date et Heure &#13;
									dhDateHeureDebut			=  XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DateHeureDebut)&#13;
									dhDateHeureFin				= XMLVersTexte(DocXMLSource.SyncNuxiDev.Enregistrement.Lignes.Ligne[iL].DateHeureFin)&#13;
									SI DateValide(Gauche(dhDateHeureDebut,8)) _ET_ (TypeLigne=&amp;quot;R&amp;quot; _ET_ (sTypeSousLigne=&amp;quot;M&amp;quot; OU sTypeSousLigne =&amp;quot;H&amp;quot;)) ALORS&#13;
										sDateDebut	= dhDateHeureDebut.PartieDate&#13;
										sHeureDebut	= dhDateHeureDebut.PartieHeure&#13;
										nNbrRessourcePlanifié++&#13;
									SINON&#13;
										sDateDebut	= &amp;quot;&amp;quot;&#13;
										sHeureDebut	= &amp;quot;&amp;quot;&#13;
									FIN&#13;
									SI DateValide(Gauche(dhDateHeureFin,8)) _ET_ (TypeLigne=&amp;quot;R&amp;quot; _ET_ (sTypeSousLigne=&amp;quot;M&amp;quot; OU sTypeSousLigne =&amp;quot;H&amp;quot;)) ALORS&#13;
										sDateFin	= dhDateHeureFin.PartieDate&#13;
										sHeureFin	= dhDateHeureFin.PartieHeure&#13;
									SINON&#13;
										sDateFin	= &amp;quot;&amp;quot;&#13;
										sHeureFin	= &amp;quot;&amp;quot;&#13;
									FIN&#13;
									//Duree &#13;
									SI DateHeureValide(dhDateHeureDebut) _ET_  DateHeureValide(dhDateHeureFin) ALORS&#13;
										duDureeRess= dhDateHeureFin-dhDateHeureDebut&#13;
									SINON&#13;
										duDureeRess=&amp;quot;0000000000&amp;quot;&#13;
									FIN&#13;
									//TypeRessource&#13;
									SELON TypeLigne&#13;
										CAS &amp;quot;C&amp;quot;&#13;
											sTypeRessource	= &amp;quot;Art&amp;quot;&#13;
											sRéalisée		= 0&#13;
										CAS &amp;quot;R&amp;quot; &#13;
											SI sTypeSousLigne=&amp;quot;H&amp;quot; ALORS&#13;
												sTypeRessource=&amp;quot;Tech&amp;quot;&#13;
												nNbrTotalRessourceTech++&#13;
												SI Signature&amp;lt;&amp;gt;&amp;quot;&amp;quot; OU Statut =&amp;quot;Réalisée&amp;quot; ALORS&#13;
													sRéalisée=1&#13;
												SINON&#13;
													sRéalisée=0&#13;
												FIN&#13;
											SINON&#13;
												sTypeRessource	= &amp;quot;Mat&amp;quot;&#13;
												sRéalisée		= 0&#13;
											FIN&#13;
										AUTRE CAS&#13;
											&#13;
									FIN&#13;
									SELON TypeLigne&#13;
										CAS &amp;quot;A&amp;quot;//Appareil&#13;
											SI Gauche(sCode,3) = &amp;quot;XX_&amp;quot; ALORS&#13;
												sMaReqTemp = &amp;quot;Select IDInterne From [appareils_nuxi.FIC] Where Notes like &amp;apos;%&amp;quot; + sCode + &amp;quot;%&amp;apos;&amp;quot; &#13;
												SI HExécuteRequêteSQL(sdReqTemp,CnxIDBDD[1],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
													HLitPremier(sdReqTemp)&#13;
													SI PAS HEnDehors(sdReqTemp) ALORS&#13;
														sCode = sdReqTemp.Id&#13;
													FIN	&#13;
													HLibèreRequête(sdReqTemp) &#13;
												FIN&#13;
											FIN	&#13;
											//Vérifier l’existence du ressource&#13;
											sMaReqTemp				= &amp;quot;SELECT TOP 1 IDInterne FROM [Liaisons_nuxi.FIC] WHERE IdInterne1=&amp;apos;&amp;quot;+ sIDInterneRessource +&amp;quot;&amp;apos; and IdInterne2=&amp;apos;&amp;quot;+ sIDInterneInterventionDetail +&amp;quot;&amp;apos;&amp;quot; &#13;
											SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
												HLitPremier(sdSourceLocale)&#13;
												SI PAS HEnDehors(sdSourceLocale) ALORS&#13;
													sInsertOrUpdate=&amp;quot;U&amp;quot; //Update Appareil&#13;
												SINON&#13;
													sInsertOrUpdate=&amp;quot;I&amp;quot; //Insert Appareil&#13;
												FIN	&#13;
												HLibèreRequête(sMaReqTemp)&#13;
											SINON&#13;
												sInsertOrUpdate=&amp;quot;E&amp;quot; //Erreur&#13;
											FIN&#13;
											SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
												sSqlMAJ=[&#13;
													INSERT INTO [Liaisons_nuxi.FIC]&#13;
													(&#13;
													IDInterne,&#13;
													IdInterne1,&#13;
													IdInterne2,&#13;
													Table1,&#13;
													Table2&#13;
													)&#13;
													VALUES&#13;
													(&#13;
													&amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, &amp;apos;%4&amp;apos;, &amp;apos;%5&amp;apos;);&#13;
												]&#13;
												sSqlMAJ=ChaîneConstruit(sSqlMAJ,DonneGUID(guidBrut),sIDInterneRessource,sIDInterneInterventionDetail,&amp;quot;appareils_nuxi&amp;quot;,&amp;quot;interventions_détails_nuxi&amp;quot;)&#13;
											FIN&#13;
											SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ) ALORS&#13;
												SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
													StrLog =StrLog+  &amp;quot;OK Ajout liaison appareil à l&amp;apos;intervention : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
												SINON&#13;
													StrLog =StrLog+  &amp;quot;OK Mise à jour liaison appareil à l&amp;apos;intervention : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
												FIN&#13;
											SINON&#13;
												StrLog =StrLog+  &amp;quot;Erreur Ajout/Mise à jour liaison appareil à l&amp;apos;intervention : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
												&#13;
											FIN&#13;
											&#13;
										AUTRE CAS //Fournitures,Techniciens,Matériels&#13;
											//Vérifier l’existence du ressource&#13;
											sMaReqTemp				= &amp;quot;SELECT IDInterne FROM [ressources_nuxi.FIC] WHERE IDInterneRessource = &amp;apos;&amp;quot; + sIDInterneRessource + &amp;quot;&amp;apos; and IDInterneIntervention=&amp;apos;&amp;quot;+ sIDInterneInterventionDetail +&amp;quot;&amp;apos;&amp;quot; &#13;
											SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sMaReqTemp) ALORS&#13;
												HLitPremier(sdSourceLocale)&#13;
												SI PAS HEnDehors(sdSourceLocale) ALORS&#13;
													sInsertOrUpdate=&amp;quot;U&amp;quot;&#13;
												SINON&#13;
													sInsertOrUpdate=&amp;quot;I&amp;quot;&#13;
												FIN	&#13;
												HLibèreRequête(sMaReqTemp)&#13;
											SINON&#13;
												sInsertOrUpdate=&amp;quot;E&amp;quot; //Erreur&#13;
											FIN&#13;
											&#13;
											SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
												sSqlMAJ=[&#13;
													INSERT INTO [ressources_nuxi.FIC]&#13;
													(&#13;
													IDInterne,&#13;
													IDInterneIntervention,&#13;
													IDInterneRessource,&#13;
													CodeRessource,&#13;
													Libelle_Ressource,&#13;
													Qte,&#13;
													ValeurUnitaire,&#13;
													PrixDeVente,&#13;
													IdInterneTauxTVA,&#13;
													DateDebut,&#13;
													DateFin,&#13;
													HeureDebut,&#13;
													HeureFin,&#13;
													Duree,&#13;
													TypeDate,&#13;
													Réalisée,&#13;
													TauxTVA,&#13;
													TypeRessource&#13;
													)&#13;
													VALUES&#13;
													(&#13;
													&amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, &amp;apos;%4&amp;apos;, &amp;apos;%5&amp;apos;, &amp;apos;%6&amp;apos;, &amp;apos;%7&amp;apos;, &amp;apos;%8&amp;apos;, &amp;apos;%9&amp;apos;, &amp;apos;%10&amp;apos;,&#13;
													&amp;apos;%11&amp;apos;, &amp;apos;%12&amp;apos;, &amp;apos;%13&amp;apos;, &amp;apos;%14&amp;apos;, &amp;apos;%15&amp;apos;, &amp;apos;%16&amp;apos;, &amp;apos;%17&amp;apos;, &amp;apos;%18&amp;apos;&#13;
													);&#13;
													&#13;
												]&#13;
												sSqlMAJ=ChaîneConstruit(sSqlMAJ,sIDInterneLigneRessource,sIDInterneInterventionDetail,sIDInterneRessource,sCodeRessource,sLibelle_Ressource,xQte,sValeurUnitaire,sPrixDeVente,sIdInterneTauxTVA,sDateDebut,sDateFin...&#13;
												,sHeureDebut,sHeureFin,duDureeRess,sTypeDate,sRéalisée,sTauxTVA,sTypeRessource)&#13;
												sOrdreAgenda	= &amp;quot;C&amp;quot;&#13;
												dOldDateAgenda	= Null&#13;
											SINON&#13;
												sSqlMAJ=[&#13;
													UPDATE [ressources_nuxi.FIC]&#13;
													SET&#13;
													Libelle_Ressource	= &amp;apos;%1&amp;apos;,&#13;
													Qte					= &amp;apos;%2&amp;apos;,&#13;
													ValeurUnitaire		= &amp;apos;%3&amp;apos;,&#13;
													PrixDeVente			= &amp;apos;%4&amp;apos;,&#13;
													IdInterneTauxTVA	= &amp;apos;%5&amp;apos;,&#13;
													DateDebut			= &amp;apos;%6&amp;apos;,&#13;
													DateFin				= &amp;apos;%7&amp;apos;,&#13;
													HeureDebut			= &amp;apos;%8&amp;apos;,&#13;
													HeureFin			= &amp;apos;%9&amp;apos;,&#13;
													Duree				= &amp;apos;%10&amp;apos;,&#13;
													Réalisée			= &amp;apos;%11&amp;apos;,&#13;
													TauxTVA				= &amp;apos;%12&amp;apos;&#13;
													WHERE&#13;
													IDInterne = &amp;apos;%13&amp;apos;;&#13;
													&#13;
												]&#13;
												sSqlMAJ			= ChaîneConstruit(sSqlMAJ,sLibelle_Ressource,xQte,sValeurUnitaire,sPrixDeVente,sIdInterneTauxTVA,sDateDebut,sDateFin,sHeureDebut,sHeureFin,duDureeRess,sRéalisée,sTauxTVA,sIDInterneLigneRessource)&#13;
												sOrdreAgenda	= &amp;quot;M&amp;quot;&#13;
												dOldDateAgenda	= sDateDebut&#13;
											FIN&#13;
											SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ) ALORS //La ressource est ajoué j&amp;apos;ajoute l&amp;apos;évenement dans la table de synchro&#13;
												&#13;
												SI sInsertOrUpdate=&amp;quot;I&amp;quot; ALORS&#13;
													StrLog =StrLog+  &amp;quot;OK Ajout liaison ressource à l&amp;apos;intervention : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
												SINON&#13;
													StrLog =StrLog+  &amp;quot;OK Mise à jour ressource appareil à l&amp;apos;intervention : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
												FIN&#13;
												&#13;
												//Traitement Agenda*******************************************************************************************************************************************&#13;
												SI TypeLigne =&amp;quot;R&amp;quot; _ET_ sTypeSousLigne=&amp;quot;H&amp;quot; ALORS&#13;
													sSqlMAJ=[&#13;
														INSERT INTO [SyncGoogleAgenda_Nuxi.FIC]&#13;
														(&#13;
														IDInterne,&#13;
														IDInterne_Table,&#13;
														Table,&#13;
														NewDateHeureDebut,&#13;
														NewDateHeureFin,&#13;
														Ordre,&#13;
														OldDate,&#13;
														IDInterne_OLDTechMat,&#13;
														Poste&#13;
														)&#13;
														VALUES&#13;
														(&#13;
														&amp;apos;%1&amp;apos;, &amp;apos;%2&amp;apos;, &amp;apos;%3&amp;apos;, &amp;apos;%4&amp;apos;, &amp;apos;%5&amp;apos;, &amp;apos;%6&amp;apos;, &amp;apos;%7&amp;apos;, &amp;apos;%8&amp;apos;, &amp;apos;%9&amp;apos;&#13;
														);&#13;
														&#13;
													]&#13;
													sSqlMAJ=ChaîneConstruit(sSqlMAJ,DonneGUID(guidFormaté),sIDInterneLigneRessource,&amp;quot;Ressources_Nuxi&amp;quot;,dhDateHeureDebut,dhDateHeureFin,sOrdreAgenda,dOldDateAgenda,sIDInterneRessource,&amp;quot;Connecteur&amp;quot;)&#13;
													SI HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ) ALORS //La ressource est ajoué j&amp;apos;ajoute l&amp;apos;évenement dans la table de synchro&#13;
														StrLog =StrLog+  &amp;quot;OK Ajout SyncGoogleAgenda_Nuxi ressource  : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
														nNbrEvenementsAgenda++&#13;
													SINON&#13;
														StrLog =StrLog+ &amp;quot;Erreur Ajout SyncGoogleAgenda_Nuxi ressource  : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
													FIN&#13;
												FIN&#13;
												&#13;
											SINON&#13;
												StrLog =StrLog+  &amp;quot;Erreur Ajout/Mise à jour liaison ressource à l&amp;apos;intervention : &amp;quot; + sCodeRessource + &amp;quot;/&amp;quot; + sCode + RC&#13;
											FIN&#13;
									FIN&#13;
								FIN&#13;
								&#13;
							FIN&#13;
							//Je mets a jour le statut selon le statut des ressources**************************************************************************************************&#13;
							SI Signature&amp;lt;&amp;gt;&amp;quot;&amp;quot; OU Statut=&amp;quot;Réalisée&amp;quot; ALORS&#13;
								sEtat=&amp;quot;Réalisée&amp;quot;&#13;
								//Il faut realiser toutes les lignes si l&amp;apos;intervention est planifié au niveau du bureau mais juste signée et facturée au niveau de l&amp;apos;application mobile&#13;
								sSqlMAJ=[&#13;
									UPDATE [ressources_nuxi.FIC] SET Réalisée = 1 where IDInterneIntervention = &amp;apos;%1&amp;apos;;&#13;
								]&#13;
								sSqlMAJ			= ChaîneConstruit(sSqlMAJ,sIDInterneInterventionDetail)&#13;
								HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ)&#13;
							SINON&#13;
								SI nNbrRessourcePlanifié&amp;lt;nNbrRessourcePlanifié ALORS&#13;
									sEtat=&amp;quot;A planifier&amp;quot;&#13;
								SINON&#13;
									sEtat=&amp;quot;Planifiée&amp;quot;&#13;
								FIN&#13;
							FIN&#13;
							sSqlMAJ=[&#13;
								UPDATE [interventions_details_nuxi.FIC]&#13;
								SET&#13;
								Statut	= &amp;apos;%1&amp;apos;&#13;
								where&#13;
								IDInterneIntervention = &amp;apos;%2&amp;apos;;&#13;
								&#13;
							]&#13;
							sSqlMAJ			= ChaîneConstruit(sSqlMAJ,sEtat,IDInterne)&#13;
							HExécuteRequêteSQL(sdSourceLocale,CnxBDDSrc[3],hRequêteSansCorrection ,sSqlMAJ)&#13;
						SINON&#13;
							StrLog =StrLog+  &amp;quot;Erreur Ajout/Mise à jour ressources : Intervention facturée et protégée en écriture&amp;quot; + IDInterne + &amp;quot;/&amp;quot; + sCode + RC&#13;
						FIN&#13;
					SINON&#13;
						StrLog =StrLog+  &amp;quot;Erreur Ajout/Mise à jour interventions_details_nuxi : &amp;quot; + sIDInterneInterventionDetail + &amp;quot;/&amp;quot; + sCode + RC&#13;
					FIN&#13;
				SINON&#13;
					StrLog =StrLog+  &amp;quot;Erreur Ajout/Mise à jour interventions_nuxi : &amp;quot; + IDInterne + &amp;quot;/&amp;quot; + sCode + RC&#13;
				FIN&#13;
				gnNbDocImporté ++		&#13;
				StrLog = StrLog + [RC + &amp;quot;-------------------FIN ECRITURE INTERVENTION----------------------------&amp;quot; + RC] 	&#13;
				TableauAjouteLigne(tabIDInterneSrvTraité,gtabSyncNuxiDev[IElement].IDInterne,Faux)&#13;
			FIN&#13;
		FIN&#13;
		&#13;
	FIN&#13;
	&#13;
	SI TableauInfo(tabIDInterneSrvTraité,tiNombreLignes) &amp;gt; 0 ALORS &#13;
		SI nNbrEvenementsAgenda&amp;gt;0 ALORS&#13;
			SI fFichierExiste(ExeNuxiDevBureau) ALORS&#13;
				ExeNuxiDevBureau =  ExeNuxiDevBureau  &#13;
				LanceAppli(Caract(34)  + ExeNuxiDevBureau  + Caract(34) + &amp;quot; &amp;quot; + NumDossier + &amp;quot; IMPORT&amp;quot;,exeActif,exeBloquant)&#13;
				&#13;
			FIN&#13;
		FIN&#13;
		fEcritLigne(nIDFichierLog, StrLog)&#13;
		SI nIDFichierLog&amp;gt;0 ALORS fFerme(nIDFichierLog)&#13;
		//----------------------------------------------------Execution de l&amp;apos;import dans logiciel Maître&#13;
		TraceErr(&amp;quot;&amp;quot;,&amp;quot;Fonction Import [Interventions] : &amp;quot; + nNbImport + &amp;quot; ImportInterventionsSAV(x) élément(s)&amp;quot;,&amp;quot;&amp;quot;)&#13;
		SI Contient(Minuscule(StrLog),&amp;quot;erreur&amp;quot;) ALORS&#13;
			TraceErr(&amp;quot;Fonction Import des [Interventions]&amp;quot; + RC + StrLog)&#13;
		SINON&#13;
			TraceErr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;,&amp;quot;Fonction Import des [Interventions]&amp;quot; + RC + StrLog)&#13;
		FIN&#13;
		//----------------------------------------------------Controler la validité de l&amp;apos;import dans la BDD Maître&#13;
		NBtraité = TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		&#13;
		SELON Minuscule(tabListeTypeEnreg[t,1])&#13;
			CAS &amp;quot;intervention&amp;quot;&#13;
				POUR x = 1 À NBtraité&#13;
					sMaReqTemp = &amp;quot;Select IDInterne From [interventions_details_nuxi.fic] Where Notes Like &amp;apos;%|ID SYNC &amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;|%&amp;apos; &amp;quot;&#13;
					//verspressePapier(sMaReqTemp)&#13;
					SI HExécuteRequêteSQL(sdReqTemp,CnxBDDSrc[3],hRequêteSansCorrection,sMaReqTemp) ALORS&#13;
						HLitPremier(sdReqTemp)&#13;
						SI PAS HEnDehors(sdReqTemp) ALORS&#13;
							tabIDInterneSrvTraité[x,2] = Vrai&#13;
						SINON&#13;
							tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot;&#13;
						FIN&#13;
					FIN&#13;
				FIN&#13;
		FIN&#13;
		//----------------------------------------------------Mettre à jour l&amp;apos;évenement sur le srv &#13;
		NBtraité	= TableauInfo(tabIDInterneSrvTraité,tiNombreLignes)&#13;
		InTemp		= &amp;quot;&amp;quot;&#13;
		StrLog		= sNomFic + RC + StrLog&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = Vrai ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		InTemp = &amp;quot;&amp;quot;&#13;
		POUR x = 1 À NBtraité&#13;
			SI tabIDInterneSrvTraité[x,2] = &amp;quot;-1&amp;quot; ALORS&#13;
				InTemp = InTemp + [&amp;quot;,&amp;quot;] + &amp;quot;&amp;apos;&amp;quot; + tabIDInterneSrvTraité[x,1] + &amp;quot;&amp;apos;&amp;quot;&#13;
			FIN&#13;
		FIN&#13;
		SI InTemp &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
			//Mettre à jour le srv de travail et srv de backup&#13;
			MAJ_ServeurSync(InTemp,-1,StrLog,gsCheminImportFtp + fExtraitChemin(sNomFic,fFichier+fExtension))&#13;
		FIN&#13;
		//----------------------------------------------------Diffuser le log sur l&amp;apos;espace client&#13;
		RapportEspaceClient(StrLog,bIsImportValide)&#13;
	FIN&#13;
FIN&#13;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_OPERATEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20240925092456614</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Colleague.Id AS IDInterne, &#13;
Colleague.Id AS Code, &#13;
Colleague.Contact_Name + &amp;apos; &amp;apos; + Colleague.Contact_FirstName AS Libelle, &#13;
&amp;apos;Opérateur&amp;apos; AS TypeNomenclature&#13;
&#13;
FROM Colleague</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ADRESSE-CLIENT</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241127143228232</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Address.sysCreatedDate AS DateCreation, &#13;
Address.sysModifiedDate AS DateModification, &#13;
Address.Id AS IDInterne, &#13;
Address.AddressFields_Address1 AS Adresse_1, &#13;
Address.AddressFields_Address2 AS Adresse_2, &#13;
Address.AddressFields_Address3 AS Adresse_3, &#13;
Address.AddressFields_ZipCode AS CP, &#13;
Address.AddressFields_City AS Ville, &#13;
Address.AddressFields_CountryIsoCode AS IDInternePays,&#13;
Address.AddressFields_State AS Pays, &#13;
Address.AddressFields_Description AS Commentaire, &#13;
Address.AddressFields_Longitude AS Longitude, &#13;
Address.AddressFields_Latitude AS Latitude, &#13;
Address.IsMainInvoicing AS Principale_Facturation, &#13;
Address.IsMainDelivery AS Principale_Livraison, &#13;
Address.AssociatedCustomerId AS IDInterneClient ,&#13;
Address.AddressFields_ThirdName AS Interlocuteur ,&#13;
Address.AddressFields_Description AS Nom_Site,&#13;
Address.AddressFields_Civility AS Civilité,&#13;
Address.IsInvoicingType AS Adr_Facturation,&#13;
Address.IsDeliveryType  AS Adr_Livraison&#13;
&#13;
&#13;
FROM Address , Customer &#13;
&#13;
WHERE &#13;
Address.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Address.AssociatedCustomerId = Customer.Id And&#13;
Address.AssociatedCustomerId &amp;lt;&amp;gt; &amp;apos;&amp;apos; and Customer.Type = 1 and Customer.ActiveState = 0 and  ((FamilyId NOT IN (%7) or FamilyId is Null) and (SubFamilyId NOT IN (%7) or SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>ADRESSE-FOURNISSEUR</Table_Nom>
      <TypeSynchro>C</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241127143316657</Version>
      <CnxSource>1</CnxSource>
      <Requete>SELECT &#13;
Address.sysCreatedDate AS DateCreation, &#13;
Address.sysModifiedDate AS DateModification, &#13;
Address.Id AS IDInterne, &#13;
Address.AddressFields_Address1 AS Adresse_1, &#13;
Address.AddressFields_Address2 AS Adresse_2, &#13;
Address.AddressFields_Address3 AS Adresse_3, &#13;
Address.AddressFields_ZipCode AS CP, &#13;
Address.AddressFields_City AS Ville, &#13;
Address.AddressFields_CountryIsoCode AS IDInternePays,&#13;
Address.AddressFields_State AS Pays, &#13;
Address.AddressFields_Description AS Commentaire, &#13;
Address.AddressFields_Longitude AS Longitude, &#13;
Address.AddressFields_Latitude AS Latitude, &#13;
Address.IsMainInvoicing AS Principale_Facturation, &#13;
Address.IsMainDelivery AS Principale_Livraison, &#13;
Address.AssociatedSupplierId AS IDInterneClient ,&#13;
Address.AddressFields_ThirdName AS Interlocuteur ,&#13;
Address.AddressFields_Description AS Nom_Site,&#13;
Address.AddressFields_Civility AS Civilité,&#13;
Address.IsInvoicingType AS Adr_Facturation,&#13;
Address.IsDeliveryType  AS Adr_Livraison&#13;
&#13;
&#13;
FROM Address , Supplier &#13;
&#13;
WHERE &#13;
Address.sysModifiedDate &amp;gt;= CONVERT(datetime, LEFT(&amp;apos;%3&amp;apos;, 8), 112) + &amp;apos; &amp;apos; + STUFF(STUFF(RIGHT(&amp;apos;%3&amp;apos;, 6), 3, 0, &amp;apos;:&amp;apos;), 6, 0, &amp;apos;:&amp;apos;) AND&#13;
Address.AssociatedSupplierId = Supplier.Id And&#13;
Address.AssociatedSupplierId &amp;lt;&amp;gt; &amp;apos;&amp;apos;  and Supplier.ActiveState = 0 and  ((FamilyId NOT IN (%7) or FamilyId is Null) and (SubFamilyId NOT IN (%7) or SubFamilyId is Null))</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_CATEGORIE</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241211155357574</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT &#13;
[nomenclatures_nuxi.fic].IDInterne AS IDInterne, &#13;
[nomenclatures_nuxi.fic].IDInterne Code, &#13;
[nomenclatures_nuxi.fic].Libelle AS Libelle, &#13;
 &amp;apos;CatInterv&amp;apos; AS TypeNomenclature &#13;
&#13;
FROM [nomenclatures_nuxi.fic] &#13;
WHERE&#13;
[nomenclatures_nuxi.fic].Type_Libelle = &amp;apos;Lst_EtatsSuppInter&amp;apos;</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>INTER_RESSOURCE_M</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20241030113700348</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT&#13;
[materiels_nuxi.FIC].IDInterne   AS IDInterne,&#13;
[materiels_nuxi.FIC].Code  AS Code,&#13;
[materiels_nuxi.FIC].Libelle AS NomLibelle,&#13;
&amp;apos;M&amp;apos; AS TypeRessource,&#13;
[materiels_nuxi.FIC].PrixVenteHT AS PrixVente,&#13;
[materiels_nuxi.FIC].IDInternArticle AS IDInterne_article,&#13;
[materiels_nuxi.FIC].Code_Article AS Code_Article,&#13;
&amp;apos;&amp;apos; AS IDInterne_TVA,&#13;
&amp;apos;&amp;apos; AS  PrixRevient,&#13;
&amp;apos;&amp;apos; AS PrixAchat,&#13;
&amp;apos;&amp;apos; AS TauxTVA&#13;
FROM [materiels_nuxi.FIC]</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>FRAIS_DEPLACEMENT</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250102114157284</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT&#13;
[frais_deplacement_nuxi.FIC].IDInterne AS IDInterne,&#13;
[frais_deplacement_nuxi.FIC].Code AS Code,&#13;
[frais_deplacement_nuxi.FIC].Libelle AS Libelle,&#13;
[frais_deplacement_nuxi.FIC].MontantOuFrais AS PrixVente,&#13;
&amp;apos;FraisDepl&amp;apos; AS TypeNomenclature&#13;
&#13;
FROM [frais_deplacement_nuxi.FIC]</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>-1</Table_Nom>
      <TypeSynchro>I</TypeSynchro>
      <TypeRequête>WD</TypeRequête>
      <Version>20250213081345683</Version>
      <CnxSource>1</CnxSource>
      <Requete>&#13;
&#13;
&#13;
&#13;
&#13;
</Requete>
    </Enregistrement>
    <Enregistrement>
      <Table_Nom>GED_INTER</Table_Nom>
      <TypeSynchro>1</TypeSynchro>
      <TypeRequête>SQL</TypeRequête>
      <Version>20250213075849477</Version>
      <CnxSource>3</CnxSource>
      <Requete>SELECT&#13;
[documents_nuxi.fic].Date_Creation AS DateCreation,&#13;
[documents_nuxi.fic].Date_Modification AS DateModification,&#13;
[documents_nuxi.fic].IDInterne AS IDInterne,&#13;
[documents_nuxi.fic].IDInterne AS Code,&#13;
[documents_nuxi.fic].IDInterneModule AS IDInterne_Table_Externe,&#13;
[documents_nuxi.fic].NomFichier AS NomDocument,&#13;
[documents_nuxi.FIC].IdentifiantDocDrive AS LienPublic,&#13;
[documents_nuxi.FIC].IDDocPublicDrive AS IDDocPublic,&#13;
&amp;apos;Intervention&amp;apos; as Table_Externe&#13;
FROM [documents_nuxi.fic]&#13;
WHERE [documents_nuxi.FIC].IdentifiantDocDrive&amp;lt;&amp;gt;&amp;apos;&amp;apos; OR lower([documents_nuxi.FIC].Nom_Module)= &amp;apos;pdf&amp;apos;</Requete>
    </Enregistrement>
  </RequetesSQL>
  <VersionNuxiAutomate>6.11.23.9</VersionNuxiAutomate>
  <StructureND>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tiers</NomOrigine>
      <Table_Nom>-TIERS-CLIENT</Table_Nom>
      <Champs_Nom>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</Champs_Nom>
      <TableComplete>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</TableComplete>
      <Description>Clients</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331223</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tiers</NomOrigine>
      <Table_Nom>-TIERS-FOURNISSEUR</Table_Nom>
      <Champs_Nom>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</Champs_Nom>
      <TableComplete>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</TableComplete>
      <Description>Fournisseurs</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331223</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tiers</NomOrigine>
      <Table_Nom>-TIERS-PROSPECT</Table_Nom>
      <Champs_Nom>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</Champs_Nom>
      <TableComplete>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</TableComplete>
      <Description>Prospects</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331224</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>adresses</NomOrigine>
      <Table_Nom>ADRESSE-CLIENT</Table_Nom>
      <Champs_Nom>IDadresses_nuxi&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Pays&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
Longitude&#13;
Latitude&#13;
IDInternePays&#13;
LngLatPrécision&#13;
Civilité&#13;
Adresse_3&#13;
Adr_Facturation&#13;
Adr_Livraison&#13;
DateCreation&#13;
DateModification</Champs_Nom>
      <TableComplete>IDadresses_nuxi&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Pays&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
Longitude&#13;
Latitude&#13;
IDInternePays&#13;
LngLatPrécision&#13;
Civilité&#13;
Adresse_3&#13;
Adr_Facturation&#13;
Adr_Livraison&#13;
DateCreation&#13;
DateModification</TableComplete>
      <Description>Adresse Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331225</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contact</NomOrigine>
      <Table_Nom>ADRESSE-COLLABORATEUR</Table_Nom>
      <Champs_Nom>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</Champs_Nom>
      <TableComplete>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</TableComplete>
      <Description>Adresse Collaborateur</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331225</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contact</NomOrigine>
      <Table_Nom>ADRESSE-DEPOT</Table_Nom>
      <Champs_Nom>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</Champs_Nom>
      <TableComplete>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</TableComplete>
      <Description>Adresse des dépôts</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331225</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>adresses</NomOrigine>
      <Table_Nom>ADRESSE-FOURNISSEUR</Table_Nom>
      <Champs_Nom>IDadresses_nuxi&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Pays&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
Longitude&#13;
Latitude&#13;
IDInternePays&#13;
LngLatPrécision&#13;
Civilité&#13;
Adresse_3&#13;
Adr_Facturation&#13;
Adr_Livraison&#13;
DateCreation&#13;
DateModification</Champs_Nom>
      <TableComplete>IDadresses_nuxi&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Pays&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
Longitude&#13;
Latitude&#13;
IDInternePays&#13;
LngLatPrécision&#13;
Civilité&#13;
Adresse_3&#13;
Adr_Facturation&#13;
Adr_Livraison&#13;
DateCreation&#13;
DateModification</TableComplete>
      <Description>Adresse Fournisseur</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331226</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>adresses</NomOrigine>
      <Table_Nom>ADRESSES</Table_Nom>
      <Champs_Nom>IDadresses_nuxi&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Pays&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
Longitude&#13;
Latitude&#13;
IDInternePays&#13;
LngLatPrécision&#13;
Civilité&#13;
Adresse_3&#13;
Adr_Facturation&#13;
Adr_Livraison&#13;
DateCreation&#13;
DateModification</Champs_Nom>
      <TableComplete>IDadresses_nuxi&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Pays&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
Longitude&#13;
Latitude&#13;
IDInternePays&#13;
LngLatPrécision&#13;
Civilité&#13;
Adresse_3&#13;
Adr_Facturation&#13;
Adr_Livraison&#13;
DateCreation&#13;
DateModification</TableComplete>
      <Description>Adresses</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331226</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>adresses_nuxi</NomOrigine>
      <Table_Nom>ADRESSES_NUXI</Table_Nom>
      <Champs_Nom>IDadresses_nuxi&#13;
IDExterneAdresse&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
IDInterne_Pays&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision</Champs_Nom>
      <TableComplete>IDadresses_nuxi&#13;
IDExterneAdresse&#13;
Nom_Site&#13;
IDInterne&#13;
IDInterneClient&#13;
Adresse_1&#13;
Adresse_2&#13;
Ville&#13;
Kilometrage&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Principale_Facturation&#13;
Principale_Livraison&#13;
CP&#13;
Commentaire&#13;
Principale_Intervention&#13;
IDInterne_ZoneIntervention&#13;
Date_Creation&#13;
Date_Modification&#13;
IDInterne_Pays&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision</TableComplete>
      <Description>NB Adresses</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331227</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>affaire</NomOrigine>
      <Table_Nom>AFFAIRE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDAffaire&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateAffaire&#13;
Etape&#13;
PrixAchat&#13;
Note&#13;
NDChampsSpec&#13;
PrixAchat_Previ&#13;
PrixVente&#13;
PrixVente_Previ&#13;
Etape_Libellé</Champs_Nom>
      <TableComplete>IDAffaire&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateAffaire&#13;
Etape&#13;
PrixAchat&#13;
Note&#13;
NDChampsSpec&#13;
PrixAchat_Previ&#13;
PrixVente&#13;
PrixVente_Previ&#13;
Etape_Libellé</TableComplete>
      <Description>Affaires</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331227</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>appareil</NomOrigine>
      <Table_Nom>APPAREIL</Table_Nom>
      <Champs_Nom>IDAppareil&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
CodeArticle&#13;
IDInterne_article&#13;
NumSerie&#13;
CodeTiers&#13;
IDInterne_Tiers&#13;
Marque&#13;
Modele&#13;
IDInerne_Situation&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
GtieMODébut&#13;
GtieMOFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Tag&#13;
Nom_Client&#13;
Adresse1&#13;
Adresse2&#13;
Ville&#13;
IDInterne_Pays&#13;
CP&#13;
LivraisonNom</Champs_Nom>
      <TableComplete>IDAppareil&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
CodeArticle&#13;
IDInterne_article&#13;
NumSerie&#13;
CodeTiers&#13;
IDInterne_Tiers&#13;
Marque&#13;
Modele&#13;
IDInerne_Situation&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
GtieMODébut&#13;
GtieMOFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Tag&#13;
Nom_Client&#13;
Adresse1&#13;
Adresse2&#13;
Ville&#13;
IDInterne_Pays&#13;
CP&#13;
LivraisonNom</TableComplete>
      <Description>Appareils</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331227</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>appareils_nuxi</NomOrigine>
      <Table_Nom>APPAREILS_NUXI</Table_Nom>
      <Champs_Nom>IDappareils_nuxi&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneClient&#13;
DateCreationFiche&#13;
NumSerie&#13;
Libelle&#13;
Description&#13;
IDInterneAdresse&#13;
DateVente&#13;
DateMiseEnService&#13;
PrixVenteHT&#13;
IDInterneTVA&#13;
PrixVenteTTC&#13;
IDInterne_Technicien&#13;
DateDebutGarantie&#13;
DateFinGarantie&#13;
Couverture&#13;
Notes&#13;
Libelle_Article&#13;
DateDebutMO&#13;
DateFinMO&#13;
DateDebutFournitures&#13;
DateFinFournitures&#13;
DateDebutDeplacement&#13;
DateFinDeplacement&#13;
Actif&#13;
Date_Creation&#13;
Date_Modification&#13;
IDInterne_Pays&#13;
FenSpecifique&#13;
IdInterneLigneFacturation&#13;
Code_Client&#13;
Nom_Client&#13;
NomSite&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
Emplacement&#13;
LngLatPrécision&#13;
Tag&#13;
Compteur&#13;
DateExpiration</Champs_Nom>
      <TableComplete>IDappareils_nuxi&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneClient&#13;
DateCreationFiche&#13;
NumSerie&#13;
Libelle&#13;
Description&#13;
IDInterneAdresse&#13;
DateVente&#13;
DateMiseEnService&#13;
PrixVenteHT&#13;
IDInterneTVA&#13;
PrixVenteTTC&#13;
IDInterne_Technicien&#13;
DateDebutGarantie&#13;
DateFinGarantie&#13;
Couverture&#13;
Notes&#13;
Libelle_Article&#13;
DateDebutMO&#13;
DateFinMO&#13;
DateDebutFournitures&#13;
DateFinFournitures&#13;
DateDebutDeplacement&#13;
DateFinDeplacement&#13;
Actif&#13;
Date_Creation&#13;
Date_Modification&#13;
IDInterne_Pays&#13;
FenSpecifique&#13;
IdInterneLigneFacturation&#13;
Code_Client&#13;
Nom_Client&#13;
NomSite&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
Emplacement&#13;
LngLatPrécision&#13;
Tag&#13;
Compteur&#13;
DateExpiration</TableComplete>
      <Description>NB Appareils</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331228</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>article</NomOrigine>
      <Table_Nom>ARTICLE</Table_Nom>
      <Champs_Nom>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</Champs_Nom>
      <TableComplete>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</TableComplete>
      <Description>Articles</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
&#13;
&#13;
LienPhoto		est une chaîne&#13;
ImageTemp		est une image&#13;
xCoefReducImage	est un monétaire&#13;
sIDArt			est une chaine	= (TableSrc.IDInterne)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp		est une Chaine&#13;
POUR TOUT TableSrc &#13;
SI gbFiltrerArticleUtilisé = Faux _OU_ (gbFiltrerArticleUtilisé = Vrai ET (TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableSrc.IDInterne) &amp;lt;&amp;gt;-1 _OU_ DateDifférence(TableSrc.DateModification..PartieDate,DateSys()) &amp;lt;= 30)) ALORS &#13;
SI gbFiltrerArticleUtilisé = Vrai ET TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableSrc.IDInterne) = -1 ALORS&#13;
TableauAjoute(gtabLstArticleAutorisé,TableSrc.IDInterne)&#13;
FIN&#13;
&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
SI gbSynchroniserLesPhotos = Faux ALORS&#13;
ListeRubCopie = Remplace(ListeRubCopie,RC+&amp;quot;Photo&amp;quot;+RC, RC)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp						= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI gbSynchroniserLesPhotos = Vrai ALORS&#13;
SI  TableDest.photo &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ Taille(TableSrc.photo) &amp;lt; 300 _ET_ (fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo)  OU fFichierExiste( TableSrc.photo)) ALORS&#13;
SI fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo) ALORS&#13;
LienPhoto = gsCONFIG_PHOTO  + TableSrc.photo&#13;
SINON &#13;
LienPhoto =  TableSrc.photo&#13;
FIN&#13;
ImageTemp						= &amp;quot;&amp;quot;&#13;
ImageTemp..CouleurRemplissage	= Blanc&#13;
ImageTemp						=  dChargeImage(LienPhoto,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
SINON SI Taille(TableSrc.photo) &amp;gt;= 300 ALORS&#13;
ImageTemp						=  dChargeImage(TableSrc.photo,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
FIN&#13;
SINON&#13;
TableDest.Photo= &amp;quot;&amp;quot;&#13;
FIN&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN&#13;
FIN&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331228</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>article</NomOrigine>
      <Table_Nom>ARTICLE_GAMME</Table_Nom>
      <Champs_Nom>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</Champs_Nom>
      <TableComplete>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</TableComplete>
      <Description>Articles Gammes</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
&#13;
RtfStrTemp		est une Chaine&#13;
LienPhoto		est une chaîne&#13;
ImageTemp		est une image&#13;
xCoefReducImage	est un monétaire&#13;
IDArt est une chaine = (TableSrc.IDInterne)&#13;
&#13;
POUR TOUT TableSrc &#13;
&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
SI gbSynchroniserLesPhotos = Faux ALORS&#13;
ListeRubCopie = Remplace(ListeRubCopie,RC+&amp;quot;Photo&amp;quot;+RC, RC)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp						= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI gbSynchroniserLesPhotos = Vrai ALORS&#13;
SI  TableDest.photo &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ Taille(TableSrc.photo) &amp;lt; 300 _ET_ (fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo)  OU fFichierExiste( TableSrc.photo)) ALORS&#13;
SI fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo) ALORS&#13;
LienPhoto = gsCONFIG_PHOTO  + TableSrc.photo&#13;
SINON &#13;
LienPhoto =  TableSrc.photo&#13;
FIN&#13;
ImageTemp						= &amp;quot;&amp;quot;&#13;
ImageTemp..CouleurRemplissage	= Blanc&#13;
ImageTemp						=  dChargeImage(LienPhoto,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
SINON SI Taille(TableSrc.photo) &amp;gt;= 300 ALORS&#13;
ImageTemp						=  dChargeImage(TableSrc.photo,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
FIN&#13;
SINON&#13;
TableDest.Photo= &amp;quot;&amp;quot;&#13;
FIN&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
&#13;
FIN&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331229</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>article</NomOrigine>
      <Table_Nom>ARTICLE_OUVRAGE</Table_Nom>
      <Champs_Nom>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</Champs_Nom>
      <TableComplete>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</TableComplete>
      <Description>Articles Ouvrages</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
&#13;
&#13;
LienPhoto		est une chaîne&#13;
ImageTemp		est une image&#13;
xCoefReducImage	est un monétaire&#13;
sIDArt			est une chaine	= (TableSrc.IDInterne)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp		est une Chaine&#13;
POUR TOUT TableSrc &#13;
SI gbFiltrerArticleUtilisé = Faux _OU_ (gbFiltrerArticleUtilisé = Vrai ET (TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableSrc.IDInterne) &amp;lt;&amp;gt;-1 _OU_ DateDifférence(TableSrc.DateModification..PartieDate,DateSys()) &amp;lt;= 30)) ALORS &#13;
SI gbFiltrerArticleUtilisé = Vrai ET TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableSrc.IDInterne) = -1 ALORS&#13;
TableauAjoute(gtabLstArticleAutorisé,TableSrc.IDInterne)&#13;
FIN&#13;
&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
SI gbSynchroniserLesPhotos = Faux ALORS&#13;
ListeRubCopie = Remplace(ListeRubCopie,RC+&amp;quot;Photo&amp;quot;+RC, RC)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp						= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI gbSynchroniserLesPhotos = Vrai ALORS&#13;
SI  TableDest.photo &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ Taille(TableSrc.photo) &amp;lt; 300 _ET_ (fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo)  OU fFichierExiste( TableSrc.photo)) ALORS&#13;
SI fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo) ALORS&#13;
LienPhoto = gsCONFIG_PHOTO  + TableSrc.photo&#13;
SINON &#13;
LienPhoto =  TableSrc.photo&#13;
FIN&#13;
ImageTemp						= &amp;quot;&amp;quot;&#13;
ImageTemp..CouleurRemplissage	= Blanc&#13;
ImageTemp						=  dChargeImage(LienPhoto,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
SINON SI Taille(TableSrc.photo) &amp;gt;= 300 ALORS&#13;
ImageTemp						=  dChargeImage(TableSrc.photo,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
FIN&#13;
SINON&#13;
TableDest.Photo= &amp;quot;&amp;quot;&#13;
FIN&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN&#13;
FIN&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331229</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>article_serielot</NomOrigine>
      <Table_Nom>ARTICLE_SERIELOT</Table_Nom>
      <Champs_Nom>IDArticle_SerieLot&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterne_Dépôt&#13;
Stock_Réel&#13;
Stock_Virtuel&#13;
SérieLot&#13;
DLUO&#13;
DateCreation&#13;
DateModification</Champs_Nom>
      <TableComplete>IDArticle_SerieLot&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterne_Dépôt&#13;
Stock_Réel&#13;
Stock_Virtuel&#13;
SérieLot&#13;
DLUO&#13;
DateCreation&#13;
DateModification</TableComplete>
      <Description>Articles Série/Lot/DLUO</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331230</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>article</NomOrigine>
      <Table_Nom>ARTICLE_TEXTE</Table_Nom>
      <Champs_Nom>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</Champs_Nom>
      <TableComplete>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</TableComplete>
      <Description>Articles Textes</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
&#13;
&#13;
LienPhoto		est une chaîne&#13;
ImageTemp		est une image&#13;
xCoefReducImage	est un monétaire&#13;
sIDArt			est une chaine	= (TableSrc.IDInterne)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp		est une Chaine&#13;
POUR TOUT TableSrc &#13;
SI gbFiltrerArticleUtilisé = Faux _OU_ (gbFiltrerArticleUtilisé = Vrai ET (TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableSrc.IDInterne) &amp;lt;&amp;gt;-1 _OU_ DateDifférence(TableSrc.DateModification..PartieDate,DateSys()) &amp;lt;= 30)) ALORS &#13;
SI gbFiltrerArticleUtilisé = Vrai ET TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableSrc.IDInterne) = -1 ALORS&#13;
TableauAjoute(gtabLstArticleAutorisé,TableSrc.IDInterne)&#13;
FIN&#13;
&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
SI gbSynchroniserLesPhotos = Faux ALORS&#13;
ListeRubCopie = Remplace(ListeRubCopie,RC+&amp;quot;Photo&amp;quot;+RC, RC)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp						= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI gbSynchroniserLesPhotos = Vrai ALORS&#13;
SI  TableDest.photo &amp;lt;&amp;gt; &amp;quot;&amp;quot; _ET_ Taille(TableSrc.photo) &amp;lt; 300 _ET_ (fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo)  OU fFichierExiste( TableSrc.photo)) ALORS&#13;
SI fFichierExiste(gsCONFIG_PHOTO  + TableSrc.photo) ALORS&#13;
LienPhoto = gsCONFIG_PHOTO  + TableSrc.photo&#13;
SINON &#13;
LienPhoto =  TableSrc.photo&#13;
FIN&#13;
ImageTemp						= &amp;quot;&amp;quot;&#13;
ImageTemp..CouleurRemplissage	= Blanc&#13;
ImageTemp						=  dChargeImage(LienPhoto,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
SINON SI Taille(TableSrc.photo) &amp;gt;= 300 ALORS&#13;
ImageTemp						=  dChargeImage(TableSrc.photo,imgDéfaut)&#13;
SI ImageTemp..Largeur &amp;gt; ImageTemp..Hauteur ALORS&#13;
xCoefReducImage = ImageTemp..Largeur / 400 &#13;
SINON&#13;
xCoefReducImage = ImageTemp..Hauteur / 400 &#13;
FIN&#13;
SI xCoefReducImage &amp;lt; 1 ALORS xCoefReducImage  = 1&#13;
dRedimensionne(ImageTemp,Arrondi(ImageTemp..Largeur / xCoefReducImage,0), Arrondi(ImageTemp..Hauteur / xCoefReducImage,0),drHomothétiqueCentré)&#13;
TableDest.photo = dSauveImageJPEG(ImageTemp,enMémoire,50)&#13;
FIN&#13;
SINON&#13;
TableDest.Photo= &amp;quot;&amp;quot;&#13;
FIN&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN&#13;
FIN&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331230</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>articlefournisseur</NomOrigine>
      <Table_Nom>ARTICLEFOURNISSEUR</Table_Nom>
      <Champs_Nom>IDArticleFournisseur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
IDInterneUnite_Achat&#13;
ReferenceFournisseur&#13;
CodeBarre</Champs_Nom>
      <TableComplete>IDArticleFournisseur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
IDInterneUnite_Achat&#13;
ReferenceFournisseur&#13;
CodeBarre</TableComplete>
      <Description>Articles des Fournisseurs</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331230</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>articlelie</NomOrigine>
      <Table_Nom>ARTICLELIE</Table_Nom>
      <Champs_Nom>IDArticleLie&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneArticle_Lié&#13;
TypeLiaison&#13;
Quantités&#13;
Gratuit&#13;
Ordre&#13;
MultiplierQuantité&#13;
Valoriser&#13;
Unite&#13;
LibelleArticle_Lié&#13;
DesignationArticle_Lié&#13;
CodeArticle_Lié&#13;
IDInterneArticleLié_Type&#13;
PrixAchat&#13;
PrixVente&#13;
NePasRemonterCetteLigne</Champs_Nom>
      <TableComplete>IDArticleLie&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneArticle_Lié&#13;
TypeLiaison&#13;
Quantités&#13;
Gratuit&#13;
Ordre&#13;
MultiplierQuantité&#13;
Valoriser&#13;
Unite&#13;
LibelleArticle_Lié&#13;
DesignationArticle_Lié&#13;
CodeArticle_Lié&#13;
IDInterneArticleLié_Type&#13;
PrixAchat&#13;
PrixVente&#13;
NePasRemonterCetteLigne</TableComplete>
      <Description>Articles Liés</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331231</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>articles_nuxi</NomOrigine>
      <Table_Nom>ARTICLES_NUXI</Table_Nom>
      <Champs_Nom>IDArticle_nuxi&#13;
IDInterne&#13;
Duree_Garantie&#13;
Libelle_DureeGarantie&#13;
Couverture&#13;
Condition&#13;
Notes&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique&#13;
Code_Article</Champs_Nom>
      <TableComplete>IDArticle_nuxi&#13;
IDInterne&#13;
Duree_Garantie&#13;
Libelle_DureeGarantie&#13;
Couverture&#13;
Condition&#13;
Notes&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique&#13;
Code_Article</TableComplete>
      <Description>NB Articles</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331231</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>articlestock</NomOrigine>
      <Table_Nom>ARTICLESTOCK</Table_Nom>
      <Champs_Nom>IDArticleStock&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneDepot&#13;
StockReel&#13;
StockVirtuel&#13;
Emplacement&#13;
IDInterne_Emplacement</Champs_Nom>
      <TableComplete>IDArticleStock&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneDepot&#13;
StockReel&#13;
StockVirtuel&#13;
Emplacement&#13;
IDInterne_Emplacement</TableComplete>
      <Description>Stock par dépot</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331231</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331231</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>BACKOFFICE</Table_Nom>
      <Description>Traitement du BackOffice</Description>
      <Champs_Nom/>
      <NomOrigine>societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>BANQUE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Banque</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331232</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331232</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>BDD_SPECIFIQUE</Table_Nom>
      <Description>Trt. Spéc. des Bases</Description>
      <Champs_Nom>IDSociété&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
Fax&#13;
Mail&#13;
Web&#13;
InfoEntête&#13;
Logo&#13;
Siret&#13;
APE&#13;
RIB&#13;
InfoPied&#13;
TVAIntra&#13;
Capital&#13;
RCS&#13;
NbDécimalesQté&#13;
NbDécimalesPrix&#13;
NbDécumalesPoids&#13;
NbDécimalesVolume&#13;
FormeJuridique&#13;
LgCptTiers&#13;
LgCptArt&#13;
CarComplCpteTiers&#13;
API_Key&#13;
Longitude&#13;
Latitude&#13;
ProtectionDoc</Champs_Nom>
      <NomOrigine>societe</NomOrigine>
      <TableComplete>IDSociété&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
Fax&#13;
Mail&#13;
Web&#13;
InfoEntête&#13;
Logo&#13;
Siret&#13;
APE&#13;
RIB&#13;
InfoPied&#13;
TVAIntra&#13;
Capital&#13;
RCS&#13;
NbDécimalesQté&#13;
NbDécimalesPrix&#13;
NbDécumalesPoids&#13;
NbDécimalesVolume&#13;
FormeJuridique&#13;
LgCptTiers&#13;
LgCptArt&#13;
CarComplCpteTiers&#13;
API_Key&#13;
Longitude&#13;
Latitude&#13;
ProtectionDoc</TableComplete>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>inventaire</NomOrigine>
      <Table_Nom>BE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</TableComplete>
      <Description>Bon d&amp;apos;entrée en stock</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331233</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>inventaire</NomOrigine>
      <Table_Nom>BS</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</TableComplete>
      <Description>Bon de sortie de stock</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331233</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>chantier</NomOrigine>
      <Table_Nom>CHANTIER</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDChantier&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateDébut&#13;
DateFin&#13;
IDInterne_Affaire&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInternePays&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
IDInterne_Tiers&#13;
LngLatPrécision&#13;
Statut</Champs_Nom>
      <TableComplete>IDChantier&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateDébut&#13;
DateFin&#13;
IDInterne_Affaire&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInternePays&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
IDInterne_Tiers&#13;
LngLatPrécision&#13;
Statut</TableComplete>
      <Description>Chantiers</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331233</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CIVILITE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Civilité</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331233</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>clients_nuxi</NomOrigine>
      <Table_Nom>CLIENTS_NUXI</Table_Nom>
      <Description>NB Clients</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331234</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CMB_EMPLACEMENT</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Combo Liste des emplacements</Description>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331234</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>sousfamille</NomOrigine>
      <Table_Nom>CMB_FAMILLEARTICLE</Table_Nom>
      <Champs_Nom>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</Champs_Nom>
      <TableComplete>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</TableComplete>
      <Description>Combo Famille Article</Description>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331234</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>sousfamille</NomOrigine>
      <Table_Nom>CMB_FAMILLECLIENT</Table_Nom>
      <Champs_Nom>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</Champs_Nom>
      <TableComplete>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</TableComplete>
      <Description>Combo Famille Client</Description>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331234</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>sousfamille</NomOrigine>
      <Table_Nom>CMB_FAMILLEFOURNISSEUR</Table_Nom>
      <Champs_Nom>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</Champs_Nom>
      <TableComplete>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</TableComplete>
      <Description>Combo Famille Fournisseur</Description>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331235</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CMB_GROUPEARTICLE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Combo Liste des groupes d&amp;apos;articles</Description>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331235</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>collaborateur</NomOrigine>
      <Champs_Nom>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</Champs_Nom>
      <TableComplete>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</TableComplete>
      <Description>Combo Collaborateurs</Description>
      <Table_Nom>CMB_SALARIES</Table_Nom>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331235</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CMB_STOCK_DEPOT</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Combo Liste des dépots</Description>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331236</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>collaborateur</NomOrigine>
      <Champs_Nom>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</Champs_Nom>
      <TableComplete>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</TableComplete>
      <Description>Combo Techniciens</Description>
      <Table_Nom>CMB_TECHNICIENS</Table_Nom>
      <CodeCopie/>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331236</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>articlelie</NomOrigine>
      <Table_Nom>COMPOSANTS-LIES</Table_Nom>
      <Champs_Nom>IDArticleLie&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneArticle_Lié&#13;
TypeLiaison&#13;
Quantités&#13;
Gratuit&#13;
Ordre&#13;
MultiplierQuantité&#13;
Valoriser&#13;
Unite&#13;
LibelleArticle_Lié&#13;
DesignationArticle_Lié&#13;
CodeArticle_Lié&#13;
IDInterneArticleLié_Type&#13;
PrixAchat&#13;
PrixVente&#13;
NePasRemonterCetteLigne</Champs_Nom>
      <TableComplete>IDArticleLie&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterneArticle&#13;
IDInterneArticle_Lié&#13;
TypeLiaison&#13;
Quantités&#13;
Gratuit&#13;
Ordre&#13;
MultiplierQuantité&#13;
Valoriser&#13;
Unite&#13;
LibelleArticle_Lié&#13;
DesignationArticle_Lié&#13;
CodeArticle_Lié&#13;
IDInterneArticleLié_Type&#13;
PrixAchat&#13;
PrixVente&#13;
NePasRemonterCetteLigne</TableComplete>
      <Description>Composants Liés</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331236</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>contact</NomOrigine>
      <Table_Nom>CONTACT</Table_Nom>
      <Champs_Nom>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</Champs_Nom>
      <TableComplete>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</TableComplete>
      <Description>Contacts</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331236</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contact</NomOrigine>
      <Table_Nom>CONTACT-CLIENT</Table_Nom>
      <Champs_Nom>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</Champs_Nom>
      <TableComplete>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</TableComplete>
      <Description>Contacts Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331237</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contact</NomOrigine>
      <Table_Nom>CONTACT-FOURNISSEUR</Table_Nom>
      <Champs_Nom>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</Champs_Nom>
      <TableComplete>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</TableComplete>
      <Description>Contacts Fournisseurs</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331237</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contact</NomOrigine>
      <Table_Nom>CONTACT-PROSPECT</Table_Nom>
      <Champs_Nom>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</Champs_Nom>
      <TableComplete>IDContact&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeTiers&#13;
IDInterneTiers&#13;
Nom&#13;
Prenom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
Civilite&#13;
Mail&#13;
Fax&#13;
ContactFonction&#13;
ContactService&#13;
IDInternePays&#13;
Note&#13;
NDChampsSpec&#13;
Pays&#13;
Longitude&#13;
Latitude&#13;
CodeTiers&#13;
IDInterneCollaborateur&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Role&#13;
Adresse3&#13;
Contact_Facturation&#13;
Contact_Livraison</TableComplete>
      <Description>Contacts Prospects</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331237</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contrat</NomOrigine>
      <Table_Nom>CONTRAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDContrat&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieMODébut&#13;
GtieMOFin&#13;
Note&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
DateDébut&#13;
DateFin&#13;
IDInterne_Collaborateur&#13;
NomTiers&#13;
NDChampsSpec&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Tel&#13;
GSM&#13;
Mail&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Famille&#13;
Libellé_Famille</Champs_Nom>
      <TableComplete>IDContrat&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieMODébut&#13;
GtieMOFin&#13;
Note&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
DateDébut&#13;
DateFin&#13;
IDInterne_Collaborateur&#13;
NomTiers&#13;
NDChampsSpec&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Tel&#13;
GSM&#13;
Mail&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
FenSpecifique&#13;
IDInterne_Famille&#13;
Libellé_Famille</TableComplete>
      <Description>Intervention Contrat</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//		Trace(&amp;quot;Contrat &amp;quot; + ListeRubPerso + nNbTabChampsFenSpec)&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
//			trace(StrXML)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331239</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contratappareil</NomOrigine>
      <Table_Nom>CONTRATAPPAREIL</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDContratAppareil&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
iDInterne_Contrat&#13;
IDinterne_Appareil&#13;
IDInterne_article&#13;
Libelle&#13;
NumSerie&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieMODébut&#13;
GtieMOFin</Champs_Nom>
      <TableComplete>IDContratAppareil&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
iDInterne_Contrat&#13;
IDinterne_Appareil&#13;
IDInterne_article&#13;
Libelle&#13;
NumSerie&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieMODébut&#13;
GtieMOFin</TableComplete>
      <Description>Intervention Contrat Appareils</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331239</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>contrats_nuxi</NomOrigine>
      <Table_Nom>CONTRATS_NUXI</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDcontrats_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
IDInterneFamille&#13;
Description&#13;
Type&#13;
Duree&#13;
TypeDuree&#13;
renouvellement_auto&#13;
temps_max_Inter&#13;
nombre_max_Inter&#13;
montant_ht&#13;
IDInterneTVA&#13;
IDInternePeriodicite&#13;
IndInterneClient&#13;
IDInternArticle&#13;
IDInterneZoneIntervention&#13;
Kilometrage&#13;
PrixAuKm&#13;
MontantOuForfais&#13;
IDInterneContratType&#13;
Préavis&#13;
TypeFacturation&#13;
DateFacturation&#13;
IDInternePeriodiciteFacturation&#13;
ACompterDuFacturation&#13;
Etat&#13;
Préavis_applique&#13;
TypeDecompte&#13;
Notes&#13;
IDInterneFraisDeplacement&#13;
Temps_Inter_Reporté&#13;
Nombre_Inter_Reporté&#13;
Reporte_CompteurRestant&#13;
Alerte_Decompte&#13;
Seuil_AlerteDecompteTemps&#13;
Seuil_AlerteDecompteNmbre&#13;
CodeClient&#13;
NomClient&#13;
Contrat_Actif&#13;
IdInternTierPayeur&#13;
Date_Creation&#13;
Date_Modification&#13;
Couverture&#13;
DateDebut_Piece&#13;
DateFin_Piece&#13;
DateDebut_MO&#13;
DateFin_MO&#13;
DateDebut_FD&#13;
DateFin_FD&#13;
IdInterne_ContratSuivant&#13;
DateDebut_Contrat&#13;
DateFin_Contrat&#13;
IdInterneCreerPar&#13;
FenSpecifique&#13;
IDInterne_affaire&#13;
DateResiliation&#13;
DateCreation_Contrat&#13;
Log_Facture&#13;
Contrat_Facture&#13;
IdInterneContrat_Origine&#13;
IdInterne_EtatSupp&#13;
temps_consommé_inter&#13;
nbr_consommé_inter&#13;
Observations_Intervention&#13;
IDInterneCommercial&#13;
IdInterne_IndiceAugmentation&#13;
Texte_Augmentation&#13;
IdInterne_ModeReglement</Champs_Nom>
      <TableComplete>IDcontrats_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
IDInterneFamille&#13;
Description&#13;
Type&#13;
Duree&#13;
TypeDuree&#13;
renouvellement_auto&#13;
temps_max_Inter&#13;
nombre_max_Inter&#13;
montant_ht&#13;
IDInterneTVA&#13;
IDInternePeriodicite&#13;
IndInterneClient&#13;
IDInternArticle&#13;
IDInterneZoneIntervention&#13;
Kilometrage&#13;
PrixAuKm&#13;
MontantOuForfais&#13;
IDInterneContratType&#13;
Préavis&#13;
TypeFacturation&#13;
DateFacturation&#13;
IDInternePeriodiciteFacturation&#13;
ACompterDuFacturation&#13;
Etat&#13;
Préavis_applique&#13;
TypeDecompte&#13;
Notes&#13;
IDInterneFraisDeplacement&#13;
Temps_Inter_Reporté&#13;
Nombre_Inter_Reporté&#13;
Reporte_CompteurRestant&#13;
Alerte_Decompte&#13;
Seuil_AlerteDecompteTemps&#13;
Seuil_AlerteDecompteNmbre&#13;
CodeClient&#13;
NomClient&#13;
Contrat_Actif&#13;
IdInternTierPayeur&#13;
Date_Creation&#13;
Date_Modification&#13;
Couverture&#13;
DateDebut_Piece&#13;
DateFin_Piece&#13;
DateDebut_MO&#13;
DateFin_MO&#13;
DateDebut_FD&#13;
DateFin_FD&#13;
IdInterne_ContratSuivant&#13;
DateDebut_Contrat&#13;
DateFin_Contrat&#13;
IdInterneCreerPar&#13;
FenSpecifique&#13;
IDInterne_affaire&#13;
DateResiliation&#13;
DateCreation_Contrat&#13;
Log_Facture&#13;
Contrat_Facture&#13;
IdInterneContrat_Origine&#13;
IdInterne_EtatSupp&#13;
temps_consommé_inter&#13;
nbr_consommé_inter&#13;
Observations_Intervention&#13;
IDInterneCommercial&#13;
IdInterne_IndiceAugmentation&#13;
Texte_Augmentation&#13;
IdInterne_ModeReglement</TableComplete>
      <Description>NB Contrats</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331239</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>activite</NomOrigine>
      <Table_Nom>CRM_ACTIVITE</Table_Nom>
      <Description>CRM Activité</Description>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDActivité&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_TypeActivité&#13;
IDInterne_SousTypeActivité&#13;
IDinterne_Contact&#13;
IDInterne_Leads&#13;
IDInterne_Tiers&#13;
TypeTiers&#13;
IDInterne_Opportunité&#13;
Code_Contact&#13;
Code_Leads&#13;
Code_Tiers&#13;
Code_Opportunité&#13;
IDInterne_Collaborateur_De&#13;
IdInterne_Collaborateur_Pour&#13;
Status&#13;
IDInterne_Priorité&#13;
Sujet&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
Libelle&#13;
DateHeureRappel&#13;
IDagendaExterne&#13;
IDInterne_Campage&#13;
Code_Campagne&#13;
Code_Collaborateur_De&#13;
Code_Collaborateur_Pour&#13;
Corps_Msg&#13;
Rapport&#13;
Note&#13;
TypeActivité&#13;
SousTypeActivité&#13;
Contact&#13;
Leads&#13;
Tiers&#13;
Opportunité&#13;
Collaborateur_De&#13;
Collaborateur_Pour&#13;
Campagne&#13;
NDChampsSpec&#13;
IDInterne_Status&#13;
Priorité&#13;
FenSpecifique&#13;
VisiblePlanning</Champs_Nom>
      <TableComplete>IDActivité&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_TypeActivité&#13;
IDInterne_SousTypeActivité&#13;
IDinterne_Contact&#13;
IDInterne_Leads&#13;
IDInterne_Tiers&#13;
TypeTiers&#13;
IDInterne_Opportunité&#13;
Code_Contact&#13;
Code_Leads&#13;
Code_Tiers&#13;
Code_Opportunité&#13;
IDInterne_Collaborateur_De&#13;
IdInterne_Collaborateur_Pour&#13;
Status&#13;
IDInterne_Priorité&#13;
Sujet&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
Libelle&#13;
DateHeureRappel&#13;
IDagendaExterne&#13;
IDInterne_Campage&#13;
Code_Campagne&#13;
Code_Collaborateur_De&#13;
Code_Collaborateur_Pour&#13;
Corps_Msg&#13;
Rapport&#13;
Note&#13;
TypeActivité&#13;
SousTypeActivité&#13;
Contact&#13;
Leads&#13;
Tiers&#13;
Opportunité&#13;
Collaborateur_De&#13;
Collaborateur_Pour&#13;
Campagne&#13;
NDChampsSpec&#13;
IDInterne_Status&#13;
Priorité&#13;
FenSpecifique&#13;
VisiblePlanning</TableComplete>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331240</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_ACTIVITE_PRIORITE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Activité Priorité</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331240</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_ACTIVITE_SOUS_TYPE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Activité Sous Type</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331240</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_ACTIVITE_STATUS</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Activité Status</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331240</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_ACTIVITE_SUJET</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Activité Sujet</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331242</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_ACTIVITE_TYPE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Activité Type</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331242</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>campagne</NomOrigine>
      <Table_Nom>CRM_CAMPAGNE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDCampagne&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
Statut&#13;
FinLe&#13;
DebutLe&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDCampagne&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
Statut&#13;
FinLe&#13;
DebutLe&#13;
FenSpecifique</TableComplete>
      <Description>CRM Campagne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331242</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_LEAD_STATUS</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Lead Status</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331243</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>leads</NomOrigine>
      <Table_Nom>CRM_LEADS</Table_Nom>
      <Description>CRM Leads</Description>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLeads&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Pays&#13;
IDInterne_Pays&#13;
Tel&#13;
GSM&#13;
Mail&#13;
Contact_Nom&#13;
Contact_Prenom&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
Contact_civilité&#13;
Contact_Fonction&#13;
IDInterne_Statut&#13;
Statut&#13;
IDInterne_Origine&#13;
Origine&#13;
IDInterne_Evaluation&#13;
Evaluation&#13;
IDInterne_Collaborateur&#13;
IDINterne_Type&#13;
Type&#13;
Note&#13;
NDChampsSpec&#13;
Converti&#13;
IDInterne_Tiers&#13;
Libelle&#13;
Code_Tiers&#13;
FenSpecifique&#13;
IDInterneFamille&#13;
IDInterneSousFamille</Champs_Nom>
      <TableComplete>IDLeads&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Pays&#13;
IDInterne_Pays&#13;
Tel&#13;
GSM&#13;
Mail&#13;
Contact_Nom&#13;
Contact_Prenom&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
Contact_civilité&#13;
Contact_Fonction&#13;
IDInterne_Statut&#13;
Statut&#13;
IDInterne_Origine&#13;
Origine&#13;
IDInterne_Evaluation&#13;
Evaluation&#13;
IDInterne_Collaborateur&#13;
IDINterne_Type&#13;
Type&#13;
Note&#13;
NDChampsSpec&#13;
Converti&#13;
IDInterne_Tiers&#13;
Libelle&#13;
Code_Tiers&#13;
FenSpecifique&#13;
IDInterneFamille&#13;
IDInterneSousFamille</TableComplete>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331243</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_LEADS_EVALUATION</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Lead Evaluation</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331243</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_LEADS_ORIGINE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Lead Origine</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331244</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_LEADS_TYPE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Lead Type</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331244</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>opportunite</NomOrigine>
      <Table_Nom>CRM_OPPORTUNITE</Table_Nom>
      <Description>CRM Opportunité</Description>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDOpportunité&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Date&#13;
DateCloture&#13;
Code_Tiers&#13;
IDInterne_Tiers&#13;
Tiers&#13;
TypeTiers&#13;
Code_Campagne&#13;
IDInterne_Camapgne&#13;
Campagne&#13;
Type&#13;
IDInterne_Collaborateur&#13;
Etape&#13;
IDInterne_Etape&#13;
MontantEstimé&#13;
Note&#13;
NDChampsSpec&#13;
IDInterne_Cloture&#13;
Cloture&#13;
FenSpecifique&#13;
Probabilité&#13;
MontantRéalisé</Champs_Nom>
      <TableComplete>IDOpportunité&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Date&#13;
DateCloture&#13;
Code_Tiers&#13;
IDInterne_Tiers&#13;
Tiers&#13;
TypeTiers&#13;
Code_Campagne&#13;
IDInterne_Camapgne&#13;
Campagne&#13;
Type&#13;
IDInterne_Collaborateur&#13;
Etape&#13;
IDInterne_Etape&#13;
MontantEstimé&#13;
Note&#13;
NDChampsSpec&#13;
IDInterne_Cloture&#13;
Cloture&#13;
FenSpecifique&#13;
Probabilité&#13;
MontantRéalisé</TableComplete>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331244</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_OPPORTUNITE_CLOTURE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Opportunité Cloture</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331244</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>CRM_OPPORTUNITE_ETAPE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>CRM Opportunité Etape</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331245</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>googleagenda</NomOrigine>
      <Table_Nom>CRM_PLANNING</Table_Nom>
      <Limite_Histo_Defaut>30</Limite_Histo_Defaut>
      <Champs_Nom>IDGoogleAgenda&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
Lieu&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
JournéeEntière&#13;
VisiblePlanning&#13;
AuteurNom&#13;
IdInterne_Parent&#13;
TypeEvenement&#13;
IDInterne_Tiers&#13;
TypeTiers&#13;
IDInterne_Autre&#13;
TypeAutre&#13;
IDInterneCollaborateur&#13;
DescriptionSuite&#13;
IdentifiantGoogle</Champs_Nom>
      <TableComplete>IDGoogleAgenda&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
Lieu&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
JournéeEntière&#13;
VisiblePlanning&#13;
AuteurNom&#13;
IdInterne_Parent&#13;
TypeEvenement&#13;
IDInterne_Tiers&#13;
TypeTiers&#13;
IDInterne_Autre&#13;
TypeAutre&#13;
IDInterneCollaborateur&#13;
DescriptionSuite&#13;
IdentifiantGoogle</TableComplete>
      <Description>CRM Planning</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.DescriptionSuite&#13;
TableDest.DescriptionSuite				= Proc_RTFVersTexte(RtfStrTemp)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN			</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331245</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>DEPOT</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Liste des dépots</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331245</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>parcours_depot</NomOrigine>
      <Table_Nom>DEPOT_PARCOURS</Table_Nom>
      <Champs_Nom>IDparcours_depot&#13;
IDInterne&#13;
IDInterneDepot&#13;
TypeParcours&#13;
IDCritère1&#13;
LibelléCritère1&#13;
Ordre&#13;
IDCritère2&#13;
LibelléCritère2</Champs_Nom>
      <TableComplete>IDparcours_depot&#13;
IDInterne&#13;
IDInterneDepot&#13;
TypeParcours&#13;
IDCritère1&#13;
LibelléCritère1&#13;
Ordre&#13;
IDCritère2&#13;
LibelléCritère2</TableComplete>
      <Description>Parcours optimisé dépôt</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331245</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Documents</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331247</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTAVOIR</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Avoir</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331247</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTBL</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Bon de livraison</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331248</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTCOMMANDE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Commande Vente</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331248</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTCOMMANDE_ACHAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Commande Achat entête</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331250</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTDEMANDEPRIX_ACHAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Demande de Prix</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331251</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTDEVIS</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Devis</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331251</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTFACTURE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Facture Vente</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331252</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>document</NomOrigine>
      <Table_Nom>DOCUMENTFACTURE_ACHAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</Champs_Nom>
      <TableComplete>IDDocument&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeDocument&#13;
IDInterneSsTypeDoc&#13;
IDInterneDepot&#13;
VolumeTotal&#13;
PoidsTotal&#13;
IdInterneDocument_DevisLié&#13;
IdInterneDocument_CommandeLié&#13;
IdInterneDocument_Facture&#13;
IdInterneDocument_BL&#13;
IDInerneTiers&#13;
CodeTiers&#13;
FacturationNom&#13;
Livraison_Contact_Tel&#13;
Facturation_Adresse1&#13;
Livraison_Contact_Mail&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_Mail&#13;
LivraisonNom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_contact_Prenom&#13;
IDInterneModeReglement&#13;
DateValidité&#13;
DateLivraison&#13;
EtatLivraison&#13;
SoldeDu&#13;
MontantBrutHT&#13;
PrixRevient&#13;
PrcRemisePied&#13;
MontantNetHT&#13;
PortFraisHT&#13;
PortTauxTva&#13;
MontantNetNetHT&#13;
EcoTaxeHT&#13;
PortFraisTTC&#13;
EcoTaxeTTC&#13;
MontantNetNetTTC&#13;
MontantAcompte&#13;
PrcEscompte&#13;
MontantEscompte&#13;
NetAPayer&#13;
NombreColis&#13;
IDInterneCollaborateur&#13;
Signature&#13;
NomSignature&#13;
Note&#13;
NDChampsSpec&#13;
IDInterneAffaire&#13;
Document_Date&#13;
NomTiers&#13;
NumDocOrigine&#13;
Etape&#13;
Livraison_Pays&#13;
Facturation_Pays&#13;
Libellé&#13;
Status&#13;
Livraison_Civilite&#13;
IDInerneTVA1&#13;
IDInerneTVA2&#13;
IDInerneTVA3&#13;
IDInerneTVA4&#13;
IDInerneTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantRemisePied&#13;
IDInterneTVA_Port&#13;
CompteurCode&#13;
IDInterne_Incident&#13;
iDInterne_Contrat&#13;
FenSpecifique&#13;
IDInterne_DocOrigine&#13;
Facturation_Civilite&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Code_Affaire&#13;
IDInterne_Affaire&#13;
DuplicationEnUnClic&#13;
NumEngagement&#13;
Livraison_Contact_GSM&#13;
Facturation_Contact_GSM&#13;
Etat_de_validation&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Transporteur&#13;
IDInterneMoyenPaiementAcpte</TableComplete>
      <Description>Doc Facture Achat entête</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331253</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-AVOIR</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Avoir Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331254</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-BL</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Bon de livraison Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331254</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-BL-SUP</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Bon de Livraison Ligne +</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331255</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-COMMANDE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Commande Vente Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331255</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-COMMANDE-SUP</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Commande Vente Ligne +</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331255</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-COMMANDE_ACHAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Commande Achat Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331257</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-DEMANDEPRIX_ACHAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Demande de Prix Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331257</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-DEVIS</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Devis Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331258</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-DEVIS-SUP</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Devis Ligne +</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331258</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-FACTURE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Facture Vente Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331259</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-FACTURE-SUP</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Facture Vente Ligne +</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331259</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne</NomOrigine>
      <Table_Nom>DOCUMENTLIGNE-FACTURE_ACHAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</Champs_Nom>
      <TableComplete>IDLigne&#13;
DateCreation&#13;
DateModification&#13;
Code&#13;
RefNiveauHierarchie&#13;
IDInterne&#13;
Designation&#13;
idInterneDocument&#13;
NumeroLigne&#13;
CodeArticle&#13;
IDInerneArticle&#13;
Quantité&#13;
IDInerneUnite&#13;
SerieLotNumero&#13;
SerieLotDateLimite&#13;
SerieLotQuantite&#13;
VolumeTotal&#13;
PoidsTotal&#13;
PrixAchat&#13;
PrixVenteBrutHT&#13;
PrcRemise&#13;
PrixRevient&#13;
MontantRemise&#13;
TauxTVA&#13;
MontantTva&#13;
MontantEcoTaxeHT&#13;
MontantEcoTaxeTTC&#13;
QuantitéCommandée&#13;
QuantitéLIvrée&#13;
Reliquat&#13;
IDInerneUnite_Volume&#13;
IDInerneUnite_Poids&#13;
MontantNetHT&#13;
Composant&#13;
Lie&#13;
RefNiveauPere&#13;
IDInterne_Affaire&#13;
ValoriserLieCompose&#13;
MontantNetTTC&#13;
idinterneTVA&#13;
PoidsUnitaire&#13;
QuantifierLieCompose&#13;
NombreDeColis&#13;
Niveau&#13;
IDInterneOrigine&#13;
InfoLigne&#13;
DerPrixInfo&#13;
NePasRemonterCetteLigne&#13;
Code_Affaire&#13;
IDInterne_Chantier&#13;
Code_Chantier&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Composition&#13;
NePasImprimer</TableComplete>
      <Description>Doc Facture Achat Ligne</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Ajout pour gestion FenSpec&#13;
TempXML				est une chaine	= &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML			est un XMLDocument&#13;
StrXML				est une chaîne ANSI&#13;
tabChampsFenSpec	est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec	est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
FIN&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp							= TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
TableDest.NumeroLigne				= Gauche(&amp;quot;000000000&amp;quot;, 9-Taille(TableDest.NumeroLigne)) + TableDest.NumeroLigne&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
SI tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; ALORS&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
FIN&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
SI gbFiltrerArticleUtilisé = Vrai _ET_ TableauCherche(gtabLstArticleAutorisé,tcLinéaire,TableDest.IDInerneArticle) = -1 ALORS&#13;
TableauAjouteLigne(gtabLstArticleAutorisé,TableDest.IDInerneArticle)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN		</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331260</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>documents_nuxi</NomOrigine>
      <Table_Nom>DOCUMENTS_NUXI</Table_Nom>
      <Champs_Nom>IDdocuments_nuxi&#13;
IDInterne&#13;
IDInterneModule&#13;
Fichier&#13;
NomFichier&#13;
Nom_Module&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique&#13;
LibelleFichier&#13;
TypeFichier&#13;
Stockage&#13;
AExternaliser&#13;
IdentifiantDocDrive&#13;
IDDocPublicDrive</Champs_Nom>
      <TableComplete>IDdocuments_nuxi&#13;
IDInterne&#13;
IDInterneModule&#13;
Fichier&#13;
NomFichier&#13;
Nom_Module&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique&#13;
LibelleFichier&#13;
TypeFichier&#13;
Stockage&#13;
AExternaliser&#13;
IdentifiantDocDrive&#13;
IDDocPublicDrive</TableComplete>
      <Description>NB Documents</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331260</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>ETAPEDOC</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Etape Documents</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331260</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331260</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>ETAT_SPECIFIQUE</Table_Nom>
      <Description>Trt. Spéc. des états</Description>
      <Champs_Nom/>
      <NomOrigine>societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>famille</NomOrigine>
      <Table_Nom>FAMILLE_ARTICLE</Table_Nom>
      <Champs_Nom>IDFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeFamille</Champs_Nom>
      <TableComplete>IDFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeFamille</TableComplete>
      <Description>Famille Article</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331261</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>famille</NomOrigine>
      <Table_Nom>FAMILLE_CLIENT</Table_Nom>
      <Champs_Nom>IDFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeFamille</Champs_Nom>
      <TableComplete>IDFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeFamille</TableComplete>
      <Description>Famille Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331261</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>famille</NomOrigine>
      <Table_Nom>FAMILLE_FOURNISSEUR</Table_Nom>
      <Champs_Nom>IDFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeFamille</Champs_Nom>
      <TableComplete>IDFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeFamille</TableComplete>
      <Description>Famille Fournisseur</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331262</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>frais_deplacement_nuxi</NomOrigine>
      <Table_Nom>FRAIS_DEPLACEMENT_NUXI</Table_Nom>
      <Champs_Nom>IDfrais_deplacement_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
IDInternArticle&#13;
TypeFraisDeplacement&#13;
IDInterneZoneIntervention&#13;
NbreKilometres&#13;
PrixParKilometre&#13;
MontantOuFrais&#13;
Notes&#13;
Date_Creation&#13;
Date_Modification&#13;
Code_Article&#13;
Design_Facturation</Champs_Nom>
      <TableComplete>IDfrais_deplacement_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
IDInternArticle&#13;
TypeFraisDeplacement&#13;
IDInterneZoneIntervention&#13;
NbreKilometres&#13;
PrixParKilometre&#13;
MontantOuFrais&#13;
Notes&#13;
Date_Creation&#13;
Date_Modification&#13;
Code_Article&#13;
Design_Facturation</TableComplete>
      <Description>NB Frais déplacement</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331262</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>GAMME</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Gamme</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331262</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>GAMME_ELEMENTS</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Gamme éléments</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331263</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED</Table_Nom>
      <Description>GED</Description>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331263</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_APPAREIL</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Appareil</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331263</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_ARTICLE</Table_Nom>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Article</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331264</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_CLIENT</Table_Nom>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331264</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_CONTRAT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Contrat</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331264</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_DOC_A</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Doc d&amp;apos;achat</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331265</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_DOC_V</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Doc de vente</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331265</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_FOURNISSEUR</Table_Nom>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>GED Fournisseur</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331265</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ged</NomOrigine>
      <Table_Nom>GED_INTER</Table_Nom>
      <Description>GED Intervention</Description>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331266</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331266</Version>
      <AfficherTypeData>1</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>GPS</Table_Nom>
      <Description>Géocodage des adresses (2.500/Sync)</Description>
      <Champs_Nom>IDGéoCodage&#13;
Adresse&#13;
Longitude&#13;
Latitude&#13;
DateMaj&#13;
Précision</Champs_Nom>
      <TableComplete>IDGéoCodage&#13;
Adresse&#13;
Longitude&#13;
Latitude&#13;
DateMaj&#13;
Précision</TableComplete>
      <NomOrigine>societe</NomOrigine>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>GROUPE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Groupe</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331266</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>images</NomOrigine>
      <Table_Nom>IMAGES</Table_Nom>
      <Champs_Nom>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</Champs_Nom>
      <TableComplete>IDGED&#13;
IDInterne&#13;
Code&#13;
NomDocument&#13;
Table_Externe&#13;
ExtentionFichier&#13;
BinaireDocument&#13;
IDInterne_Table_Externe&#13;
LienPublic&#13;
IDDocPublic&#13;
DateCreation&#13;
DateModification&#13;
Observations&#13;
Code_Table_Externe</TableComplete>
      <Description>Images</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331266</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>incident</NomOrigine>
      <Table_Nom>INCIDENT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDIncident&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateDébut&#13;
DateFin&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Description&#13;
Etat&#13;
IDInterne_Affaire&#13;
Adresse1&#13;
Adresse2&#13;
Mail&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
NomTiers&#13;
Contact_Nom&#13;
ContactFonction&#13;
Contact_Prenom&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
iDInterne_Contrat&#13;
IDInterne_Collaborateur&#13;
Note&#13;
NDChampsSpec</Champs_Nom>
      <TableComplete>IDIncident&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateDébut&#13;
DateFin&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Description&#13;
Etat&#13;
IDInterne_Affaire&#13;
Adresse1&#13;
Adresse2&#13;
Mail&#13;
CP&#13;
Ville&#13;
Tel&#13;
GSM&#13;
NomTiers&#13;
Contact_Nom&#13;
ContactFonction&#13;
Contact_Prenom&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
iDInterne_Contrat&#13;
IDInterne_Collaborateur&#13;
Note&#13;
NDChampsSpec</TableComplete>
      <Description>Intervention Suivi Incident</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331267</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>incidents_nuxi</NomOrigine>
      <Table_Nom>INCIDENTS_NUXI</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDincidents_nuxi&#13;
IDInterne&#13;
IDInterneCommercial&#13;
DateDebutIncident&#13;
DateFinIncident&#13;
Code&#13;
Libelle&#13;
Notes&#13;
Statut&#13;
Description&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDincidents_nuxi&#13;
IDInterne&#13;
IDInterneCommercial&#13;
DateDebutIncident&#13;
DateFinIncident&#13;
Code&#13;
Libelle&#13;
Notes&#13;
Statut&#13;
Description&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique</TableComplete>
      <Description>NB Incidents</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331267</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331267</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>INITSYNC</Table_Nom>
      <Description>Initialisation de la synchro</Description>
      <Champs_Nom/>
      <NomOrigine>societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>appareil</NomOrigine>
      <Table_Nom>INTER_APPAREILS</Table_Nom>
      <Champs_Nom>IDAppareil&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
CodeArticle&#13;
IDInterne_article&#13;
NumSerie&#13;
CodeTiers&#13;
IDInterne_Tiers&#13;
Marque&#13;
Modele&#13;
IDInerne_Situation&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
GtieMODébut&#13;
GtieMOFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Tag&#13;
Nom_Client&#13;
Adresse1&#13;
Adresse2&#13;
Ville&#13;
IDInterne_Pays&#13;
CP&#13;
LivraisonNom</Champs_Nom>
      <TableComplete>IDAppareil&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
CodeArticle&#13;
IDInterne_article&#13;
NumSerie&#13;
CodeTiers&#13;
IDInterne_Tiers&#13;
Marque&#13;
Modele&#13;
IDInerne_Situation&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
GtieMODébut&#13;
GtieMOFin&#13;
GtiePieceDébut&#13;
GtiePieceFin&#13;
GtieDeplDébut&#13;
GtieDeplFin&#13;
FenSpecifique&#13;
NDChampsSpec&#13;
Tag&#13;
Nom_Client&#13;
Adresse1&#13;
Adresse2&#13;
Ville&#13;
IDInterne_Pays&#13;
CP&#13;
LivraisonNom</TableComplete>
      <Description>Intervention Appareils</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331268</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>intervention</NomOrigine>
      <Table_Nom>INTER_BON</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</Champs_Nom>
      <TableComplete>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</TableComplete>
      <Description>Intervention Bon Entête</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
duDuréeInter est une Durée&#13;
DHDebut est une DateHeure&#13;
DHFin est une DateHeure&#13;
&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
DHDebut = TableDest.DebutLe&#13;
DHFin = TableDest.FinLe&#13;
&#13;
SI Val(TableDest.DuréeInterv) = 0 ET DateValide(DHDebut) ET DateValide(DHFin) ALORS&#13;
&#13;
duDuréeInter = DHFin - DHDebut&#13;
 	TableDest.DuréeInterv = Arrondi(duDuréeInter..EnHeures,2)&#13;
 &#13;
FIN&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN								&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331269</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_BON_LIGNE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Bon Lignes</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331269</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_BON_LIGNE_A</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Bon Lignes Appareils</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331270</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_BON_LIGNE_C</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Bon Lignes Consommations</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331270</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_BON_LIGNE_R</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Bon Lignes Ressources</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331271</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_BON_LIGNE_RH</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Bon Lignes Ressources Humaines</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331271</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_CATEGORIE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Catégorie</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331271</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>intervention</NomOrigine>
      <Table_Nom>INTER_DEMANDE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</Champs_Nom>
      <TableComplete>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</TableComplete>
      <Description>Intervention Demande Entête</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
duDuréeInter est une Durée&#13;
DHDebut est une DateHeure&#13;
DHFin est une DateHeure&#13;
&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
DHDebut = TableDest.DebutLe&#13;
DHFin = TableDest.FinLe&#13;
&#13;
SI Val(TableDest.DuréeInterv) = 0 ET DateValide(DHDebut) ET DateValide(DHFin) ALORS&#13;
&#13;
duDuréeInter = DHFin - DHDebut&#13;
 	TableDest.DuréeInterv = Arrondi(duDuréeInter..EnHeures,2)&#13;
 &#13;
FIN&#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331272</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_DEMANDE_LIGNE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Demande Lignes</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331273</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_DEMANDE_LIGNE_A</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Demande Lignes Appareils</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331273</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_DEMANDE_LIGNE_C</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Demande Lignes Consommations</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331274</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_DEMANDE_LIGNE_R</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Demande Lignes Ressources</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331274</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_DEMANDE_LIGNE_RH</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Demande Lignes Ressources Humaines</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331275</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_ETAT_BI</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Etat Bon</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331275</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_ETAT_DI</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Etat Demande</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331275</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_ETAT_RI</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Etat Rapport</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331276</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_FRAISDEPL</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Frais déplacement</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331276</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_IMPORTANCE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Importance</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331276</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_OPERATEUR</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Opérateur</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331277</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_ORIGINE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Origine</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331277</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>intervention</NomOrigine>
      <Table_Nom>INTER_RAPPORT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</Champs_Nom>
      <TableComplete>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</TableComplete>
      <Description>Intervention Rapport Entête</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
duDuréeInter est une Durée&#13;
DHDebut est une DateHeure&#13;
DHFin est une DateHeure&#13;
&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
DHDebut = TableDest.DebutLe&#13;
DHFin = TableDest.FinLe&#13;
&#13;
SI Val(TableDest.DuréeInterv) = 0 ET DateValide(DHDebut) ET DateValide(DHFin) ALORS&#13;
&#13;
duDuréeInter = DHFin - DHDebut&#13;
 	TableDest.DuréeInterv = Arrondi(duDuréeInter..EnHeures,2)&#13;
 &#13;
FIN&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN	</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331278</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ligne_intervention</NomOrigine>
      <Table_Nom>INTER_RAPPORT_LIGNE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</Champs_Nom>
      <TableComplete>IDLigne_Intervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
idinterne_Intervention&#13;
TypeLigne&#13;
NumLigne&#13;
IDInterne_Ressource&#13;
Code_Ressource&#13;
Designation&#13;
Quantité&#13;
Situation&#13;
PrixVUHT&#13;
PrcRemise&#13;
TauxTVA&#13;
NumSerie&#13;
MontantNetHT&#13;
PRixRUHT&#13;
MontantNetTTC&#13;
SousTypeLigne&#13;
IDInterne_TVA&#13;
NePasFacturer&#13;
DateDebutGtie&#13;
DateFinGtie&#13;
FactuAzero&#13;
IDInterne_Incident&#13;
PriseEnChargeMO&#13;
PriseEnChargePiece&#13;
PriseEnchargeDepl&#13;
IDInterne_DocumentVte&#13;
IDInterne_LigneDocumentVte&#13;
Code_Document&#13;
IDInterne_StockBS&#13;
DateHeureDébut&#13;
DateHeureFin</TableComplete>
      <Description>Intervention Rapport Lignes</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Designation&#13;
TableDest.Designation				= Proc_RTFVersTexte(RtfStrTemp)&#13;
SI TableDest.IdInterne = &amp;quot;&amp;quot; ALORS TableDest.IdInterne = DonneGUID() &#13;
SI TableDest.code = &amp;quot;&amp;quot; ALORS TableDest.code = TableDest.IdInterne &#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331278</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>ressource</NomOrigine>
      <Table_Nom>INTER_RESSOURCE_H</Table_Nom>
      <Champs_Nom>IDRessource&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeRessource&#13;
NomLibelle&#13;
PrixVente&#13;
PrixAchat&#13;
PrixRevient&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
IDInterne_article&#13;
Code_Article</Champs_Nom>
      <TableComplete>IDRessource&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeRessource&#13;
NomLibelle&#13;
PrixVente&#13;
PrixAchat&#13;
PrixRevient&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
IDInterne_article&#13;
Code_Article</TableComplete>
      <Description>Intervention Ressources humaines</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331279</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>ressource</NomOrigine>
      <Table_Nom>INTER_RESSOURCE_M</Table_Nom>
      <Champs_Nom>IDRessource&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeRessource&#13;
NomLibelle&#13;
PrixVente&#13;
PrixAchat&#13;
PrixRevient&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
IDInterne_article&#13;
Code_Article</Champs_Nom>
      <TableComplete>IDRessource&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
TypeRessource&#13;
NomLibelle&#13;
PrixVente&#13;
PrixAchat&#13;
PrixRevient&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
IDInterne_article&#13;
Code_Article</TableComplete>
      <Description>Intervention Ressources matériels</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331279</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>INTER_ZONEDEPL</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Intervention Zone déplacement</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331279</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>intervention</NomOrigine>
      <Table_Nom>INTERVENTION</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</Champs_Nom>
      <TableComplete>IDIntervention&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
IDInterne_BI&#13;
Code_BI&#13;
IDInterne_DI&#13;
Code_DI&#13;
Libelle&#13;
IDInterne_Etat&#13;
DateDoc&#13;
IDInterne_Origine&#13;
IDInterne_Objet&#13;
iDInterne_Opérateur&#13;
iDInterne_Importance&#13;
iDInterne_Contrat&#13;
Code_Contrat&#13;
IDInterne_IntervType&#13;
Code_IntervType&#13;
IDInterne_Categorie&#13;
IDInterne_Tiers&#13;
Code_Tiers&#13;
Nom&#13;
Interlocuteur&#13;
Latitude&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInterne_Pays&#13;
Pays&#13;
Longitude&#13;
Tel&#13;
GSM&#13;
Mail&#13;
IDInterne_Déplacement&#13;
Kilometrage&#13;
IDInterne_Zone&#13;
FraisPrisEnCharge&#13;
DuréeInterv&#13;
DuréeDeplacement&#13;
DebutLe&#13;
FinLe&#13;
AuPlusTot&#13;
AuPlusTard&#13;
Description&#13;
Symptome&#13;
IDInterne_Symptome&#13;
Note&#13;
TotalPR&#13;
TotalHT&#13;
TotalTVA&#13;
TotalTTC&#13;
BaseHT1&#13;
BaseHT2&#13;
BaseHT3&#13;
BaseHT4&#13;
BaseHT5&#13;
MontantTVA1&#13;
MontantTVA2&#13;
MontantTVA3&#13;
MontantTVA4&#13;
MontantTVA5&#13;
TauxTVA1&#13;
TauxTVA2&#13;
TauxTVA3&#13;
TauxTVA4&#13;
TauxTVA5&#13;
idinternetva1&#13;
IDInterneTVA2&#13;
IDInterneTVA3&#13;
IDInterneTVA4&#13;
IDInterneTVA5&#13;
MontantFrais&#13;
TypeDocument&#13;
Etat_Libelle&#13;
Origine_Libelle&#13;
Objet_Libelle&#13;
Importance_Libelle&#13;
Facturation_Nom&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Pays&#13;
IdInterne_RI&#13;
Code_RI&#13;
Facturation_Interloc&#13;
facturation_tel&#13;
Facturation_GSM&#13;
Facturation_Mail&#13;
LngLatPrécision&#13;
Signature&#13;
NomSignature&#13;
TauxTVAFrais&#13;
IDInterneTVA_Frais&#13;
NDChampsSpec&#13;
IDInterne_Incident&#13;
IDInterne_Affaire&#13;
Code_Incident&#13;
Code_Affaire&#13;
IDInterne_DocumentVte&#13;
FenSpecifique&#13;
NonModifiable&#13;
PriseEnChargePiece&#13;
PriseEnChargeMO&#13;
PriseEnchargeDepl&#13;
Code_Chantier&#13;
IDInterne_Chantier&#13;
Adresse3&#13;
Facturation_Adresse3</TableComplete>
      <Description>Intervention</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
duDuréeInter est une Durée&#13;
DHDebut est une DateHeure&#13;
DHFin est une DateHeure&#13;
&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.Note&#13;
TableDest.Note				= Proc_RTFVersTexte(RtfStrTemp)&#13;
DHDebut = TableDest.DebutLe&#13;
DHFin = TableDest.FinLe&#13;
&#13;
SI Val(TableDest.DuréeInterv) = 0 ET DateValide(DHDebut) ET DateValide(DHFin) ALORS&#13;
&#13;
duDuréeInter = DHFin - DHDebut&#13;
 	TableDest.DuréeInterv = Arrondi(duDuréeInter..EnHeures,2)&#13;
 &#13;
FIN&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN								&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331280</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>interventions_details_nuxi</NomOrigine>
      <Table_Nom>INTERVENTIONS_DETAILS_NUXI</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDinterventions_détails_nuxi&#13;
IDInterneIntervention&#13;
IDInterne&#13;
Libelle&#13;
IDInternFamille&#13;
Description&#13;
IDInterneEquipe&#13;
Duree&#13;
IDInterneContrat&#13;
Adresse1&#13;
IDInternePeriodicite&#13;
Statut&#13;
Priorité&#13;
DateIntervention&#13;
IDInterneClient&#13;
SourceIntervention&#13;
IdInterneInterventionType&#13;
MontantFD_HT&#13;
Notes&#13;
IDInterneAdresse&#13;
Rapport&#13;
IDInterneZoneIntervention&#13;
Kilometrage&#13;
PrixAuKm&#13;
montant_ht&#13;
HeureIntervention&#13;
IdInterneIntervenant&#13;
IDInterneTicket&#13;
IDInternArticle&#13;
IDInterneIncident&#13;
IDInterneFraisDeplacement&#13;
Actif&#13;
CodeClient&#13;
NomClient&#13;
IDInterneAffaire&#13;
Inter_Facturee&#13;
ValeurFD_HT&#13;
IDInterntTVAFraisDeplacement&#13;
DateFacturation&#13;
IDInterneTierPayeur&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique&#13;
NomSite&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInternePays&#13;
Pays&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
TauxTva_FD&#13;
Signature&#13;
Nom_Signature&#13;
Log_Facture&#13;
DH_DebutInter&#13;
DH_FinInter&#13;
FD_Facturable&#13;
Non_Modifiable&#13;
IDInterne_depot&#13;
InfoDocExterne&#13;
programmer_pour&#13;
IdInterne_EtatSupp&#13;
Nbre_passage&#13;
Duree_Prevue&#13;
Nouveau&#13;
IdInterne_ModeReglement</Champs_Nom>
      <TableComplete>IDinterventions_détails_nuxi&#13;
IDInterneIntervention&#13;
IDInterne&#13;
Libelle&#13;
IDInternFamille&#13;
Description&#13;
IDInterneEquipe&#13;
Duree&#13;
IDInterneContrat&#13;
Adresse1&#13;
IDInternePeriodicite&#13;
Statut&#13;
Priorité&#13;
DateIntervention&#13;
IDInterneClient&#13;
SourceIntervention&#13;
IdInterneInterventionType&#13;
MontantFD_HT&#13;
Notes&#13;
IDInterneAdresse&#13;
Rapport&#13;
IDInterneZoneIntervention&#13;
Kilometrage&#13;
PrixAuKm&#13;
montant_ht&#13;
HeureIntervention&#13;
IdInterneIntervenant&#13;
IDInterneTicket&#13;
IDInternArticle&#13;
IDInterneIncident&#13;
IDInterneFraisDeplacement&#13;
Actif&#13;
CodeClient&#13;
NomClient&#13;
IDInterneAffaire&#13;
Inter_Facturee&#13;
ValeurFD_HT&#13;
IDInterntTVAFraisDeplacement&#13;
DateFacturation&#13;
IDInterneTierPayeur&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique&#13;
NomSite&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
IDInternePays&#13;
Pays&#13;
Interlocuteur&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
TauxTva_FD&#13;
Signature&#13;
Nom_Signature&#13;
Log_Facture&#13;
DH_DebutInter&#13;
DH_FinInter&#13;
FD_Facturable&#13;
Non_Modifiable&#13;
IDInterne_depot&#13;
InfoDocExterne&#13;
programmer_pour&#13;
IdInterne_EtatSupp&#13;
Nbre_passage&#13;
Duree_Prevue&#13;
Nouveau&#13;
IdInterne_ModeReglement</TableComplete>
      <Description>NB Interventions Details</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331281</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>interventions_nuxi</NomOrigine>
      <Table_Nom>INTERVENTIONS_NUXI</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDinterventions_nuxi&#13;
IDInterne&#13;
Code&#13;
Type&#13;
TypeModule&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDinterventions_nuxi&#13;
IDInterne&#13;
Code&#13;
Type&#13;
TypeModule&#13;
Date_Creation&#13;
Date_Modification&#13;
FenSpecifique</TableComplete>
      <Description>NB Interventions</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331281</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>inventaire</NomOrigine>
      <Table_Nom>INVENTAIRE</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</TableComplete>
      <Description>Inventaire</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331282</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>leads</NomOrigine>
      <Table_Nom>LEADS</Table_Nom>
      <Description>CRM Leads</Description>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLeads&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Pays&#13;
IDInterne_Pays&#13;
Tel&#13;
GSM&#13;
Mail&#13;
Contact_Nom&#13;
Contact_Prenom&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
Contact_civilité&#13;
Contact_Fonction&#13;
IDInterne_Statut&#13;
Statut&#13;
IDInterne_Origine&#13;
Origine&#13;
IDInterne_Evaluation&#13;
Evaluation&#13;
IDInterne_Collaborateur&#13;
IDINterne_Type&#13;
Type&#13;
Note&#13;
NDChampsSpec&#13;
Converti&#13;
IDInterne_Tiers&#13;
Libelle&#13;
Code_Tiers&#13;
FenSpecifique&#13;
IDInterneFamille&#13;
IDInterneSousFamille</Champs_Nom>
      <TableComplete>IDLeads&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Pays&#13;
IDInterne_Pays&#13;
Tel&#13;
GSM&#13;
Mail&#13;
Contact_Nom&#13;
Contact_Prenom&#13;
Longitude&#13;
Latitude&#13;
LngLatPrécision&#13;
Contact_civilité&#13;
Contact_Fonction&#13;
IDInterne_Statut&#13;
Statut&#13;
IDInterne_Origine&#13;
Origine&#13;
IDInterne_Evaluation&#13;
Evaluation&#13;
IDInterne_Collaborateur&#13;
IDINterne_Type&#13;
Type&#13;
Note&#13;
NDChampsSpec&#13;
Converti&#13;
IDInterne_Tiers&#13;
Libelle&#13;
Code_Tiers&#13;
FenSpecifique&#13;
IDInterneFamille&#13;
IDInterneSousFamille</TableComplete>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331282</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>liaison</NomOrigine>
      <Table_Nom>LIAISONS_AFFAIRES_INTERVENANTS</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLiaison&#13;
Table1&#13;
IDInterne1&#13;
Table2&#13;
IDInterne2&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateCreation&#13;
DateModification</Champs_Nom>
      <TableComplete>IDLiaison&#13;
Table1&#13;
IDInterne1&#13;
Table2&#13;
IDInterne2&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateCreation&#13;
DateModification</TableComplete>
      <Description>Affaires Intervenants</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331282</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>liaison</NomOrigine>
      <Table_Nom>LIAISONS_CHANTIERS_INTERVENANTS</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDLiaison&#13;
Table1&#13;
IDInterne1&#13;
Table2&#13;
IDInterne2&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateCreation&#13;
DateModification</Champs_Nom>
      <TableComplete>IDLiaison&#13;
Table1&#13;
IDInterne1&#13;
Table2&#13;
IDInterne2&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
DateCreation&#13;
DateModification</TableComplete>
      <Description>Chantiers Intervenants</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331283</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>Liaisons_nuxi</NomOrigine>
      <Table_Nom>LIAISONS_NUXI</Table_Nom>
      <Champs_Nom>IDLiaisons_nuxi&#13;
IdInterne1&#13;
IdInterne2&#13;
IDInterne&#13;
Table1&#13;
Table2&#13;
Date_Creation&#13;
Date_Modification&#13;
Complements</Champs_Nom>
      <TableComplete>IDLiaisons_nuxi&#13;
IdInterne1&#13;
IdInterne2&#13;
IDInterne&#13;
Table1&#13;
Table2&#13;
Date_Creation&#13;
Date_Modification&#13;
Complements</TableComplete>
      <Description>NB Liaisons</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331283</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>LISTETARIF</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Liste des tarifs</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331283</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331284</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>LOG_SPECIFIQUE</Table_Nom>
      <Description>Trt. Spéc. des Logs</Description>
      <Champs_Nom>IDSociété&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
Fax&#13;
Mail&#13;
Web&#13;
InfoEntête&#13;
Logo&#13;
Siret&#13;
APE&#13;
RIB&#13;
InfoPied&#13;
TVAIntra&#13;
Capital&#13;
RCS&#13;
NbDécimalesQté&#13;
NbDécimalesPrix&#13;
NbDécumalesPoids&#13;
NbDécimalesVolume&#13;
FormeJuridique&#13;
LgCptTiers&#13;
LgCptArt&#13;
CarComplCpteTiers&#13;
API_Key&#13;
Longitude&#13;
Latitude&#13;
ProtectionDoc</Champs_Nom>
      <NomOrigine>societe</NomOrigine>
      <TableComplete>IDSociété&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
Fax&#13;
Mail&#13;
Web&#13;
InfoEntête&#13;
Logo&#13;
Siret&#13;
APE&#13;
RIB&#13;
InfoPied&#13;
TVAIntra&#13;
Capital&#13;
RCS&#13;
NbDécimalesQté&#13;
NbDécimalesPrix&#13;
NbDécumalesPoids&#13;
NbDécimalesVolume&#13;
FormeJuridique&#13;
LgCptTiers&#13;
LgCptArt&#13;
CarComplCpteTiers&#13;
API_Key&#13;
Longitude&#13;
Latitude&#13;
ProtectionDoc</TableComplete>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>materiels_nuxi</NomOrigine>
      <Table_Nom>MATERIELS_NUXI</Table_Nom>
      <Champs_Nom>IDmateriels_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
IDInternArticle&#13;
matricule&#13;
Notes&#13;
TypePrixDeVente&#13;
PrixVenteHT&#13;
Date_Creation&#13;
Date_Modification&#13;
Mat_Type&#13;
img_mat&#13;
CouleurPlanning&#13;
Actif&#13;
FenSpecifique&#13;
Code_Article&#13;
Design_Facturation&#13;
gglAgendaTitre&#13;
gglAgendaIdentifiant&#13;
gglAgendaCompte</Champs_Nom>
      <TableComplete>IDmateriels_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
IDInternArticle&#13;
matricule&#13;
Notes&#13;
TypePrixDeVente&#13;
PrixVenteHT&#13;
Date_Creation&#13;
Date_Modification&#13;
Mat_Type&#13;
img_mat&#13;
CouleurPlanning&#13;
Actif&#13;
FenSpecifique&#13;
Code_Article&#13;
Design_Facturation&#13;
gglAgendaTitre&#13;
gglAgendaIdentifiant&#13;
gglAgendaCompte</TableComplete>
      <Description>NB Materiels</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331284</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>MODEREGLEMENT</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Mode de règlement</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331285</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>MOYENPAIEMENT</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Moyen de paiement</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331285</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine/>
      <Table_Nom>MVTSTOCK</Table_Nom>
      <Champs_Nom/>
      <TableComplete/>
      <Description>Stock Inventaire Entrée Sortie</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331285</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>nomenclatures_nuxi</NomOrigine>
      <Table_Nom>NOMENCLATURES_NUXI</Table_Nom>
      <Champs_Nom>IDnomenclatures_nuxi&#13;
IDInterne&#13;
Type_Libelle&#13;
Libelle&#13;
Ordre&#13;
Code&#13;
IDInterneCategorie&#13;
Date_Creation&#13;
Date_Modification&#13;
Description&#13;
Champ_Supp1</Champs_Nom>
      <TableComplete>IDnomenclatures_nuxi&#13;
IDInterne&#13;
Type_Libelle&#13;
Libelle&#13;
Ordre&#13;
Code&#13;
IDInterneCategorie&#13;
Date_Creation&#13;
Date_Modification&#13;
Description&#13;
Champ_Supp1</TableComplete>
      <Description>NB Nomenclatures</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331286</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>pagesperso</NomOrigine>
      <Table_Nom>PAGESPERSO</Table_Nom>
      <Champs_Nom>IDPagesPerso&#13;
TypePage&#13;
NumChamp&#13;
Propriété&#13;
Valeur&#13;
NumValeur</Champs_Nom>
      <TableComplete>IDPagesPerso&#13;
TypePage&#13;
NumChamp&#13;
Propriété&#13;
Valeur&#13;
NumValeur</TableComplete>
      <Description>Pages Perso</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331286</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>PARAMSYS</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Paramètres systeme</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331286</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>PAYS</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Pays</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331287</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>periodicite_nuxi</NomOrigine>
      <Table_Nom>PERIODICITE_NUXI</Table_Nom>
      <Champs_Nom>IDperiodicite_nuxi&#13;
IDInterne&#13;
TypePeriodicite&#13;
Param_Fréquence&#13;
Description&#13;
Param_NomJoursOuMois&#13;
Param_JourEntier&#13;
Param_MoisEntier&#13;
Param_Option&#13;
Code&#13;
Date_Creation&#13;
Date_Modification</Champs_Nom>
      <TableComplete>IDperiodicite_nuxi&#13;
IDInterne&#13;
TypePeriodicite&#13;
Param_Fréquence&#13;
Description&#13;
Param_NomJoursOuMois&#13;
Param_JourEntier&#13;
Param_MoisEntier&#13;
Param_Option&#13;
Code&#13;
Date_Creation&#13;
Date_Modification</TableComplete>
      <Description>NB Périodicité</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331287</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331287</Version>
      <AfficherTypeData>1</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>PHOTO_ARTICLE</Table_Nom>
      <Description>Photo des articles</Description>
      <Champs_Nom>Photo</Champs_Nom>
      <NomOrigine>article</NomOrigine>
      <TableComplete>IDArticle&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Designation&#13;
StockReel&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
IDInterneTypeArticle&#13;
Photo&#13;
CodeBarre&#13;
IDInterneUnite_Vente&#13;
QuantitéDéfaut&#13;
IDInterneTiers_Fournisseur&#13;
PrixAchat&#13;
PRixVenteHT&#13;
TauxTVA&#13;
GestionStock&#13;
StockVirtuel&#13;
Poids&#13;
PoidsNet&#13;
NbArtColis&#13;
PrixRevient&#13;
ArticleRemplacement&#13;
PrixVentePublic&#13;
NbDecimalesPrix&#13;
Hauteur&#13;
Largeur&#13;
Longueur&#13;
IDInterneUnite_Taille&#13;
DuréedeVie&#13;
DuréeGarantie&#13;
ReferenceFournisseur&#13;
NDChampsSpec&#13;
Note&#13;
IDInterne_TVA&#13;
Volume&#13;
IDInterneUnite_Volume&#13;
PrixVenteTTC&#13;
CodeTiers_Fournisseur&#13;
IDInterneUnite_Poids&#13;
idinterneEcoTaxe&#13;
FenSpecifique&#13;
Emplacement&#13;
GéréEnSérieLot&#13;
GéréEnDLUO&#13;
GéréEnGamme&#13;
IDInterne_ArticleGammeParent&#13;
IDInterne_ElementGamme1&#13;
IDInterne_ElementGamme2&#13;
IDInterne_ElementGamme3&#13;
IDInterne_ElementGamme4&#13;
IDInterne_ElementGamme5&#13;
Code_ArticleGammeParent&#13;
LienExterne&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
RegimeTvaArticle</TableComplete>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>googleagenda</NomOrigine>
      <Table_Nom>PLANNING</Table_Nom>
      <Limite_Histo_Defaut>30</Limite_Histo_Defaut>
      <Champs_Nom>IDGoogleAgenda&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
Lieu&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
JournéeEntière&#13;
VisiblePlanning&#13;
AuteurNom&#13;
IdInterne_Parent&#13;
TypeEvenement&#13;
IDInterne_Tiers&#13;
TypeTiers&#13;
IDInterne_Autre&#13;
TypeAutre&#13;
IDInterneCollaborateur&#13;
DescriptionSuite&#13;
IdentifiantGoogle</Champs_Nom>
      <TableComplete>IDGoogleAgenda&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Description&#13;
Lieu&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
JournéeEntière&#13;
VisiblePlanning&#13;
AuteurNom&#13;
IdInterne_Parent&#13;
TypeEvenement&#13;
IDInterne_Tiers&#13;
TypeTiers&#13;
IDInterne_Autre&#13;
TypeAutre&#13;
IDInterneCollaborateur&#13;
DescriptionSuite&#13;
IdentifiantGoogle</TableComplete>
      <Description>Planning</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest)  )&#13;
//Ajout pour gestion FenSpec&#13;
&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
RtfStrTemp est une Chaine&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
RtfStrTemp = TableDest.Description&#13;
TableDest.Description				= Proc_RTFVersTexte(RtfStrTemp)&#13;
RtfStrTemp = TableDest.DescriptionSuite&#13;
TableDest.DescriptionSuite				= Proc_RTFVersTexte(RtfStrTemp)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN							&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331288</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331288</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>PRE_CONFIG_MAITRE</Table_Nom>
      <Description>Pré-configuration BDD Maître</Description>
      <Champs_Nom/>
      <NomOrigine>societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331288</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>RE_CONFIG_AUTO</Table_Nom>
      <Description>Re-configuration automatique BDD Maître</Description>
      <Champs_Nom/>
      <NomOrigine>societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>ressources_nuxi</NomOrigine>
      <Table_Nom>RESSOURCES_NUXI</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDinterventions_ressources_nuxi&#13;
IDInterneIntervention&#13;
IDInterne&#13;
IDInterneRessource&#13;
TypeRessource&#13;
PrixDeVente&#13;
Qte&#13;
ValeurUnitaire&#13;
IDInterneAppareil&#13;
Facturable&#13;
IdInterneTauxTVA&#13;
TauxTVA&#13;
DateDebut&#13;
DateFin&#13;
HeureDebut&#13;
HeureFin&#13;
TypeDate&#13;
Libelle_Ressource&#13;
Date_Creation&#13;
Date_Modification&#13;
Réalisée&#13;
Duree&#13;
FenSpecifique&#13;
CodeRessource&#13;
NumSerie&#13;
CouleurPlanning&#13;
IDExterne_origine&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDinterventions_ressources_nuxi&#13;
IDInterneIntervention&#13;
IDInterne&#13;
IDInterneRessource&#13;
TypeRessource&#13;
PrixDeVente&#13;
Qte&#13;
ValeurUnitaire&#13;
IDInterneAppareil&#13;
Facturable&#13;
IdInterneTauxTVA&#13;
TauxTVA&#13;
DateDebut&#13;
DateFin&#13;
HeureDebut&#13;
HeureFin&#13;
TypeDate&#13;
Libelle_Ressource&#13;
Date_Creation&#13;
Date_Modification&#13;
Réalisée&#13;
Duree&#13;
FenSpecifique&#13;
CodeRessource&#13;
NumSerie&#13;
CouleurPlanning&#13;
IDExterne_origine&#13;
IdInterne_Parent</TableComplete>
      <Description>NB Ressources</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331289</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>ROLE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Role du contact</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331289</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>saisiedestemps</NomOrigine>
      <Table_Nom>SAISIEDESTEMPS</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDSaisieDesTemps&#13;
IDInterne&#13;
Code&#13;
IDInterneRessource&#13;
CodeRessource&#13;
LibelléRessource&#13;
TypeRessource&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
IDInterneAffaire&#13;
IDInterneChantier&#13;
LigneSynchronisée</Champs_Nom>
      <TableComplete>IDSaisieDesTemps&#13;
IDInterne&#13;
Code&#13;
IDInterneRessource&#13;
CodeRessource&#13;
LibelléRessource&#13;
TypeRessource&#13;
DateHeureDébut&#13;
DateHeureFin&#13;
IDInterneAffaire&#13;
IDInterneChantier&#13;
LigneSynchronisée</TableComplete>
      <Description>Saisie des temps</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331289</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>collaborateur</NomOrigine>
      <Champs_Nom>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</Champs_Nom>
      <TableComplete>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</TableComplete>
      <Description>Collaborateurs</Description>
      <Table_Nom>SALARIES</Table_Nom>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331290</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>SECTEURGEOGRAPHIQUE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Secteur Géographique</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331290</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>societe</NomOrigine>
      <Champs_Nom>IDSociété&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
Fax&#13;
Mail&#13;
Web&#13;
InfoEntête&#13;
Logo&#13;
Siret&#13;
APE&#13;
RIB&#13;
InfoPied&#13;
TVAIntra&#13;
Capital&#13;
RCS&#13;
NbDécimalesQté&#13;
NbDécimalesPrix&#13;
NbDécumalesPoids&#13;
NbDécimalesVolume&#13;
FormeJuridique&#13;
LgCptTiers&#13;
LgCptArt&#13;
CarComplCpteTiers&#13;
API_Key&#13;
Longitude&#13;
Latitude&#13;
ProtectionDoc</Champs_Nom>
      <TableComplete>IDSociété&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Nom&#13;
Adresse1&#13;
Adresse2&#13;
CP&#13;
Ville&#13;
Tel&#13;
Fax&#13;
Mail&#13;
Web&#13;
InfoEntête&#13;
Logo&#13;
Siret&#13;
APE&#13;
RIB&#13;
InfoPied&#13;
TVAIntra&#13;
Capital&#13;
RCS&#13;
NbDécimalesQté&#13;
NbDécimalesPrix&#13;
NbDécumalesPoids&#13;
NbDécimalesVolume&#13;
FormeJuridique&#13;
LgCptTiers&#13;
LgCptArt&#13;
CarComplCpteTiers&#13;
API_Key&#13;
Longitude&#13;
Latitude&#13;
ProtectionDoc</TableComplete>
      <Description>Société</Description>
      <Table_Nom>SOCIETE</Table_Nom>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331290</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331290</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>SOCIETE_COMPLEMENT</Table_Nom>
      <Description>Société +</Description>
      <Champs_Nom/>
      <NomOrigine>Societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>sousfamille</NomOrigine>
      <Table_Nom>SOUS_FAMILLE_ARTICLE</Table_Nom>
      <Champs_Nom>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</Champs_Nom>
      <TableComplete>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</TableComplete>
      <Description>Sous-Famille Article</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331291</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>sousfamille</NomOrigine>
      <Table_Nom>SOUS_FAMILLE_CLIENT</Table_Nom>
      <Champs_Nom>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</Champs_Nom>
      <TableComplete>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</TableComplete>
      <Description>Sous-famille Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331291</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>sousfamille</NomOrigine>
      <Table_Nom>SOUS_FAMILLE_FOURNISSEUR</Table_Nom>
      <Champs_Nom>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</Champs_Nom>
      <TableComplete>IDSousFamille&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Type&#13;
IDFamille&#13;
LibelleFamille</TableComplete>
      <Description>Sous-Famille Fournisseur</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331292</Version>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331292</Version>
      <AfficherTypeData>0</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>SPECIFIQUE</Table_Nom>
      <Description>Trt. Spécifique</Description>
      <Champs_Nom/>
      <NomOrigine>societe</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331292</Version>
      <AfficherTypeData>1</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>SYNCGOOGLEAGENDA</Table_Nom>
      <Limite_Histo_Defaut>30</Limite_Histo_Defaut>
      <Description>Sync Google Agenda</Description>
      <Champs_Nom/>
      <NomOrigine>googleagenda</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <Version>20241213162331292</Version>
      <AfficherTypeData>1</AfficherTypeData>
      <NomSoft>GesCom</NomSoft>
      <Table_Nom>SYNCOUTLOOKAGENDA</Table_Nom>
      <Limite_Histo_Defaut>30</Limite_Histo_Defaut>
      <Description>Sync Outlook Agenda</Description>
      <Champs_Nom/>
      <NomOrigine>googleagenda</NomOrigine>
      <TableComplete/>
      <CodeCopie/>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs particuliers</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331292</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS-CLIENT</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331293</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS-FAM-ART</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs Famille Article</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331293</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS-FAM-CLI</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs Famille Client</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331293</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS-GRILLE</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs grille</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331294</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS-GRILLE-FOUR</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs fournisseurs grille</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331294</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tarifs</NomOrigine>
      <Table_Nom>TARIFS-QUANT</Table_Nom>
      <Champs_Nom>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</Champs_Nom>
      <TableComplete>IDTarifs&#13;
IDInterne&#13;
Code&#13;
DateCreation&#13;
DateModification&#13;
Libelle&#13;
QtéMax&#13;
PrixVente&#13;
Remise&#13;
TypeTiers&#13;
TiersDébut&#13;
TiersFin&#13;
TypeArticle&#13;
ArticleDébut&#13;
ArticleFin&#13;
DateDébut&#13;
DateFin&#13;
QtéMin&#13;
TypeCalcul</TableComplete>
      <Description>Tarifs Quantitatif</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331294</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>ecotaxe</NomOrigine>
      <Table_Nom>TAXE-ECO</Table_Nom>
      <Champs_Nom>IDEcoTaxe&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Valeur&#13;
TypeCalcul&#13;
SoumisTVA&#13;
MontantHT&#13;
MontantTTC</Champs_Nom>
      <TableComplete>IDEcoTaxe&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Valeur&#13;
TypeCalcul&#13;
SoumisTVA&#13;
MontantHT&#13;
MontantTTC</TableComplete>
      <Description>Eco-taxe</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331295</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>tva</NomOrigine>
      <Table_Nom>TAXE-TVA</Table_Nom>
      <Champs_Nom>IDTVA&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TauxTVA&#13;
IDInterne_RegimeTVA</Champs_Nom>
      <TableComplete>IDTVA&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TauxTVA&#13;
IDInterne_RegimeTVA</TableComplete>
      <Description>TVA</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331295</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>collaborateur</NomOrigine>
      <Champs_Nom>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</Champs_Nom>
      <TableComplete>IDCollaborateur&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Prenom&#13;
IDInerne_SecteurGeo&#13;
Type&#13;
PrixVente&#13;
Fonction_Qualif&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient</TableComplete>
      <Description>Techniciens</Description>
      <Table_Nom>TECHNICIEN</Table_Nom>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331296</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>techniciens_nuxi</NomOrigine>
      <Table_Nom>TECHNICIENS_NUXI</Table_Nom>
      <Champs_Nom>IDtechniciens_nuxi&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Adresse&#13;
CP&#13;
Ville&#13;
Pays&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Notes&#13;
CoutHoraire&#13;
CouleurPlanning&#13;
IDInterne_Equipe&#13;
IDInterne_Article&#13;
Libelle_Article&#13;
Date_Creation&#13;
Date_Modification&#13;
Tech_Type&#13;
Image_tech&#13;
Actif&#13;
Code_Article&#13;
Design_Facturation&#13;
gglAgendaTitre&#13;
gglAgendaIdentifiant&#13;
gglAgendaCompte</Champs_Nom>
      <TableComplete>IDtechniciens_nuxi&#13;
IDInterne&#13;
Code&#13;
Nom&#13;
Adresse&#13;
CP&#13;
Ville&#13;
Pays&#13;
Telephone&#13;
Mobile&#13;
Email&#13;
Notes&#13;
CoutHoraire&#13;
CouleurPlanning&#13;
IDInterne_Equipe&#13;
IDInterne_Article&#13;
Libelle_Article&#13;
Date_Creation&#13;
Date_Modification&#13;
Tech_Type&#13;
Image_tech&#13;
Actif&#13;
Code_Article&#13;
Design_Facturation&#13;
gglAgendaTitre&#13;
gglAgendaIdentifiant&#13;
gglAgendaCompte</TableComplete>
      <Description>NB Techniciens</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331296</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>Tiers</NomOrigine>
      <Table_Nom>TIERS</Table_Nom>
      <Champs_Nom>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</Champs_Nom>
      <TableComplete>IDTiers&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Civilité&#13;
Nom&#13;
Livraison_Adresse1&#13;
Livraison_Adresse2&#13;
Livraison_CP&#13;
Livraison_Ville&#13;
Livraison_IDInternePays&#13;
Livraison_Info&#13;
Livraison_Longitude&#13;
Livraison_Latitude&#13;
Livraison_Contact_Civilite&#13;
Livraison_Contact_Nom&#13;
Livraison_Contact_Tel&#13;
Livraison_Contact_GSM&#13;
Livraison_Contact_Mail&#13;
Livraison_Contact_Web&#13;
Livraison_Contact_Fax&#13;
Livraison_Contact_Fonction&#13;
Facturation_Adresse1&#13;
Facturation_Adresse2&#13;
Facturation_CP&#13;
Facturation_Ville&#13;
Facturation_IDInternePays&#13;
Facturation_Info&#13;
Facturation_Longitude&#13;
Facturation_Latitude&#13;
Facturation_Contact_Civilite&#13;
Facturation_Contact_Nom&#13;
Facturation_Contact_Prenom&#13;
Facturation_Contact_Fonction&#13;
Livraison_contact_Prenom&#13;
Facturation_Contact_Tel&#13;
Facturation_Contact_GSM&#13;
Facturation_Contact_Mail&#13;
Facturation_Contact_Web&#13;
Facturation_Contact_Fax&#13;
IDInterneFamille&#13;
IDInterneSousFamille&#13;
PrcRemise&#13;
Encours_Autorise&#13;
Solde_Actuel&#13;
CA&#13;
TypeTiers&#13;
PrcEscompte&#13;
IDInterneModeReglement&#13;
IDInterneCollaborateur&#13;
Livraison_Contact_Service&#13;
Facturation_Contact_Service&#13;
IDInterneSecteurGeographique&#13;
Note&#13;
IDInterneTypeTarif&#13;
IDInterneGrilleTarif&#13;
NDChampsSpec&#13;
Facturation_Pays&#13;
Livraison_Pays&#13;
Facturation_Nom&#13;
Livraison_Nom&#13;
Facturation_LngLatPrécision&#13;
Livraison_LngLatPrécision&#13;
IDInterne_RegimeTVA&#13;
Bloqué&#13;
BloquéRaison&#13;
FenSpecifique&#13;
IDInterne_Groupe1&#13;
IDInterne_Groupe2&#13;
Siret&#13;
LienExterne&#13;
Facturation_Civilite&#13;
Livraison_Civilite&#13;
Facturation_Adresse3&#13;
Livraison_Adresse3&#13;
Date_Der_Fact&#13;
TVAIntra</TableComplete>
      <Description>Tiers</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331297</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>tournees_V2</NomOrigine>
      <Table_Nom>TOURNEES</Table_Nom>
      <Champs_Nom>IDTournees_V2&#13;
IDInterne&#13;
DateCreation&#13;
DateModification&#13;
Date&#13;
IDInterneCollaborateur&#13;
Libelle&#13;
AdresseDépart&#13;
AdresseArrivée&#13;
LngDépart&#13;
LatDépart&#13;
LngArrivée&#13;
LatArrivée&#13;
TrajetPréféré&#13;
EtapeXML&#13;
OptimisationXML&#13;
DeviceID&#13;
TypeArdresses&#13;
NomCollaborateur</Champs_Nom>
      <TableComplete>IDTournees_V2&#13;
IDInterne&#13;
DateCreation&#13;
DateModification&#13;
Date&#13;
IDInterneCollaborateur&#13;
Libelle&#13;
AdresseDépart&#13;
AdresseArrivée&#13;
LngDépart&#13;
LatDépart&#13;
LngArrivée&#13;
LatArrivée&#13;
TrajetPréféré&#13;
EtapeXML&#13;
OptimisationXML&#13;
DeviceID&#13;
TypeArdresses&#13;
NomCollaborateur</TableComplete>
      <Description>Gestion des tournées</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331297</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>tracking_nuxi</NomOrigine>
      <Table_Nom>TRACKING_NUXI</Table_Nom>
      <Champs_Nom>IDLiaisons_nuxi&#13;
IdInterne1&#13;
IdInterne2&#13;
IDInterne&#13;
Table1&#13;
Table2&#13;
Date_Creation&#13;
Date_Modification&#13;
Complements</Champs_Nom>
      <TableComplete>IDLiaisons_nuxi&#13;
IdInterne1&#13;
IdInterne2&#13;
IDInterne&#13;
Table1&#13;
Table2&#13;
Date_Creation&#13;
Date_Modification&#13;
Complements</TableComplete>
      <Description>NB Tracking</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331297</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>inventaire</NomOrigine>
      <Table_Nom>TRSF_DEPOT</Table_Nom>
      <Limite_Histo_Defaut>90</Limite_Histo_Defaut>
      <Champs_Nom>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</Champs_Nom>
      <TableComplete>IDInventaire&#13;
IDInterne&#13;
Code&#13;
Date&#13;
Etat&#13;
Note&#13;
Référence&#13;
IDInterne_Dépôt&#13;
TypeDocument&#13;
IDInterne_Dépot_Dest&#13;
IDInterneChantier&#13;
IDInterneAffaire&#13;
NDChampsSpec&#13;
FenSpecifique</TableComplete>
      <Description>Transfert de dépôt</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331298</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>tva_regime</NomOrigine>
      <Table_Nom>TVA_REGIME</Table_Nom>
      <Champs_Nom>IDtva_regime&#13;
RegimeClient&#13;
RegimeArticle&#13;
IDInterne_TVA</Champs_Nom>
      <TableComplete>IDtva_regime&#13;
RegimeClient&#13;
RegimeArticle&#13;
IDInterne_TVA</TableComplete>
      <Description>TVA Régime</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331298</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>TYPEARTICLE</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Type d&amp;apos;article</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331299</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>nomenclature</NomOrigine>
      <Table_Nom>TYPETARIF</Table_Nom>
      <Champs_Nom>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</Champs_Nom>
      <TableComplete>IDNomenclature&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
TypeNomenclature&#13;
PrixVente&#13;
IDInterne_TVA&#13;
TauxTVA&#13;
PrixRevient&#13;
IdInterne_Parent</TableComplete>
      <Description>Type de tarif</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331299</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>unite</NomOrigine>
      <Table_Nom>UNITE</Table_Nom>
      <Champs_Nom>IDUnite&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
CoefConversion&#13;
TypeUnite</Champs_Nom>
      <TableComplete>IDUnite&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
CoefConversion&#13;
TypeUnite</TableComplete>
      <Description>Unite</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331299</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>0</AfficherTypeData>
      <NomOrigine>unite</NomOrigine>
      <Table_Nom>UNITEVENTE</Table_Nom>
      <Champs_Nom>IDUnite&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
CoefConversion&#13;
TypeUnite</Champs_Nom>
      <TableComplete>IDUnite&#13;
DateCreation&#13;
DateModification&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
CoefConversion&#13;
TypeUnite</TableComplete>
      <Description>Unité Vente</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331300</Version>
    </Enregistrement>
    <Enregistrement>
      <AfficherTypeData>1</AfficherTypeData>
      <NomOrigine>zones_interventions_nuxi</NomOrigine>
      <Table_Nom>ZONES_INTERVENTIONS_NUXI</Table_Nom>
      <Champs_Nom>IDzones_interventionn_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Duree_deplacement&#13;
Date_Creation&#13;
Date_Modification</Champs_Nom>
      <TableComplete>IDzones_interventionn_nuxi&#13;
IDInterne&#13;
Code&#13;
Libelle&#13;
Duree_deplacement&#13;
Date_Creation&#13;
Date_Modification</TableComplete>
      <Description>NB Zones Interventions</Description>
      <CodeCopie>PROCÉDURE MoiMême(TableSrc est une Source de Données, TableDest est Source de Données, ListeRubCopie est une chaine, ListeRubPerso est une chaine = &amp;quot;&amp;quot;)&#13;
&#13;
//Trace(&amp;quot;xx2 BB&amp;quot; +&amp;quot; &amp;quot; + TableDest..BaseDeDonnées + &amp;quot; / &amp;quot; + HNbEnr(TableSrc) + &amp;quot; / &amp;quot; + HListeRubrique(TableDest) )&#13;
//Ajout pour gestion FenSpec&#13;
TempXML est une chaine = &amp;quot;TempXML&amp;quot; + DonneGUID(guidBrut)&#13;
EnregXML	est un XMLDocument&#13;
StrXML		est une chaîne ANSI&#13;
tabChampsFenSpec est un tableau de 0 chaîne&#13;
nNbTabChampsFenSpec est un entier &#13;
SI Contient(HListeRubrique(TableDest), &amp;quot;FenSpecifique&amp;quot;) ALORS&#13;
ChaîneVersTableau(ListeRubPerso,tabChampsFenSpec)&#13;
nNbTabChampsFenSpec = tabChampsFenSpec..Occurrence&#13;
Fin&#13;
//*DEBUT_CODE_COPIE_SQL* Fin Ajout pour FenSpec&#13;
POUR TOUT TableSrc 				&#13;
SI TypeSyncEnCours = &amp;quot;C&amp;quot; _OU_ PAS HLitRecherche(TableDest, &amp;quot;IDInterne&amp;quot;,TableSrc.IDInterne,hIdentique ) ALORS&#13;
HRAZ(TableDest)&#13;
FIN&#13;
HCopieEnreg(TableDest,TableSrc,ListeRubCopie,ListeRubCopie)&#13;
//Ajouter Valeurs de FenSpec&#13;
SI nNbTabChampsFenSpec &amp;gt; 0 ALORS&#13;
VariableRAZ(EnregXML)&#13;
POUR l = 1 À nNbTabChampsFenSpec&#13;
si tabChampsFenSpec[l] &amp;lt;&amp;gt; &amp;quot;&amp;quot; alors&#13;
EnregXML.Data.Champ[l]..Attribut[TexteVersXML(tabChampsFenSpec[l])] = TexteVersXML({&amp;quot;TableSrc.&amp;quot; + tabChampsFenSpec[l],indVariable})&#13;
fin&#13;
FIN&#13;
XMLDocument(TempXML,XMLConstruitChaîne(EnregXML))&#13;
StrXML					= XMLConstruitChaîne(TempXML,XMLDocumentDéfaut+XMLMiseEnForme)&#13;
TableDest.FenSpecifique	= StrXML &#13;
XMLTermine(TempXML)&#13;
FIN&#13;
//Fin Valeurs de FenSpec&#13;
SI TableDest..NouvelEnregistrement ALORS&#13;
HAjoute(TableDest)&#13;
SINON&#13;
HModifie(TableDest)&#13;
FIN&#13;
NbEnregSynchronisé ++&#13;
FIN						&#13;
</CodeCopie>
      <NomSoft>GesCom</NomSoft>
      <Version>20241213162331300</Version>
    </Enregistrement>
  </StructureND>
  <ConfigMobile>
    <NomSoft>EBPGesComOL</NomSoft>
    <DesignationSoft>Logiciel de gestion commerciale</DesignationSoft>
    <TypeAutorisation>1|01|Clients / Prospects &#13;
2|02|Clients / Prospects (saisie)&#13;
3|03|Fournisseurs &#13;
4|04|Fournisseurs (saisie)&#13;
5|05|Contacts &#13;
6|06|Contacts (saisie)&#13;
7|07|Articles &#13;
8|08|Articles (saisie)&#13;
9|09|Inventaire &#13;
10|10|Inventaire (saisie)&#13;
11|11|Bons d'entrée &#13;
12|12|Bons d'entrée (saisie) &#13;
13|13|Bons de sortie &#13;
14|14|Bons de sortie (saisie)&#13;
15|15|Devis Client &#13;
16|16|Devis Client (saisie)&#13;
17|17|Commande Client &#13;
18|18|Commande Client (saisie)&#13;
19|19|Facture Client &#13;
20|20|Facture Client (saisie)&#13;
53|21|Avoir Client &#13;
54|22|Avoir Client (saisie)&#13;
21|23|BL Client &#13;
22|24|BL Client (saisie)&#13;
23|25|Commande Fournisseur &#13;
24|26|Commande Fournisseur (saisie)&#13;
25|27|Facture Fournisseur &#13;
26|28|Facture Fournisseur (saisie)&#13;
41|29|Bon Réception Fournisseur &#13;
42|30|Bon Réception Fournisseur (saisie)&#13;
72|31|Demande de Prix &#13;
73|32|Demande de Prix (saisie)&#13;
66|33|SAV Appareils client&#13;
67|34|SAV Appareils client (saisie)&#13;
31|35|SAV Contrats&#13;
55|36|SAV Incidents&#13;
56|37|SAV Incidents (saisie)&#13;
33|38|SAV Intervention&#13;
34|39|SAV Intervention (saisie)&#13;
57|41|Pointage des heures&#13;
58|42|Statistiques sur CA&#13;
59|43|Statistiques sur Marge&#13;
60|44|Statistiques Quantitatives&#13;
61|45|Statistiques Clients&#13;
62|46|Statistiques Fournisseurs&#13;
63|47|Statistiques Articles&#13;
64|48|Statistiques Ventes&#13;
65|49|Statistiques Interventions&#13;
36|50|Visu des prix de revient&#13;
37|51|Visu des prix d'achat&#13;
38|52|Visu du stock&#13;
39|53|Autoriser la saisie de remises&#13;
40|54|Autoriser la modification des prix&#13;
70|55|Valorisation des doc : Visible/Masqué&#13;
71|56|Prix des articles : Visible/Masqué&#13;
</TypeAutorisation>
  </ConfigMobile>
</NuxiDev>
